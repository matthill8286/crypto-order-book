{"version":3,"sources":["../../src/styles/ThemeProvider.tsx"],"names":["React","ThemeProvider","Provider","saiyanTheme","props","mergedTheme","Object","assign","theme","children"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,QAA1B,QAA0C,mBAA1C;AACA,SAASC,WAAT;AASA,OAAO,IAAMF,aAA2C,GAAG,SAA9CA,aAA8C,CAAAG,KAAK,EAAI;AAMlE,MAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,WAAlB,EAA+BC,KAAK,CAACI,KAArC,CAApB;AACA,SAAO,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEH;AAAjB,KAA+BD,KAAK,CAACK,QAArC,CAAP;AACD,CARM","sourcesContent":["import React from 'react'\nimport { ThemeProvider as Provider } from 'styled-components'\nimport { saiyanTheme } from './sc-vars-saiyan'\n\ntype theme = typeof saiyanTheme\n\ninterface ThemeProviderProps {\n  children: React.ReactNode\n  theme: theme\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = props => {\n  // TODO: Define a Namespace so we don't collide with other Themes\n  // const theme = {\n  //   myComponentLib: props.theme,\n  //   // Namespace the theme for the user\n  // };\n  const mergedTheme = Object.assign({}, saiyanTheme, props.theme)\n  return <Provider theme={mergedTheme}>{props.children}</Provider>\n}\n"],"file":"ThemeProvider.js"}