{"version":3,"sources":["../../../../../src/components/Organisms/Teasers/LinkImageTeaser/LinkImageTeaser.tsx"],"names":["React","useGraphCmsImages","Link","ImageTeaser","styled","StyledImageTeaser","div","getLinkTargetValue","isLinkBlank","LinkImageTeaser","link","images","contentful","lazyloadLowQuality","onClick","otherImageTeaserProps","xl","lg","md","sm","finalImages","ref","isRelativeUrl","to","isAbsoluteUrl","href"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,iBAAT;AACA,SAASC,IAAT;AACA,SAASC,WAAT;AACA,SAASC,MAAT;AAEA,IAAMC,iBAAiB,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,mCAAvB;;AAKA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,WAAD,EAA0B;AACnD,SAAOA,WAAW,GAAG,QAAH,GAAc,OAAhC;AACD,CAFD;;AAIA,OAAO,IAAMC,eAA2C,GAAG,SAA9CA,eAA8C,OAOrD;AAAA,MANJC,IAMI,QANJA,IAMI;AAAA,MALJC,MAKI,QALJA,MAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,kBAGI,QAHJA,kBAGI;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,MADDC,qBACC;;AAAA,2BACuBd,iBAAiB,CAC1C,CAACU,MAAM,CAACK,EAAR,EAAYL,MAAM,CAACM,EAAnB,EAAuBN,MAAM,CAACO,EAA9B,EAAkCP,MAAM,CAACQ,EAAzC,CAD0C,EAE1C,CAACN,kBAFyC,CADxC;AAAA;AAAA,MACGO,WADH;AAAA,MACgBC,GADhB;;AAMJ,MAAMC,aAAa,GAAGZ,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEa,EAA5B;AACA,MAAMC,aAAa,GAAG,CAACF,aAAD,KAAkBZ,IAAlB,aAAkBA,IAAlB,uBAAkBA,IAAI,CAAEe,IAAxB,CAAtB;AAEA,SACE,oBAAC,KAAD,CAAO,QAAP,QACGH,aAAa,IACZ,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAEZ,IAAI,CAACa,EAAf;AAAmB,IAAA,MAAM,EAAEhB,kBAAkB,CAAC,CAAC,CAACG,IAAI,CAACF,WAAR;AAA7C,KACE,oBAAC,iBAAD;AAAmB,iBAAU,qBAA7B;AAAmD,IAAA,OAAO,EAAEM,OAA5D;AAAqE,IAAA,GAAG,EAAEO;AAA1E,KACE,oBAAC,WAAD,eAAiBN,qBAAjB;AAAwC,IAAA,WAAW,EAAEK;AAArD,KADF,CADF,CAFJ,EAQGI,aAAa,IACZ;AAAG,IAAA,IAAI,EAAEd,IAAI,CAACe,IAAd;AAAoB,IAAA,MAAM,EAAElB,kBAAkB,CAAC,CAAC,CAACG,IAAI,CAACF,WAAR;AAA9C,KACE,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAEM,OAA5B;AAAqC,IAAA,GAAG,EAAEO,GAA1C;AAA+C,iBAAU;AAAzD,KACE,oBAAC,WAAD,eAAiBN,qBAAjB;AAAwC,IAAA,WAAW,EAAEK;AAArD,KADF,CADF,CATJ,EAeG,CAACV,IAAD,IACC,oBAAC,iBAAD;AAAmB,IAAA,OAAO,EAAEI,OAA5B;AAAqC,IAAA,GAAG,EAAEO;AAA1C,KACE,oBAAC,WAAD,eAAiBN,qBAAjB;AAAwC,IAAA,WAAW,EAAEK;AAArD,KADF,CAhBJ,CADF;AAuBD,CAvCM","sourcesContent":["import React from 'react'\nimport { ImageTeaserProps } from '../ImageTeaser/ImageTeaser.interface'\nimport { useGraphCmsImages } from '@/utils/useGraphCmsImages'\nimport { Link } from '@/components/Atoms/Link'\nimport { ImageTeaser } from '../ImageTeaser/ImageTeaser'\nimport { styled } from '@/styles'\n\nconst StyledImageTeaser = styled.div`\n  cursor: pointer;\n  height: 100%;\n`\n\nconst getLinkTargetValue = (isLinkBlank: boolean) => {\n  return isLinkBlank ? '_blank' : '_self'\n}\n\nexport const LinkImageTeaser: React.FC<ImageTeaserProps> = ({\n  link,\n  images,\n  contentful,\n  lazyloadLowQuality,\n  onClick,\n  ...otherImageTeaserProps\n}) => {\n  const [finalImages, ref] = useGraphCmsImages(\n    [images.xl, images.lg, images.md, images.sm],\n    !lazyloadLowQuality\n  )\n\n  const isRelativeUrl = link?.to\n  const isAbsoluteUrl = !isRelativeUrl && link?.href\n\n  return (\n    <React.Fragment>\n      {isRelativeUrl && (\n        <Link to={link.to} target={getLinkTargetValue(!!link.isLinkBlank)}>\n          <StyledImageTeaser data-test=\"link-wrapped-teaser\" onClick={onClick} ref={ref}>\n            <ImageTeaser {...otherImageTeaserProps} finalImages={finalImages} />\n          </StyledImageTeaser>\n        </Link>\n      )}\n      {isAbsoluteUrl && (\n        <a href={link.href} target={getLinkTargetValue(!!link.isLinkBlank)}>\n          <StyledImageTeaser onClick={onClick} ref={ref} data-test=\"anchor-wrapped-teaser\">\n            <ImageTeaser {...otherImageTeaserProps} finalImages={finalImages} />\n          </StyledImageTeaser>\n        </a>\n      )}\n      {!link && (\n        <StyledImageTeaser onClick={onClick} ref={ref}>\n          <ImageTeaser {...otherImageTeaserProps} finalImages={finalImages} />\n        </StyledImageTeaser>\n      )}\n    </React.Fragment>\n  )\n}\n"],"file":"LinkImageTeaser.js"}