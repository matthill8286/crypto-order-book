{"version":3,"sources":["../../../../../src/components/Organisms/Teasers/Teaser/Teaser.test.tsx"],"names":["React","mountWithThemeAndRouter","renderWithThemeAndRouter","Teaser","describe","mockTeaserData","headline","contentText","image","altText","mainLink","to","label","mockTeaserData2","mockTeaserData4","linkList","it","tree","id","name","expect","toMatchSnapshot","clickHandler","jest","fn","simulate","toHaveBeenCalled"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { mountWithThemeAndRouter, renderWithThemeAndRouter } from '@/testRenderer'\nimport { Teaser } from './Teaser'\nimport { TeaserProps } from './Teaser.interface'\n\ndescribe('Teaser', () => {\n  const mockTeaserData: TeaserProps = {\n    headline: 'High standards require sensible processes',\n    contentText:\n      'Well, the answer is obvious: “He hasn’t died yet.” Fortunately, for us, Munger has kept on ticking.',\n    image: 'public/images/teasers/project_teaser_600x450.jpg',\n    altText: 'Teaser Picture1',\n    mainLink: { to: '#', label: 'To the Moon!!' },\n  }\n\n  const mockTeaserData2: TeaserProps = {\n    headline: 'saiyan Text!',\n    contentText:\n      'Well, the answer is obvious: “He hasn’t died yet.” Fortunately, for us, Munger has kept on ticking.',\n    image: 'public/images/teasers/project_teaser_600x450.jpg',\n    altText: 'Teaser Picture2',\n    mainLink: { to: '#', label: 'Can we filter??' },\n  }\n\n  const mockTeaserData4: TeaserProps = {\n    headline: 'Simon & Art Garfunkel',\n    mainLink: { to: '#', label: 'All wishes come true' },\n    linkList: [\n      { to: '#', label: 'Sound of Silence' },\n      { to: '#', label: 'Homeward Bound' },\n      { to: '#', label: 'Crazy nights at Alamo' },\n    ],\n  }\n\n  describe('renders correctly', () => {\n    it('as default teaser with badges', () => {\n      const tree = renderWithThemeAndRouter(\n        <Teaser\n          headline={mockTeaserData.headline}\n          contentText={mockTeaserData.contentText}\n          image={mockTeaserData.image}\n          altText={mockTeaserData.altText}\n          mainLink={mockTeaserData.mainLink}\n          orientation={'auto'}\n          badges={[\n            { id: 0, name: 'Featured' },\n            { id: 1, name: 'Live!!!!' },\n          ]}\n        />\n      )\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('as teaser with nothing but headline', () => {\n      const tree = renderWithThemeAndRouter(<Teaser headline={mockTeaserData.headline} />)\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('as teaser in portrait mode', () => {\n      const tree = renderWithThemeAndRouter(\n        <Teaser\n          headline={mockTeaserData2.headline}\n          contentText={mockTeaserData2.contentText}\n          image={mockTeaserData2.image}\n          altText={mockTeaserData2.altText}\n          mainLink={mockTeaserData2.mainLink}\n          orientation=\"portrait\"\n        />\n      )\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('as teaser without image', () => {\n      const tree = renderWithThemeAndRouter(\n        <Teaser\n          headline={mockTeaserData.headline}\n          contentText={mockTeaserData.contentText}\n          mainLink={{\n            to: mockTeaserData.mainLink?.to || '',\n          }}\n          orientation=\"portrait\"\n        />\n      )\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('as foldable teaser ', () => {\n      const tree = renderWithThemeAndRouter(\n        <Teaser\n          headline={mockTeaserData.headline}\n          contentText={mockTeaserData.contentText}\n          mainLink={mockTeaserData.mainLink}\n          orientation=\"portrait\"\n          foldable={'always'}\n        />\n      )\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('as teaser with link list', () => {\n      const tree = renderWithThemeAndRouter(\n        <Teaser\n          headline={mockTeaserData4.headline}\n          mainLink={mockTeaserData4.mainLink}\n          linkList={mockTeaserData4.linkList}\n          orientation=\"portrait\"\n          foldable={'mobile'}\n        />\n      )\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('with custom headline tag', () => {\n      const tree = renderWithThemeAndRouter(\n        <Teaser headline={mockTeaserData.headline} headlineTag={'span'} />\n      )\n\n      expect(tree).toMatchSnapshot()\n    })\n  })\n\n  describe('event handling', () => {\n    it('triggers click handler', () => {\n      const clickHandler = jest.fn()\n\n      const tree = mountWithThemeAndRouter(\n        <Teaser\n          headline={mockTeaserData4.headline}\n          mainLink={mockTeaserData4.mainLink}\n          linkList={mockTeaserData4.linkList}\n          orientation=\"portrait\"\n          foldable={'mobile'}\n          onClick={clickHandler}\n        />\n      )\n      tree.simulate('click')\n\n      expect(clickHandler).toHaveBeenCalled()\n    })\n  })\n})\n"],"file":"Teaser.test.js"}