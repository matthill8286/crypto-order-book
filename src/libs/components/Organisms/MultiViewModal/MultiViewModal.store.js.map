{"version":3,"sources":["../../../../src/components/Organisms/MultiViewModal/MultiViewModal.store.tsx"],"names":["React","createContext","useContext","useReducer","useMemo","MultiViewModalActionType","closeAction","type","MULTI_VIEW_MODAL_CLOSE","payload","goHomeAction","MULTI_VIEW_MODAL_GO_HOME","setViewAction","id","MULTI_VIEW_MODAL_SET_VIEW","setActiveAction","isActive","MULTI_VIEW_MODAL_SET_ACTIVE","initialState","homeViewId","activeViewId","hasBackButton","reducer","state","action","MultiViewModalContext","console","log","useMultiViewModalContext","useMultiViewModalReducer","useMultiViewModalAction","dispatch","close","goHome","setView","setActive","useMultiViewModalState","MultiViewModalProvider","children","modalReducer"],"mappings":"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","sourcesContent":["import React, { Dispatch, createContext, useContext, useReducer, useMemo, FC } from 'react'\n\nenum MultiViewModalActionType {\n  MULTI_VIEW_MODAL_CLOSE = 'MULTI_VIEW_MODAL_CLOSE',\n  MULTI_VIEW_MODAL_GO_HOME = 'MULTI_VIEW_MODAL_GO_HOME',\n  MULTI_VIEW_MODAL_SET_VIEW = 'MULTI_VIEW_MODAL_SET_VIEW',\n  MULTI_VIEW_MODAL_SET_ACTIVE = 'MULTI_VIEW_MODAL_SET_ACTIVE',\n}\n\ntype MultiViewModalClose = ReturnType<typeof closeAction>\nconst closeAction = () => ({\n  type: MultiViewModalActionType.MULTI_VIEW_MODAL_CLOSE,\n  payload: {},\n})\n\ntype MultiViewModalGoHome = ReturnType<typeof goHomeAction>\nconst goHomeAction = () => ({\n  type: MultiViewModalActionType.MULTI_VIEW_MODAL_GO_HOME,\n  payload: {},\n})\n\ntype MultiViewModalSetView = ReturnType<typeof setViewAction>\nconst setViewAction = (id: string) => ({\n  type: MultiViewModalActionType.MULTI_VIEW_MODAL_SET_VIEW,\n  payload: { id },\n})\n\ntype MultiViewModalSetActive = ReturnType<typeof setActiveAction>\nconst setActiveAction = (isActive: boolean) => ({\n  type: MultiViewModalActionType.MULTI_VIEW_MODAL_SET_ACTIVE,\n  payload: { isActive },\n})\n\ntype MultiViewModalAction =\n  | MultiViewModalSetView\n  | MultiViewModalSetActive\n  | MultiViewModalGoHome\n  | MultiViewModalClose\n\ninterface MultiViewModalState {\n  homeViewId: string | null\n  activeViewId: string | null\n  hasBackButton: boolean\n  isActive: boolean\n}\n\ntype MultiViewModalStore = [MultiViewModalState, Dispatch<MultiViewModalAction>]\n\ntype MultiViewModalReducer = (\n  state: MultiViewModalState,\n  action: MultiViewModalAction\n) => MultiViewModalState\n\nconst initialState: MultiViewModalState = {\n  homeViewId: null,\n  activeViewId: null,\n  hasBackButton: false,\n  isActive: false,\n}\n\nconst reducer: MultiViewModalReducer = (\n  state: MultiViewModalState,\n  action: MultiViewModalAction\n): MultiViewModalState => {\n  switch (action.type) {\n    case MultiViewModalActionType.MULTI_VIEW_MODAL_CLOSE: {\n      return {\n        ...state,\n        activeViewId: state.homeViewId,\n        hasBackButton: false,\n        isActive: false,\n      }\n    }\n    case MultiViewModalActionType.MULTI_VIEW_MODAL_GO_HOME: {\n      return {\n        ...state,\n        activeViewId: state.homeViewId,\n        hasBackButton: false,\n      }\n    }\n    case MultiViewModalActionType.MULTI_VIEW_MODAL_SET_VIEW: {\n      const {\n        payload: { id },\n      } = action as MultiViewModalSetView\n      return {\n        ...state,\n        activeViewId: id,\n        hasBackButton: id !== state.homeViewId,\n      }\n    }\n    case MultiViewModalActionType.MULTI_VIEW_MODAL_SET_ACTIVE: {\n      const {\n        payload: { isActive },\n      } = action as MultiViewModalSetActive\n      return {\n        ...state,\n        isActive,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nconst MultiViewModalContext = createContext<MultiViewModalStore>([\n  initialState,\n  // eslint-disable-next-line no-console\n  action => console.log(action),\n])\n\nconst useMultiViewModalContext = () => useContext<MultiViewModalStore>(MultiViewModalContext)\n\nconst useMultiViewModalReducer = (homeViewId: string): MultiViewModalStore =>\n  useReducer<MultiViewModalReducer>(reducer, {\n    ...initialState,\n    homeViewId,\n    activeViewId: homeViewId,\n  })\n\nexport const useMultiViewModalAction = () => {\n  const [, dispatch] = useMultiViewModalContext()\n  return useMemo(\n    () => ({\n      close: () => dispatch(closeAction()),\n      goHome: () => dispatch(goHomeAction()),\n      setView: id => dispatch(setViewAction(id)),\n      setActive: isActive => dispatch(setActiveAction(isActive)),\n    }),\n    [dispatch]\n  )\n}\n\nexport const useMultiViewModalState = (): MultiViewModalState => useMultiViewModalContext()[0]\n\nexport const MultiViewModalProvider: FC<{ homeViewId: string }> = ({ homeViewId, children }) => {\n  const modalReducer = useMultiViewModalReducer(homeViewId)\n  return (\n    <MultiViewModalContext.Provider value={modalReducer}>{children}</MultiViewModalContext.Provider>\n  )\n}\n"],"file":"MultiViewModal.store.js"}