{"version":3,"sources":["../../../../src/components/Organisms/ScrollAssetCarousel/ScrollAssetCarousel.test.tsx"],"names":["React","SkeletonBlockItem","ScrollSnapSlider","mountWithThemeAndRouter","renderWithThemeAndRouter","assetNames","mockAssets","AssetCarousel","describe","carouselProps","assets","i","length","push","beforeEach","loading","lazyLoad","tileWidth","context","slidesPerPageSettings","desktop","tablet","mobileSmall","mobileBig","NoAssetsComponent","onAssetClick","onSlideChange","it","wrapper","expect","toBeDefined","skip","find","toEqual","PromotedElement"],"mappings":";;AAAA,OAAO,wBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT;AACA,SAASC,gBAAT;AACA,SAASC,uBAAT,EAAkCC,wBAAlC;AAEA,SAASC,UAAT,EAAqBC,UAArB;AACA,SAASC,aAAT;AAGAC,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/B,MAAIC,aAAJ;AACA,MAAMC,MAAe,GAAG,EAAxB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAAU,CAACO,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CD,IAAAA,MAAM,CAACG,IAAP,CAAYP,UAAU,CAACD,UAAU,CAACM,CAAD,CAAX,CAAtB;AACD;;AAEDG,EAAAA,UAAU,CAAC,YAAM;AACfL,IAAAA,aAAa,GAAG;AACdM,MAAAA,OAAO,EAAE,KADK;AAEdC,MAAAA,QAAQ,EAAE,IAFI;AAGdC,MAAAA,SAAS,EAAE,GAHG;AAIdC,MAAAA,OAAO,EAAE,WAJK;AAKdR,MAAAA,MAAM,YAAMA,MAAN,CALQ;AAMdS,MAAAA,qBAAqB,EAAE;AAAEC,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,MAAM,EAAE,CAAtB;AAAyBC,QAAAA,WAAW,EAAE,CAAtC;AAAyCC,QAAAA,SAAS,EAAE;AAApD,OANT;AAOdC,MAAAA,iBAAiB,EAAE,IAPL;AAQdC,MAAAA,YAAY,EAAE,wBAAM,CAAE,CARR;AASdC,MAAAA,aAAa,EAAE,yBAAM,CAAE;AATT,KAAhB;AAWD,GAZS,CAAV;AAcAC,EAAAA,EAAE,CAAC,gCAAD,EAAmC,YAAM;AACzC,QAAMC,OAAO,GAAGxB,wBAAwB,CAAC,oBAAC,aAAD,EAAmBK,aAAnB,CAAD,CAAxC;AACAoB,IAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,WAAhB;AACD,GAHC,CAAF;AAKAtB,EAAAA,QAAQ,CAAC,oBAAD,EAAuB,YAAM;AACnCmB,IAAAA,EAAE,CAACI,IAAH,CAAQ,qBAAR,EAA+B,YAAM;AACnC,UAAMH,OAAO,GAAGzB,uBAAuB,CAAC,oBAAC,aAAD,eAAmBM,aAAnB;AAAkC,QAAA,OAAO,EAAE;AAA3C,SAAD,CAAvC;AACAoB,MAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,WAAhB;AACAD,MAAAA,MAAM,CAACD,OAAO,CAACI,IAAR,CAAa9B,gBAAb,CAAD,CAAN,CAAuC4B,WAAvC;AACAD,MAAAA,MAAM,CAACD,OAAO,CAACI,IAAR,CAAa/B,iBAAb,EAAgCW,MAAjC,CAAN,CAA+CqB,OAA/C,CAAuD,CAAvD;AACD,KALD;AAMD,GAPO,CAAR;AASAzB,EAAAA,QAAQ,CAAC,uBAAD,EAA0B,YAAM;AACtC,QAAM0B,eAAyB,GAAG,SAA5BA,eAA4B;AAAA,aAAM,iDAAN;AAAA,KAAlC;;AACAP,IAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAM;AAChC,UAAMC,OAAO,GAAGzB,uBAAuB,CACrC,oBAAC,aAAD,eAAmBM,aAAnB;AAAkC,QAAA,aAAa,EAAE,CAAjD;AAAoD,QAAA,QAAQ,EAAE,oBAAC,eAAD;AAA9D,SADqC,CAAvC;AAGAoB,MAAAA,MAAM,CAACD,OAAD,CAAN,CAAgBE,WAAhB;AACAD,MAAAA,MAAM,CAACD,OAAO,CAACI,IAAR,CAAaE,eAAb,CAAD,CAAN,CAAsCJ,WAAtC;AACD,KANC,CAAF;AAOD,GATO,CAAR;AAUD,CA9CO,CAAR","sourcesContent":["import 'jest-styled-components'\nimport React from 'react'\nimport { SkeletonBlockItem } from '@/components/Atoms/Skeleton'\nimport { ScrollSnapSlider } from '@/components/Molecules/ScrollSnapSlider'\nimport { mountWithThemeAndRouter, renderWithThemeAndRouter } from '@/testRenderer'\nimport { Asset } from '@/types/asset'\nimport { assetNames, mockAssets } from '../AssetTile/elements/mocks'\nimport { AssetCarousel } from './ScrollAssetCarousel'\nimport { ScrollAssetCarouselProps } from './ScrollAssetCarousel.interface'\n\ndescribe('Asset Carousel', () => {\n  let carouselProps: ScrollAssetCarouselProps\n  const assets: Asset[] = []\n\n  for (let i = 0; i < assetNames.length; i++) {\n    assets.push(mockAssets[assetNames[i]])\n  }\n\n  beforeEach(() => {\n    carouselProps = {\n      loading: false,\n      lazyLoad: true,\n      tileWidth: 375,\n      context: 'dashboard',\n      assets: [...assets],\n      slidesPerPageSettings: { desktop: 3, tablet: 2, mobileSmall: 1, mobileBig: 1 },\n      NoAssetsComponent: null,\n      onAssetClick: () => {},\n      onSlideChange: () => {},\n    }\n  })\n\n  it('renders the Scroll Snap Slider', () => {\n    const wrapper = renderWithThemeAndRouter(<AssetCarousel {...carouselProps} />)\n    expect(wrapper).toBeDefined()\n  })\n\n  describe('with loading state', () => {\n    it.skip('renders as skeleton', () => {\n      const wrapper = mountWithThemeAndRouter(<AssetCarousel {...carouselProps} loading={true} />)\n      expect(wrapper).toBeDefined()\n      expect(wrapper.find(ScrollSnapSlider)).toBeDefined()\n      expect(wrapper.find(SkeletonBlockItem).length).toEqual(3)\n    })\n  })\n\n  describe('with promoted element', () => {\n    const PromotedElement: React.FC = () => <div>I am Promoted</div>\n    it('renders given element', () => {\n      const wrapper = mountWithThemeAndRouter(\n        <AssetCarousel {...carouselProps} promotedIndex={2} promoted={<PromotedElement />} />\n      )\n      expect(wrapper).toBeDefined()\n      expect(wrapper.find(PromotedElement)).toBeDefined()\n    })\n  })\n})\n"],"file":"ScrollAssetCarousel.test.js"}