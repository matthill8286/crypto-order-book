{"version":3,"sources":["../../../../src/components/Organisms/AssetTile/AssetTile.interface.ts"],"names":["AssetTileLayout","AssetStrategy"],"mappings":"AASA,WAAYA,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;AAiBZ,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a","sourcesContent":["import React, { FC, MouseEventHandler } from 'react'\nimport { BadgeActionType, BadgeType } from '@/components/Atoms/Badge'\nimport { Asset, AssetType, Elevation, ThemeColors, ThemeFontSizes } from '@/types'\nimport { FeatureListType } from '@/components/Molecules/FeatureList'\nimport { FlexAlignItemsOptions } from '@/components/Helper'\nimport { FlexDirectionProperty, FlexFlowProperty } from 'csstype'\nimport { CardNoBorder } from '@/components/Atoms/Card'\nimport { boolean } from '@storybook/addon-knobs'\n\nexport enum AssetTileLayout {\n  auto = 'auto',\n  listItem = 'listItem',\n  gridItem = 'gridItem',\n  compact = 'compact',\n}\n\n/** AssetTileOrientation `landscape | portrait` use portrait on mobile and landscape on desktop */\nexport type AssetTileOrientation = 'landscape' | 'portrait' | undefined\n\n/** AssetTileSize  use small on mobile and large on desktop */\nexport type AssetTileSize = 'auto' | 'large' | 'small'\n\nexport type AssetView = 'list' | 'collection' | 'compact' | 'sponsored' | 'disabled'\n\nexport type playlistView = 'list' | 'collection' | 'disabled'\n\nexport enum AssetStrategy {\n  structured = '1',\n  timebox = '2',\n  none = 'none',\n}\n\nexport interface SponsoringDetails {\n  isSponsored: boolean\n  showUppercase: boolean\n  label: string\n  infoText: string\n  title: string\n}\n\nexport interface CollectionData extends Partial<Asset> {\n  totalAssetDuration: number | undefined\n  completionPercentage: number | undefined\n  numberOfAssets: number | undefined\n  title: string\n  pid?: string | undefined\n}\n\nexport interface AssetTileProps {\n  /**  image padding for asset images */\n  badgeActionType?: BadgeActionType\n  badges?: (BadgeType | null)[]\n  borderColor?: ThemeColors\n  fullHeight?: boolean\n  isCompact?: boolean\n  expanded?: boolean\n  isOpenAsset?: boolean\n  eventDate?: string\n  isCollection?: boolean\n  placeCard?: boolean\n  assetIndex?: number\n  collectionData?: CollectionData\n  assetSponsoring?: SponsoringDetails | undefined\n  assetView?: AssetView\n  headerFontSize?: string\n  strategyType?: AssetStrategy | undefined\n  color?: ThemeColors\n  elevation?: Elevation\n  iconsRight?: boolean\n  inView?: boolean\n  elevationHover?: Elevation\n  noBorder?: CardNoBorder\n  headlineLimitLines?: number\n  limitContentLines?: number\n  roundImages?: boolean\n  icon?: React.ReactElement\n  lazyloadLowQuality?: boolean\n  orientation?: AssetTileOrientation\n  competencyLabel?: string\n  size?: AssetTileSize\n  fontSize?: ThemeFontSizes\n  mainLink?: any\n  isDisabled?: boolean\n  isMobileView?: boolean\n  layout?: AssetTileLayout\n  lazyLoad?: boolean\n  loading?: boolean\n  loadingOperation?: boolean\n  locked?: boolean\n  showBadges?: boolean\n  showLock?: boolean\n  showBookmark?: boolean\n  showProvider?: boolean\n  showFeatured?: boolean\n  showLikes?: boolean\n  showInteractions?: boolean\n  showOptions?: boolean\n  showSkills?: boolean\n  showImage?: boolean\n  showComplete?: boolean\n  showAssetMeta?: boolean\n  showMoreText?: string\n  showLessText?: string\n  showMoreNumOfLines?: number\n  showMoreAlignment?: FlexAlignItemsOptions\n  fadeOutColor?: string\n  videoFallbackImage?: string\n  renderAddToBookmarkButton?: (AssetForBookmarking: {\n    id?: number | undefined\n    bookmarked?: boolean\n    title?: string\n    provider?: Provider | undefined\n    duration?: string | undefined\n    type?: AssetType\n    completed?: any\n    assetIndex?: number\n    playlistId?: string | undefined\n  }) => JSX.Element | React.ReactNode\n  onHeadingClick?: (e: React.MouseEvent<HTMLDivElement>) => void\n  onOptionsClick?: (e: React.MouseEvent<HTMLDivElement>) => void\n  onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void\n  onPictureClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void\n  onLockClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void | undefined\n  onCompleteClick?: ((ev: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined\n  asset: Asset | Partial<Asset>\n  sponsoringDetails?: SponsoringDetails\n  withEllipsis?: boolean\n  withLQIP?: boolean\n  withNativeLoading?: boolean\n}\n\nexport interface StyledResponsiveContainerProps {\n  orientation: AssetTileOrientation\n  loading?: boolean\n  isSmall?: boolean\n}\nexport interface StyledDivider {\n  height?: string\n}\n\nexport interface StyledTileProps {\n  orientation: AssetTileOrientation\n}\n\nexport interface ContentTextProps {\n  contentText?: string\n  loading: boolean\n  isDisabled?: boolean\n  limitContentLines?: number\n}\n\nexport interface TileSettings {\n  showAssetMeta?: boolean\n  sponsoringDetails?: undefined\n  showLock?: boolean\n  showSkills?: boolean\n  withEllipsis: boolean\n  headlineLimitLines: number\n  fontSize?: string\n  loading: boolean | undefined\n  showBookmark?: boolean | undefined\n  showFeatured?: boolean | undefined\n}\n\nexport interface MediaProps {\n  AssetMediaWrapper: FC<any>\n  children?: React.ReactNode\n  isCompact?: boolean\n  lazyLoad?: boolean\n  loading?: boolean\n  maxWidth?: string\n  minWidth?: string\n  minHeight?: string\n  height?: string\n  width?: string\n  hasBottomMargin?: boolean\n  hasSideMargin?: boolean\n  unsupportedMedia?: boolean\n  orientation: AssetTileOrientation\n  onMediaClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void\n  assetImage?: string | null\n  videoFallbackImage?: string\n  mediaType?: string\n  isDisabled?: boolean\n  title?: string | null\n}\n\nexport interface EmbeddedMedia {\n  embedUrl: string\n  canBeEmbedded: boolean\n}\n\nexport interface AssetInteractions {\n  bookmarked: boolean\n  completed: boolean\n  shared: boolean\n  available: boolean\n}\n\nexport interface AssetHeadingProps {\n  headline: string\n  headlineLimitLines?: number\n  isSmall?: boolean\n  loading: boolean\n}\n\nexport interface StyledMediaProps {\n  isSmall?: boolean\n  imageHeight?: string\n  isDisabled?: boolean\n  hasBottomMargin?: boolean\n  hasSideMargin?: boolean\n  orientation: AssetTileOrientation\n}\n\nexport interface StyledContentContainerProps {\n  isSmall?: boolean\n  hasIcon?: boolean\n}\n\nexport type Provider = {\n  __typename: string\n  id: number\n  name: string\n  logoUrl?: string\n}\n\nexport type Type = {\n  __typename?: string\n  id?: number\n  name?: string\n}\n\nexport type Interaction = {\n  __typename: string\n  launched: boolean\n  bookmarked: boolean\n  completed: Completed\n}\n\ntype Completed = {\n  status: boolean\n  rating: string\n  locked: boolean\n}\n\nexport type Timebox = {\n  __typename?: string\n  start?: string\n  end?: string\n}\n\nexport interface AssetTileAsset {\n  __typename?: string\n  provider: Provider\n  interaction: Interaction\n  timebox?: Timebox\n  url: string\n  author?: string\n  embedVideoURL: string\n  niceName?: string\n  coverImage?: string\n  competency?: string\n  completed?: boolean\n  embedUrl?: boolean\n  creator?: string\n  embedVideoLink?: string\n  locked?: boolean\n  providerId?: number\n  screenshotOverride?: string\n  name?: string\n  type?: { __typename: string; name: AssetTypeName; id: number }\n  typeId?: number\n  duration?: string\n  durationType?: string\n  published?: string\n  sponsored?: boolean\n  language?: string\n  mainFeatures?: FeatureListType[] | null\n  competencies?: (Skills | null)[]\n  id: number\n  description: string\n  title: string\n  image: string | undefined\n  badges?: (BadgeType | null)[] | null\n  restriction?: string\n  partOfSession?: string\n}\n\nexport interface Skills {\n  id?: number\n  text?: string\n  __typename: string\n}\n\nexport type MetaItem = {\n  numberOfAssets?: string | undefined\n  completedStatus?: string | undefined\n  duration?: string\n  type?: AssetTypeName\n}\n\nexport type MetaPayload = {\n  icon?: JSX.Element\n  text?: Type['name'] | string\n}\n\nexport interface AssetTileMetaProps {\n  metaItems?: MetaPayload[]\n  justify?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around'\n  alignSelf?: FlexAlignItemsOptions\n  loading: boolean\n  inPlaylist?: boolean\n  isDisabled?: boolean\n  isCompact?: boolean\n  onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => any\n}\n\nexport type AssetTypeName =\n  | 'Video'\n  | 'Article'\n  | 'Podcast'\n  | 'Online course'\n  | 'Playlist'\n  | 'Live'\n  | 'Sponsored'\n\nexport type AssetTypeVariants = 'Video' | 'Article' | 'Podcast' | 'Online course' | 'Playlist'\n"],"file":"AssetTile.interface.js"}