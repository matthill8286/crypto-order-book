{"version":3,"sources":["../../../../src/components/Organisms/OrderBook/OrderBook.tsx"],"names":["React","Table","TableBody","TableCell","TableHead","TableRow","CopyText","OrderBookEntry","useWindowDimensions","breakpoints","typeOptions","ask","key","color","bid","orderBookHeadings","OrderBookHeader","textColor","cellText","OrderBookTable","isReversed","borderColor","backgroundColor","headerTextColor","rows","rowsKey","maxPriceSize","hideOnMobile","isOutlineRequired","currentBreakpoint","breakpoint","isMobile","md","displayRows","Object","keys","map","filter","k","reverse","entry","row","price","size","total","colorSpriteWidth"],"mappings":"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","sourcesContent":["import React, { ReactElement } from 'react'\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@/components/Atoms/Table'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { ThemeColors } from '@/types'\nimport { OrderBookEntry } from '@/components/Organisms/OrderBook/OrderBookEntries'\nimport { useWindowDimensions } from '@/components/Helper'\nimport { breakpoints } from '@/styles'\nimport { OrderMeta, OrderRowHash, Type } from '@/components/Organisms/OrderBook/OrderBook.interface'\n\ninterface OrderBookTableProps {\n  rows: OrderRowHash\n  rowsKey: Type\n  maxPriceSize: number\n  isReversed?: boolean\n  title?: string\n  ticker?: string\n  headerTextColor?: ThemeColors\n  textColor?: ThemeColors\n  borderColor?: ThemeColors\n  rowColor?: ThemeColors\n  backgroundColor?: ThemeColors\n  hideOnMobile?: boolean\n  isOutlineRequired?: boolean\n}\n\nexport type Option = {\n  key: string\n  color: string\n}\n\nexport type TypeOptions = {\n  ask: Option\n  bid: Option\n}\n\nconst typeOptions: TypeOptions = {\n  ask: { key: 'ask', color: '#f00' },\n  bid: { key: 'bid', color: '#00d964' },\n}\n\ninterface OrderBookHeaderProps {\n  textColor?: ThemeColors\n  cellText: string\n}\n\nconst orderBookHeadings: string[] = ['Price', 'Size', 'Total']\n\nconst OrderBookHeader: React.FC<OrderBookHeaderProps> = ({ textColor, cellText }): ReactElement => {\n  return (\n    <TableCell cellType=\"th\" collapsible={false}>\n      <CopyText padding=\"0\" margin=\"0\" color={textColor || 'grey4'} toUpperCase>\n        {cellText}\n      </CopyText>\n    </TableCell>\n  )\n}\n\nexport const OrderBookTable: React.FC<OrderBookTableProps> = ({\n  isReversed,\n  textColor,\n  borderColor,\n  backgroundColor,\n  headerTextColor,\n  rows,\n  rowsKey,\n  maxPriceSize,\n  hideOnMobile,\n  isOutlineRequired,\n}): ReactElement => {\n  const { breakpoint: currentBreakpoint } = useWindowDimensions()\n  const isMobile = currentBreakpoint < breakpoints.md\n\n  const displayRows = Object.keys(rows)\n    .map(key => rows[(key as unknown) as number])\n    .filter(k => k)\n\n  if (isMobile && rowsKey === typeOptions.ask.key) {\n    displayRows.reverse()\n  }\n\n  return (\n    <Table withBackground withBorderRadius={false}>\n      <TableHead\n        backgroundColor={backgroundColor || 'secondary'}\n        borderColor={borderColor}\n        isOutlineRequired={isOutlineRequired}>\n        {!hideOnMobile && (\n          <TableRow\n            isReversed={isReversed || false}\n            disableHover\n            textColor={textColor}\n            backgroundColor={backgroundColor || 'secondary'}>\n            {orderBookHeadings.map(entry => (\n              <OrderBookHeader key={entry} cellText={entry} textColor={headerTextColor} />\n            ))}\n          </TableRow>\n        )}\n      </TableHead>\n      <TableBody backgroundColor={backgroundColor} fullBorder={false}>\n        {displayRows.map((row: OrderMeta) => {\n          const { price, size, total } = row\n          const colorSpriteWidth = (total / maxPriceSize) * 100\n\n          return (\n            <OrderBookEntry\n              color=\"white\"\n              key={colorSpriteWidth}\n              textColor={textColor}\n              isReversed={isReversed}\n              maxPriceSize={maxPriceSize}\n              colorSpriteWidth={colorSpriteWidth}\n              price={price}\n              size={size}\n              total={total}\n            />\n          )\n        })}\n      </TableBody>\n    </Table>\n  )\n}\n"],"file":"OrderBook.js"}