{"version":3,"sources":["../../../../src/components/Organisms/ProductsTable/ProductsTableDesktop.tsx"],"names":["React","Table","TableBody","TableCell","TableHead","TableRow","CopyText","convertPrice","IconOrText","ImageAndTextCell","ProductCell","EmptyCell","StyledDesktopTable","ProductsTableDesktop","tableHeading","tableContent","getProductUrl","getImageUrl","renderAddToBasketButton","length","map","productElement","product","title","titleImageId","linkUrl","productId","slice","price","currency","row","rowIndex","tableRow","featureCell","index","text","isFeatureName","image","url"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@/components/Atoms/Table'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { convertPrice } from '@/utils/convertPrice'\nimport { IconOrText } from './IconOrText'\nimport { ImageAndTextCell } from './ImageAndTextCell'\nimport { ProductCell } from './ProductCell'\nimport {\n  ProductsTableProps,\n  TableContentRow,\n  TableHeadingDataProps,\n  TableRowDataProps,\n} from './ProductsTable.interface'\nimport { EmptyCell, StyledDesktopTable } from './ProductsTableDesktop.styled'\n\nexport const ProductsTableDesktop: React.FC<ProductsTableProps> = ({\n  tableHeading,\n  tableContent,\n  getProductUrl,\n  getImageUrl,\n  renderAddToBasketButton,\n}) => {\n  return (\n    <StyledDesktopTable>\n      <Table layout={'tableRow'}>\n        <TableHead>\n          <TableRow>\n            <TableCell key={'blank cell'} cellType=\"th\">\n              &nbsp;\n            </TableCell>\n            {tableHeading &&\n              tableHeading.length &&\n              tableHeading.map((productElement: TableHeadingDataProps) => {\n                if (!productElement.product) {\n                  return (\n                    <TableCell key={'empty'}>\n                      <EmptyCell>&nbsp;</EmptyCell>\n                    </TableCell>\n                  )\n                }\n                const { title, titleImageId } = productElement.product\n                const linkUrl = getProductUrl(title, productElement.productId)\n                return (\n                  <TableCell key={productElement.productId} cellType=\"th\">\n                    {productElement.product && (\n                      <ProductCell linkUrl={linkUrl}>\n                        <img src={getImageUrl(titleImageId)} alt={title} />\n                        <CopyText tag={'span'} fontSize={'sm'} weight=\"semibold\">\n                          {title.slice(0, 30)}\n                        </CopyText>\n                        <CopyText tag={'span'} fontSize={'sm'}>\n                          {convertPrice(\n                            productElement?.price?.price,\n                            productElement?.price?.currency,\n                            '',\n                            false\n                          )}\n                        </CopyText>\n                      </ProductCell>\n                    )}\n                  </TableCell>\n                )\n              })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {tableContent.map((row: TableContentRow, rowIndex: number) => {\n            return (\n              row.tableRow && (\n                <TableRow key={'feature-' + rowIndex}>\n                  {row.tableRow.map((featureCell: TableRowDataProps, index) => {\n                    return (\n                      <TableCell\n                        key={index + featureCell.text}\n                        cellType={featureCell.isFeatureName ? 'th' : 'td'}>\n                        {featureCell.isFeatureName ? (\n                          <ImageAndTextCell>\n                            {featureCell.image && <img src={featureCell.image.url} alt=\"\" />}\n                            <CopyText tag={'span'} fontSize={'sm'}>\n                              {featureCell.text}\n                            </CopyText>\n                          </ImageAndTextCell>\n                        ) : (\n                          <IconOrText textType={featureCell.text} />\n                        )}\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              )\n            )\n          })}\n          {/* Render A2C Buttons */}\n          {renderAddToBasketButton && (\n            <TableRow>\n              <TableCell key=\"blank\" cellType=\"th\" noBorder>\n                &nbsp;\n              </TableCell>\n              {tableHeading &&\n                tableHeading.length &&\n                tableHeading.map((product: TableHeadingDataProps, index) => {\n                  return (\n                    <TableCell key={product.productId + index} noBorder>\n                      {renderAddToBasketButton(product.productId)}\n                    </TableCell>\n                  )\n                })}\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </StyledDesktopTable>\n  )\n}\n"],"file":"ProductsTableDesktop.js"}