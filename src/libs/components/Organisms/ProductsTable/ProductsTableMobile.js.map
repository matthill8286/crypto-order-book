{"version":3,"sources":["../../../../src/components/Organisms/ProductsTable/ProductsTableMobile.tsx"],"names":["zip","React","useMemo","Table","TableBody","TableCell","TableHead","TableRow","CopyText","convertPrice","IconOrText","ImageAndTextCell","ProductCell","StyledFixedTable","StyledMobileTable","StyledScrollTable","ProductsTableMobile","tableHeading","tableContent","getProductUrl","renderTable","features","content","map","featureElement","index","text","isFeatureName","image","url","productRow","product","productId","title","linkUrl","slice","price","currency","feature","transposedContent","contentMatrix","tableRow","Object","values","transposed","featureCells","contentCells","length","mobileTable"],"mappings":"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","sourcesContent":["import zip from 'lodash/zip'\nimport React, { useMemo } from 'react'\nimport { Table, TableBody, TableCell, TableHead, TableRow } from '@/components/Atoms/Table'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { convertPrice } from '@/utils/convertPrice'\nimport { IconOrText } from './IconOrText'\nimport { ImageAndTextCell } from './ImageAndTextCell'\nimport { ProductCell } from './ProductCell'\nimport { ProductsTableProps, TableRowDataProps } from './ProductsTable.interface'\nimport {\n  StyledFixedTable,\n  StyledMobileTable,\n  StyledScrollTable,\n} from './ProductsTableMobile.styled'\n\nexport const ProductsTableMobile: React.FC<ProductsTableProps> = ({\n  tableHeading,\n  tableContent,\n  getProductUrl,\n}) => {\n  const renderTable = (features: TableRowDataProps[], content: TableRowDataProps[][]) => {\n    return (\n      <Table>\n        <TableHead>\n          <TableRow collapsible={false}>\n            <TableCell key=\"blank\" cellType=\"th\" noBorder collapsible={false}>\n              &nbsp;\n            </TableCell>\n            {features &&\n              features.map((featureElement: TableRowDataProps, index) => (\n                <TableCell\n                  collapsible={false}\n                  key={featureElement.text + index}\n                  cellType={'th'}\n                  borderDirection=\"right\">\n                  {featureElement.isFeatureName ? (\n                    <ImageAndTextCell>\n                      {featureElement.image && <img src={featureElement.image.url} alt=\"\" />}\n                      <CopyText tag={'span'} fontSize={'sm'}>\n                        {featureElement.text}\n                      </CopyText>\n                    </ImageAndTextCell>\n                  ) : (\n                    <IconOrText textType={featureElement.text} />\n                  )}\n                </TableCell>\n              ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {content &&\n            content.map((productRow: TableRowDataProps[], index) => {\n              if (!productRow) {\n                return null\n              }\n              const product = tableHeading[index]\n              if (!product?.product) {\n                return null\n              }\n              const productId = product.productId\n              const { title } = product.product\n              const linkUrl = getProductUrl(title, productId)\n              return (\n                <TableRow key={'feature-' + index} collapsible={false}>\n                  <TableCell key={'product'} cellType={'th'} noBorder collapsible={false}>\n                    <ProductCell linkUrl={linkUrl}>\n                      <CopyText tag={'span'} fontSize={'sm'} weight=\"semibold\">\n                        {title.slice(0, 30)}\n                      </CopyText>\n                      <CopyText tag={'span'}>\n                        {' '}\n                        {convertPrice(product?.price?.price, product?.price?.currency, '', false)}\n                      </CopyText>\n                    </ProductCell>\n                  </TableCell>\n                  {productRow.map((feature: TableRowDataProps, index) => {\n                    return (\n                      <TableCell\n                        key={feature.text + index}\n                        borderDirection=\"right\"\n                        collapsible={false}>\n                        <IconOrText textType={feature.text} />\n                      </TableCell>\n                    )\n                  })}\n                </TableRow>\n              )\n            })}\n        </TableBody>\n      </Table>\n    )\n  }\n\n  // instead of feature-based rows as in the desktop table we want to have product-based rows\n  // therefore we need to transpose the table content\n  const transposedContent = content => {\n    const contentMatrix = content\n      ? content.map(({ tableRow }) => {\n          return tableRow ? Object.values(tableRow) : null\n        })\n      : []\n\n    const transposed = zip(...contentMatrix) as TableRowDataProps[][]\n    const featureCells = transposed ? transposed[0] : []\n    const contentCells = transposed ? transposed.slice(1, transposed.length) : []\n    return { featureCells, contentCells }\n  }\n\n  const { featureCells, contentCells } = useMemo(() => transposedContent(tableContent), [\n    tableContent,\n  ])\n\n  const mobileTable = renderTable(featureCells, contentCells)\n\n  return (\n    <StyledMobileTable>\n      <StyledFixedTable>{mobileTable}</StyledFixedTable>\n      <StyledScrollTable>{mobileTable}</StyledScrollTable>\n    </StyledMobileTable>\n  )\n}\n"],"file":"ProductsTableMobile.js"}