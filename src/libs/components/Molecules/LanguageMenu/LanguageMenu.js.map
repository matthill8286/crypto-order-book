{"version":3,"sources":["../../../../src/components/Molecules/LanguageMenu/LanguageMenu.tsx"],"names":["React","useEffect","useRef","useState","useDropdownState","StyledContainer","StyledDropdown","LanguageButton","LanguageMenuList","StyleguideGlobeThin","LanguageMenu","className","languages","testIdSuffix","extendedLanguageHandler","setupCurrentIndex","isMobile","element","toggleDropdown","showDropdown","currentIndex","setCurrentIndex","ref","onToggleDropdown","handleLanguageClick","index","item","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","myLanguageContent"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,gBAAT;AACA,SACEC,eADF,EAEEC,cAFF;AAIA,SAASC,cAAT;AACA,SAASC,gBAAT;AACA,SAASC,mBAAT,QAAoC,mCAApC;AAkBA,OAAO,IAAMC,YAAmC,GAAG,SAAtCA,YAAsC,OAO7C;AAAA,MANJC,SAMI,QANJA,SAMI;AAAA,4BALJC,SAKI;AAAA,MALJA,SAKI,+BALQ,EAKR;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAHJC,uBAGI,QAHJA,uBAGI;AAAA,mCAFJC,iBAEI;AAAA,MAFJA,iBAEI,sCAFgB,CAAC,CAEjB;AAAA,2BADJC,QACI;AAAA,MADJA,QACI,8BADO,KACP;;AAAA,0BAC8CZ,gBAAgB,EAD9D;AAAA,MACIa,OADJ,qBACIA,OADJ;AAAA,MACaC,cADb,qBACaA,cADb;AAAA,MAC6BC,YAD7B,qBAC6BA,YAD7B;;AAAA,kBAEoChB,QAAQ,CAASY,iBAAT,CAF5C;AAAA;AAAA,MAEGK,YAFH;AAAA,MAEiBC,eAFjB;;AAGJ,MAAMC,GAAG,GAAGpB,MAAM,CAAc,IAAd,CAAlB;;AAEA,MAAMqB,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BL,IAAAA,cAAc;AACf,GAFD;;AAIA,MAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAC3C,QAAIP,YAAJ,EAAkB;AAChBD,MAAAA,cAAc;AACf;;AAEDG,IAAAA,eAAe,CAACI,KAAD,CAAf;;AAEA,QAAIX,uBAAJ,EAA6B;AAC3BA,MAAAA,uBAAuB,CAACY,IAAD,CAAvB;AACD;AACF,GAVD;;AAYA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAwB;AAAA;;AACjD,QAAI,kBAACN,GAAG,CAACO,OAAL,yCAAC,aAAaC,QAAb,CAAsBF,KAAK,CAACG,MAA5B,CAAD,KAAgDZ,YAApD,EAAkE;AAChED,MAAAA,cAAc;AACf;AACF,GAJD;;AAMAjB,EAAAA,SAAS,CAAC,YAAM;AACd+B,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,kBAAnC;AAEA,WAAO,YAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCP,kBAAtC;AACD,KAFD;AAGD,GANQ,CAAT;AAQA,MAAMQ,iBAAiB,GACrB,oBAAC,gBAAD;AACE,IAAA,SAAS,EAAEvB,SADb;AAEE,IAAA,OAAO,EAAEY,mBAFX;AAGE,IAAA,YAAY,EAAEJ;AAHhB,IADF;AAQA,SACE,oBAAC,eAAD;AACE,IAAA,SAAS,EAAET,SADb;AAEE,IAAA,GAAG,EAAEM,OAFP;AAGE,6CAAgCJ,YAAhC;AAHF,KAIE,oBAAC,cAAD;AACE,iBAAU,gCADZ;AAEE,IAAA,OAAO,EAAEU,gBAFX;AAGE,IAAA,MAAM,EAAEJ,YAHV;AAIE,IAAA,WAAW,EAAE,oBAAC,mBAAD;AAJf,IAJF,EAUE,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEH,QAA1B;AAAoC,IAAA,YAAY,EAAEG;AAAlD,KACGgB,iBADH,CAVF,CADF;AAgBD,CAlEM","sourcesContent":["import React, { FC, useEffect, useRef, useState } from 'react'\nimport { useDropdownState } from '@/components/Helper/useDropdownState'\nimport {\n  StyledContainer,\n  StyledDropdown,\n} from '@/components/Molecules/DropdownButton/DropdownButton'\nimport { LanguageButton } from './LanguageButton'\nimport { LanguageMenuList } from './LanguageMenuList'\nimport { StyleguideGlobeThin } from '@matthill8286/atomic-icon-library'\n\nexport type LanguageMenuOption = {\n  label: string\n  id: number\n  url?: string\n  to?: string\n}\n\nexport interface LanguageMenuProps {\n  className?: string\n  languages: LanguageMenuOption[]\n  testIdSuffix?: string\n  extendedLanguageHandler: (item: LanguageMenuOption) => void\n  setupCurrentIndex?: number\n  isMobile?: boolean\n}\n\nexport const LanguageMenu: FC<LanguageMenuProps> = ({\n  className,\n  languages = [],\n  testIdSuffix,\n  extendedLanguageHandler,\n  setupCurrentIndex = -1,\n  isMobile = false,\n}) => {\n  const { element, toggleDropdown, showDropdown } = useDropdownState<HTMLDivElement>()\n  const [currentIndex, setCurrentIndex] = useState<number>(setupCurrentIndex)\n  const ref = useRef<HTMLElement>(null)\n\n  const onToggleDropdown = () => {\n    toggleDropdown()\n  }\n\n  const handleLanguageClick = (index, item) => {\n    if (showDropdown) {\n      toggleDropdown()\n    }\n\n    setCurrentIndex(index)\n\n    if (extendedLanguageHandler) {\n      extendedLanguageHandler(item)\n    }\n  }\n\n  const handleClickOutside = (event: Event): void => {\n    if (!ref.current?.contains(event.target as Node) && showDropdown) {\n      toggleDropdown()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside)\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  })\n\n  const myLanguageContent = (\n    <LanguageMenuList\n      languages={languages}\n      onClick={handleLanguageClick}\n      currentIndex={currentIndex}\n    />\n  )\n\n  return (\n    <StyledContainer\n      className={className}\n      ref={element}\n      data-test={`language-dropdown-${testIdSuffix}`}>\n      <LanguageButton\n        data-test=\"ewb-app-header-language-button\"\n        onClick={onToggleDropdown}\n        isOpen={showDropdown}\n        primaryIcon={<StyleguideGlobeThin />}\n      />\n      <StyledDropdown isMobile={isMobile} showDropdown={showDropdown}>\n        {myLanguageContent}\n      </StyledDropdown>\n    </StyledContainer>\n  )\n}\n"],"file":"LanguageMenu.js"}