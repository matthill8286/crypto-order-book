{"version":3,"sources":["../../../../src/components/Molecules/NotificationBox/NotificationBox.tsx"],"names":["React","Card","Icon","Link","CopyText","IconArrow","IconCheckmarkCircleOutlined","IconClear","IconClearCircleOutlined","IconInfoOutlined","NotificationContentSort","StyledArrow","StyledBodyHtml","StyledButton","StyledButtonDiv","StyledCopyTextDiv","StyledLinkDiv","StyledNotificationBoxWrapper","StyledNotificationClose","StyledNotificationHeadline","NotificationBox","forwardRef","ref","body","bodyFontSize","bodyMargin","buttonLayout","buttons","cardShape","hasTitleIcon","isTitleFontBold","titleIconSelfAlign","isClosable","rootPosition","maxWidth","links","onClose","title","tooltip","type","sort","LinksButtons","alignLinks","otherProps","renderIcon","getIconLeft","iconLeft","undefined","renderLinks","Boolean","length","map","label","linkProps","arrowPos","arrowPosition","split","padding","mobile","tablet","top","arrowleft","__html","actionBtnLabel","actionType","buttonProps","ButtonsLinks"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Card } from '@/components/Atoms/Card'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { Link } from '@/components/Atoms/Link'\nimport { CopyText } from '@/components/Atoms/Typography/CopyText'\nimport {\n  IconArrow,\n  IconCheckmarkCircleOutlined,\n  IconClear,\n  IconClearCircleOutlined,\n  IconInfoOutlined,\n} from '@matthill8286/atomic-icon-library'\nimport { Padding } from '@/types/theme'\nimport {\n  NotificationBoxProps,\n  NotificationContentSort,\n  NotificationLink,\n} from './NotificationBox.interface'\nimport {\n  StyledArrow,\n  StyledBodyHtml,\n  StyledButton,\n  StyledButtonDiv,\n  StyledCopyTextDiv,\n  StyledLinkDiv,\n  StyledNotificationBoxWrapper,\n  StyledNotificationClose,\n  StyledNotificationHeadline,\n} from './NotificationBoxStyled'\n\nexport const NotificationBox = React.forwardRef<HTMLDivElement, NotificationBoxProps>(\n  (\n    {\n      body,\n      bodyFontSize = 'sm',\n      bodyMargin,\n      buttonLayout = 'column',\n      buttons,\n      cardShape = 'rounded-small',\n      hasTitleIcon,\n      isTitleFontBold = true,\n      titleIconSelfAlign,\n      isClosable,\n      rootPosition,\n      maxWidth,\n      links,\n      onClose,\n      title,\n      tooltip,\n      type,\n      sort = NotificationContentSort.LinksButtons,\n      alignLinks = 'left',\n      ...otherProps\n    },\n    ref\n  ) => {\n    const renderIcon = (type): React.ReactElement => {\n      switch (type) {\n        case 'info':\n          return <IconInfoOutlined />\n        case 'success':\n          return <IconCheckmarkCircleOutlined />\n        case 'alert':\n          return <IconInfoOutlined />\n        case 'error':\n          return <IconClearCircleOutlined />\n        default:\n          return <IconInfoOutlined />\n      }\n    }\n\n    // Originally \"iconLeft\" was not settable\n    // Thus to ensure backwards compatibility and also allow to set no \"iconLeft\" to be rendered,\n    // null will return undefined and undefined will return a default element.\n    const getIconLeft = (iconLeft?: React.ReactElement | null): React.ReactElement | undefined => {\n      if (iconLeft === null) return undefined\n      if (iconLeft === undefined)\n        return (\n          <Icon color=\"grey6\">\n            <IconArrow />\n          </Icon>\n        )\n      return iconLeft\n    }\n\n    const renderLinks = () =>\n      Boolean(links?.length) && (\n        <StyledLinkDiv alignLinks={alignLinks}>\n          {/* TypeScript cannot infer that 'links' cannot be 'undefined' at this point (yet) */}\n          {(links as NotificationLink[]).map(({ label, iconLeft, ...linkProps }) => (\n            <Link\n              iconLeft={getIconLeft(iconLeft)}\n              color=\"grey4\"\n              decorationColor=\"grey4\"\n              key={label}\n              scale=\"large\"\n              {...linkProps}>\n              {label}\n            </Link>\n          ))}\n        </StyledLinkDiv>\n      )\n\n    const arrowPos = tooltip?.arrowPosition.split('-')\n    const padding = tooltip ? ({ mobile: 'sm', tablet: 'md', top: 'md' } as Padding) : 'md'\n\n    return (\n      <StyledNotificationBoxWrapper\n        data-test=\"notification-box\"\n        tooltip={tooltip}\n        type={type}\n        rootPosition={rootPosition}\n        maxWidth={maxWidth}\n        ref={ref}\n        {...otherProps}>\n        <StyledNotificationClose onClick={onClose}>\n          <Icon width={16} height={16} color={'grey6'}>\n            {isClosable && <IconClear />}\n          </Icon>\n        </StyledNotificationClose>\n        {arrowPos && <StyledArrow arrowLeft={tooltip?.arrowleft} arrowPosition={arrowPos} />}\n        <Card elevation={1} padding={padding} shape={cardShape} surface=\"white\">\n          {title && (\n            <StyledNotificationHeadline>\n              {hasTitleIcon && (\n                <Icon width={16} height={16} color=\"grey6\" alignSelf={titleIconSelfAlign}>\n                  {renderIcon(type)}\n                </Icon>\n              )}\n              <CopyText\n                data-test=\"notification-box-title\"\n                color=\"grey6\"\n                display=\"flex\"\n                tag=\"div\"\n                bold={isTitleFontBold}>\n                {title}\n              </CopyText>\n            </StyledNotificationHeadline>\n          )}\n          {body && (\n            <StyledCopyTextDiv margin={bodyMargin}>\n              <CopyText\n                data-test=\"notification-box-body\"\n                fontSize={bodyFontSize}\n                margin={bodyMargin}>\n                {\n                  <StyledBodyHtml\n                    dangerouslySetInnerHTML={{\n                      __html: body,\n                    }}\n                  />\n                }\n              </CopyText>\n            </StyledCopyTextDiv>\n          )}\n\n          {sort === NotificationContentSort.LinksButtons && renderLinks()}\n\n          {buttons && buttons.length > 0 && (\n            <StyledButtonDiv buttonLayout={buttonLayout}>\n              {buttons.map(({ actionBtnLabel, actionType = 'inverted', ...buttonProps }) => (\n                <StyledButton\n                  actionType={actionType}\n                  fullWidth\n                  key={actionBtnLabel}\n                  size=\"sm\"\n                  {...buttonProps}>\n                  {actionBtnLabel}\n                </StyledButton>\n              ))}\n            </StyledButtonDiv>\n          )}\n          {sort === NotificationContentSort.ButtonsLinks && renderLinks()}\n        </Card>\n      </StyledNotificationBoxWrapper>\n    )\n  }\n)\n"],"file":"NotificationBox.js"}