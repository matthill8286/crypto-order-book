{"version":3,"sources":["../../../../src/components/Molecules/Carousel/Carousel.tsx"],"names":["React","useCallback","useEffect","useState","Slider","Badge","Icon","IconArrow","StyledCarousel","StyledCarouselHandler","Carousel","className","sliderSettings","items","renderSlide","hasThumbnails","badges","whiteDots","boxShadow","hasOverflow","hasPadding","fullHeight","firstClientX","clientX","carouselDom","slider1","slider2","nav1","setCountNav1","nav2","setCountNav2","touchStart","e","touches","preventTouch","minValue","Math","abs","preventDefault","returnValue","addEventListener","passive","renderArrows","rotation","customPaging","sliderConfig","asNavFor","ref","slider","slidesToShow","arrows","swipeToSlide","focusOnSelect","nextArrow","prevArrow","sliderThumbnailImageConfig","dots","dragging","setDragging","handleBeforeChange","handleAfterChange","handleOnItemClick","stopPropagation","beforeChange","currentSlide","nextSlide","afterChange","elem","length","map","entry","index","displayName"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport Slider from 'react-slick'\nimport { Badge } from '@/components/Atoms/Badge'\nimport { Icon, RotationValues } from '@/components/Atoms/Icon'\nimport { IconArrow } from '@matthill8286/atomic-icon-library'\nimport { CarouselProps } from './Carousel.interface'\nimport { StyledCarousel, StyledCarouselHandler } from './Carousel.styled'\n\nexport const Carousel: React.FC<CarouselProps> = ({\n  className,\n  sliderSettings,\n  items,\n  renderSlide,\n  hasThumbnails,\n  badges,\n  whiteDots,\n  boxShadow,\n  hasOverflow,\n  hasPadding,\n  fullHeight,\n}): React.ReactElement => {\n  let firstClientX: number | 0\n  let clientX: number | 0\n  let carouselDom: HTMLDivElement | null\n  let slider1\n  let slider2\n  const [nav1, setCountNav1] = useState(slider1)\n  const [nav2, setCountNav2] = useState(slider2)\n  const touchStart = (e: TouchEvent): void => {\n    firstClientX = e.touches[0].clientX\n  }\n  const preventTouch = (e: TouchEvent): boolean => {\n    const minValue = 5 // threshold\n    clientX = e.touches[0].clientX - firstClientX\n\n    // Vertical scrolling does not work when you start swiping horizontally.\n    if (Math.abs(clientX) > minValue) {\n      e.preventDefault()\n      e.returnValue = false\n      return false\n    }\n    return true\n  }\n\n  useEffect(() => {\n    if (carouselDom) {\n      carouselDom.addEventListener('touchstart', touchStart)\n      carouselDom.addEventListener('touchmove', preventTouch, {\n        passive: false,\n      })\n    }\n\n    if (hasThumbnails) {\n      setCountNav1(slider1)\n      setCountNav2(slider2)\n    }\n  }, [])\n\n  const renderArrows = (rotation: RotationValues): React.ReactElement => {\n    if (hasThumbnails) {\n      return (\n        <Icon rotate={rotation} color={'black'} width={24} height={24}>\n          <IconArrow />\n        </Icon>\n      )\n    } else {\n      return (\n        <Icon rotate={rotation} color={'white'} width={24} height={24}>\n          <IconArrow />\n        </Icon>\n      )\n    }\n  }\n\n  const customPaging = () => <div />\n\n  const sliderConfig = (hasThumbnails = false) => {\n    return hasThumbnails\n      ? {\n          asNavFor: nav2,\n          ref: slider => (slider1 = slider),\n          slidesToShow: 1,\n          arrows: false,\n          swipeToSlide: true,\n          focusOnSelect: true,\n          ...sliderSettings,\n        }\n      : {\n          nextArrow: renderArrows(90),\n          prevArrow: renderArrows(270),\n          customPaging,\n          ...sliderSettings,\n        }\n  }\n\n  const sliderThumbnailImageConfig = {\n    ref: slider => (slider2 = slider),\n    slidesToShow: 4,\n    swipeToSlide: true,\n    focusOnSelect: true,\n    asNavFor: nav1,\n    dots: true,\n    className: 'mms-th-slider',\n    ...sliderConfig(false),\n  }\n\n  const [dragging, setDragging] = useState(false)\n\n  const handleBeforeChange = useCallback(() => {\n    setDragging(true)\n  }, [setDragging])\n\n  const handleAfterChange = useCallback(() => {\n    setDragging(false)\n  }, [setDragging])\n\n  const handleOnItemClick = useCallback(\n    e => {\n      if (dragging) {\n        e.stopPropagation()\n      }\n    },\n    [dragging]\n  )\n\n  const beforeChange = (currentSlide, nextSlide) => {\n    if (sliderSettings.beforeChange) sliderSettings.beforeChange(currentSlide, nextSlide)\n    handleBeforeChange()\n  }\n\n  const afterChange = currentSlide => {\n    if (sliderSettings.afterChange) sliderSettings.afterChange(currentSlide)\n    handleAfterChange()\n  }\n\n  return (\n    <StyledCarousel\n      className={className}\n      whiteDots={whiteDots}\n      ref={elem => (carouselDom = elem)}\n      hasThumbnails={hasThumbnails}\n      items={items}\n      sliderSettings={sliderSettings}\n      renderSlide={renderSlide}\n      boxShadow={boxShadow}\n      hasOverflow={hasOverflow}\n      hasPadding={hasPadding}\n      fullHeight={fullHeight}>\n      {badges && badges.length > 0 && <Badge badges={badges} />}\n      <Slider\n        {...sliderConfig(hasThumbnails)}\n        beforeChange={beforeChange}\n        afterChange={afterChange}>\n        {items.map((entry, index) => {\n          return (\n            <StyledCarouselHandler onClickCapture={handleOnItemClick} key={index}>\n              {renderSlide(entry, index, false)}\n            </StyledCarouselHandler>\n          )\n        })}\n      </Slider>\n      {hasThumbnails && (\n        <Slider\n          {...sliderThumbnailImageConfig}\n          beforeChange={beforeChange}\n          afterChange={afterChange}>\n          {items &&\n            items.map((entry, index) => {\n              return (\n                renderSlide && (\n                  <StyledCarouselHandler onClickCapture={handleOnItemClick} key={index}>\n                    {renderSlide(entry, index, true)}\n                  </StyledCarouselHandler>\n                )\n              )\n            })}\n        </Slider>\n      )}\n    </StyledCarousel>\n  )\n}\n\nCarousel.displayName = 'Carousel'\n"],"file":"Carousel.js"}