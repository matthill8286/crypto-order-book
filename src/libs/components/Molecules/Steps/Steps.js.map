{"version":3,"sources":["../../../../src/components/Molecules/Steps/Steps.tsx"],"names":["React","Children","cloneElement","isValidElement","Card","FlexBox","StepConnector","Steps","props","activeStep","completedStep","elevation","connector","children","color","variant","onChange","other","childrenArray","toArray","steps","map","step","stepIndex","active","completed","elementPosition","count","connectorProps","prevActive","connectorComponent","stepProps","onClick","displayName"],"mappings":"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","sourcesContent":["import React, { Children, cloneElement, FC, isValidElement } from 'react'\nimport { Card } from '@/components/Atoms/Card'\nimport { FlexBox } from '@/components/Helper/FlexBox'\nimport { StepConnector } from './StepConnector'\nimport {\n  ElementPosition,\n  StepConnectorProps,\n  StepPrivateProps,\n  StepPublicProps,\n  StepsProps,\n} from './Steps.interface'\n\nexport const Steps: FC<StepsProps> = props => {\n  const {\n    activeStep = 0,\n    completedStep = 0,\n    elevation = 0,\n    connector,\n    children,\n    color = 'primary',\n    variant = 'prominent',\n    onChange,\n    ...other\n  } = props\n\n  const childrenArray = Children.toArray(children)\n\n  const steps = childrenArray.map((step, stepIndex) => {\n    if (isValidElement(step)) {\n      const active = activeStep === stepIndex\n      const completed = stepIndex <= completedStep\n\n      let elementPosition: ElementPosition = 'default'\n\n      if (stepIndex === 0) elementPosition = 'first'\n      if (stepIndex === 1) elementPosition = 'second'\n      if (stepIndex + 1 === Children.count(children)) elementPosition = 'last'\n\n      const connectorProps: StepConnectorProps = {\n        elementPosition,\n        active: stepIndex <= activeStep,\n        prevActive: stepIndex - 1 === activeStep,\n        completed,\n        color,\n        variant,\n      }\n\n      const connectorComponent = isValidElement(connector) ? (\n        cloneElement(connector, { ...connectorProps, ...connector.props })\n      ) : (\n        <StepConnector {...connectorProps} />\n      )\n\n      const stepProps: StepPublicProps & StepPrivateProps = {\n        ...step.props,\n        connector: connectorComponent,\n        elementPosition,\n        stepIndex,\n        active,\n        completed,\n        color,\n        onClick: onChange,\n        variant,\n      }\n\n      return cloneElement(step, stepProps)\n    }\n  })\n\n  return (\n    <Card\n      elevation={elevation}\n      noBorder={['top', 'right', 'bottom', 'left']}\n      surface=\"clear\"\n      padding=\"md\"\n      {...other}>\n      <FlexBox display=\"flex\" alignItems=\"center\" flexDirection=\"row\">\n        {steps}\n      </FlexBox>\n    </Card>\n  )\n}\n\nSteps.displayName = 'Steps'\n"],"file":"Steps.js"}