{"version":3,"sources":["../../../../src/components/Molecules/Steps/Step.test.tsx"],"names":["React","Icon","styled","IconArticle","mountWithTheme","renderWithTheme","Step","StepConnectorRoot","props","title","description","color","active","completed","elementPosition","stepIndex","variant","describe","it","tree","expect","toMatchSnapshot","CustomIcon","withIconProps","icon","CustomConnectorLine","span","theme","black","borderWidth","CustomConnector","connector","onClick","jest","fn","three","childAt","simulate","mock","calls","length","toEqual"],"mappings":"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","sourcesContent":["import React, { FC } from 'react'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { styled } from '@/styles/styled'\nimport { IconArticle } from '@matthill8286/atomic-icon-library'\nimport { mountWithTheme, renderWithTheme } from '@/testRenderer'\nimport { ThemeColors } from '@/types/theme'\nimport { Step } from './Step'\nimport { StepConnectorRoot } from './StepConnector'\nimport {\n  StepConnectorLineProps,\n  StepConnectorProps,\n  StepPrivateProps,\n  StepPublicProps,\n} from './Steps.interface'\n\nconst props: StepPublicProps & StepPrivateProps = {\n  title: 'Sign In',\n  description: 'Test description',\n  color: 'primary',\n  active: false,\n  completed: false,\n  elementPosition: 'first',\n  stepIndex: 0,\n  variant: 'prominent',\n}\n\ndescribe('Step', () => {\n  it('should render', () => {\n    const tree = renderWithTheme(<Step {...props} />)\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('should render with custom icon', () => {\n    interface CustomIconProps {\n      active?: boolean\n      completed?: boolean\n      color?: ThemeColors\n    }\n\n    const CustomIcon: FC<CustomIconProps> = ({\n      active = false,\n      completed = false,\n      color = 'primary',\n      ...props\n    }) => (\n      <Icon color={active ? 'white' : completed ? color : 'grey2'} {...props}>\n        <IconArticle />\n      </Icon>\n    )\n\n    const withIconProps = {\n      ...props,\n      icon: <CustomIcon />,\n    }\n    const tree = renderWithTheme(<Step {...withIconProps} />)\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('should render with custom connector', () => {\n    const CustomConnectorLine = styled.span<StepConnectorLineProps>`\n      border-color: ${({\n        theme,\n        color = 'primary',\n        active,\n        completed,\n        elementPosition = 'default',\n      }) =>\n        completed || active || elementPosition === 'first'\n          ? theme.color[color]\n          : theme.color.black};\n      border-style: solid;\n      border-top-width: ${({ borderWidth }) => borderWidth};\n      border-bottom-width: ${({ borderWidth }) => borderWidth};\n      border-radius: 4px;\n      display: block;\n      position: 'relative';\n      z-index: 'auto';\n    `\n\n    const CustomConnector: FC<StepConnectorProps> = props => (\n      <StepConnectorRoot {...props}>\n        <CustomConnectorLine {...props} borderWidth={props.variant === 'simple' ? '2px' : '4px'} />\n      </StepConnectorRoot>\n    )\n\n    const withIconProps = {\n      ...props,\n      connector: <CustomConnector />,\n    }\n    const tree = renderWithTheme(<Step {...withIconProps} />)\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('should call onClick function', () => {\n    const onClick = jest.fn()\n    const three = mountWithTheme(<Step {...props} onClick={onClick} />)\n    three.childAt(0).simulate('click')\n    expect(onClick.mock.calls.length).toEqual(1)\n  })\n})\n"],"file":"Step.test.js"}