{"version":3,"sources":["../../../../src/components/Molecules/Modal/Modal.test.tsx"],"names":["React","mountWithTheme","renderWithTheme","Modal","describe","ModalContent","it","tree","expect","toMatchSnapshot","buttonLabel","onClick","jest","fn","title","text","toContain","find","length","toBeGreaterThan","toHaveLength"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,eAAzB;AACA,SAASC,KAAT;AAEAC,QAAQ,CAAC,OAAD,EAAU,YAAM;AACtB,MAAMC,YAAY,GAAG,OAArB;AAEAC,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAM;AAChC,QAAMC,IAAI,GAAGL,eAAe,CAAC,oBAAC,KAAD,QAAQG,YAAR,CAAD,CAA5B;AACAG,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAHC,CAAF;AAIAH,EAAAA,EAAE,CAAC,iCAAD,EAAoC,YAAM;AAC1C,QAAMC,IAAI,GAAGL,eAAe,CAAC,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC;AAAZ,OAAkBG,YAAlB,CAAD,CAA5B;AACAG,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjD,QAAMC,IAAI,GAAGL,eAAe,CAC1B,oBAAC,KAAD;AACE,MAAA,kBAAkB,EAAE;AAClBQ,QAAAA,WAAW,EAAE,gBADK;AAElBC,QAAAA,OAAO,EAAEC,IAAI,CAACC,EAAL;AAFS,OADtB;AAKE,MAAA,oBAAoB,EAAE;AACpBH,QAAAA,WAAW,EAAE,WADO;AAEpBC,QAAAA,OAAO,EAAEC,IAAI,CAACC,EAAL;AAFW,OALxB;AASE,MAAA,IAAI,EAAC;AATP,OAUGR,YAVH,CAD0B,CAA5B;AAcAG,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAhBC,CAAF;AAkBAH,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAClC,QAAMQ,KAAK,GAAG,aAAd;AACA,QAAMP,IAAI,GAAGN,cAAc,CAAC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEa;AAAd,OAAsBT,YAAtB,CAAD,CAA3B;AACAG,IAAAA,MAAM,CAACD,IAAI,CAACQ,IAAL,EAAD,CAAN,CAAoBC,SAApB,CAA8BF,KAA9B;AACD,GAJC,CAAF;AAMAV,EAAAA,QAAQ,CAAC,wBAAD,EAA2B,YAAM;AACvCE,IAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAM;AACjC,UAAMC,IAAI,GAAGN,cAAc,CAAC,oBAAC,KAAD,QAAQI,YAAR,CAAD,CAA3B;AACAG,MAAAA,MAAM,CAACD,IAAI,CAACU,IAAL,CAAU,kCAAV,EAA8CC,MAA/C,CAAN,CAA6DC,eAA7D,CAA6E,CAA7E;AACD,KAHC,CAAF;AAIAb,IAAAA,EAAE,CAAC,8CAAD,EAAiD,YAAM;AACvD,UAAMC,IAAI,GAAGN,cAAc,CAAC,oBAAC,KAAD;AAAO,QAAA,eAAe,EAAE;AAAxB,SAA+BI,YAA/B,CAAD,CAA3B;AACAG,MAAAA,MAAM,CAACD,IAAI,CAACU,IAAL,CAAU,kCAAV,CAAD,CAAN,CAAsDG,YAAtD,CAAmE,CAAnE;AACD,KAHC,CAAF;AAID,GATO,CAAR;AAUD,CA9CO,CAAR","sourcesContent":["import * as React from 'react'\nimport { mountWithTheme, renderWithTheme } from '@/testRenderer'\nimport { Modal } from './Modal'\n\ndescribe('Modal', () => {\n  const ModalContent = 'Modal'\n\n  it('Should render a Modal', () => {\n    const tree = renderWithTheme(<Modal>{ModalContent}</Modal>)\n    expect(tree).toMatchSnapshot()\n  })\n  it('Should render a Modal with size', () => {\n    const tree = renderWithTheme(<Modal size=\"lg\">{ModalContent}</Modal>)\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Modal with two buttons', () => {\n    const tree = renderWithTheme(\n      <Modal\n        primaryButtonProps={{\n          buttonLabel: 'Call to action',\n          onClick: jest.fn(),\n        }}\n        secondaryButtonProps={{\n          buttonLabel: 'SchlieÃŸen',\n          onClick: jest.fn(),\n        }}\n        size=\"lg\">\n        {ModalContent}\n      </Modal>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('should render the title', () => {\n    const title = 'Lorem Title'\n    const tree = mountWithTheme(<Modal title={title}>{ModalContent}</Modal>)\n    expect(tree.text()).toContain(title)\n  })\n\n  describe('Close Button in Header', () => {\n    it('is rendered by default', () => {\n      const tree = mountWithTheme(<Modal>{ModalContent}</Modal>)\n      expect(tree.find('[data-test=\"modal-close-button\"]').length).toBeGreaterThan(0)\n    })\n    it('is not rendered if hideCloseButton is passed', () => {\n      const tree = mountWithTheme(<Modal hideCloseButton={true}>{ModalContent}</Modal>)\n      expect(tree.find('[data-test=\"modal-close-button\"]')).toHaveLength(0)\n    })\n  })\n})\n"],"file":"Modal.test.js"}