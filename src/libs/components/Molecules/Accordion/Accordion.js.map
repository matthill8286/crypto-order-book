{"version":3,"sources":["../../../../src/components/Molecules/Accordion/Accordion.tsx"],"names":["React","forwardRef","useImperativeHandle","useContext","useEffect","useReducer","useWindowDimensions","AccordionEntry","ThemeContext","openEntriesReducer","state","action","type","shouldCloseOthers","id","concat","filter","entries","reduce","acc","entry","index","toString","isOpenInitially","map","getInitialState","openedIndex","isUnfoldable","openEntry","find","indexOf","length","Accordion","ref","onChange","isExpandedFrom","isLarge","customLabelHeading","withIconsOnRight","labelPadding","entryPadding","withCustomIcon","customIcon","otherProps","idsOfOpenEntries","dispatch","includes","knownEntryIds","useRef","entriesNotYetInitialized","current","currentBreakpoint","breakpoint","theme","isExpandedFromBreakpoint","breakpoints","undefined","_onChange","isOpen","findIndex","eventType","openEntryById","details","title","noBorderTop"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,mBAA5B,QAAuD,OAAvD;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,QAAkD,OAAlD;AAEA,SAASC,mBAAT;AACA,SAASC,cAAT;AACA,SAASC,YAAT;;AAQA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAkBC,MAAlB,EAAmD;AAC5E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,MAAL;AACE,aAAOD,MAAM,CAACE,iBAAP,GAA2B,CAACF,MAAM,CAACG,EAAR,CAA3B,GAAyCJ,KAAK,CAACK,MAAN,CAAaJ,MAAM,CAACG,EAApB,CAAhD;;AACF,SAAK,OAAL;AACE,aAAOJ,KAAK,CAACM,MAAN,CAAa,UAAAF,EAAE;AAAA,eAAIA,EAAE,KAAKH,MAAM,CAACG,EAAlB;AAAA,OAAf,CAAP;;AACF,SAAK,WAAL;AACE,aAAOH,MAAM,CAACM,OAAP,CAAeC,MAAf,CACL,UAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb;AAAA,eAAuBF,GAAG,CAACJ,MAAJ,CAAWK,KAAK,CAACN,EAAN,IAAYO,KAAK,CAACC,QAAN,EAAvB,CAAvB;AAAA,OADK,EAEL,EAFK,CAAP;;AAIF,SAAK,iBAAL;AACE,aAAOZ,KAAK,CAACK,MAAN,CACLJ,MAAM,CAACM,OAAP,CACGD,MADH,CACU,UAAAI,KAAK;AAAA,eAAI,OAAOA,KAAK,CAACN,EAAb,KAAoB,QAApB,IAAgCM,KAAK,CAACG,eAA1C;AAAA,OADf,EAEGC,GAFH,CAEO;AAAA,YAAGV,EAAH,QAAGA,EAAH;AAAA,eAAYA,EAAZ;AAAA,OAFP,CADK,CAAP;;AAKF;AACE,aAAOJ,KAAP;AAjBJ;AAmBD,CApBD;;AAsBA,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,QAIR;AAAA;AAAA,MAJUC,WAIV;AAAA,MAJuBC,YAIvB;AAAA,MAJqCV,OAIrC;;AAEd,MAAIU,YAAJ,EAAkB;AAChB,WAAOV,OAAO,CAACC,MAAR,CACL,UAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb;AAAA,aACED,KAAK,CAACG,eAAN,IAAyBG,WAAW,KAAKL,KAAzC,GACIF,GAAG,CAACJ,MAAJ,CAAWK,KAAK,CAACN,EAAN,IAAYO,KAAK,CAACC,QAAN,EAAvB,CADJ,GAEIH,GAHN;AAAA,KADK,EAKL,EALK,CAAP;AAOD;;AAID,MAAMS,SAAS,GAAGX,OAAO,CAACY,IAAR,CAAa,UAAAT,KAAK;AAAA,WAAI,CAAC,CAACA,KAAK,CAACG,eAAZ;AAAA,GAAlB,CAAlB;;AACA,MAAIK,SAAJ,EAAe;AACb,WAAO,CAACA,SAAS,CAACd,EAAV,IAAgBG,OAAO,CAACa,OAAR,CAAgBF,SAAhB,EAA2BN,QAA3B,EAAjB,CAAP;AACD;;AAED,MAAII,WAAW,GAAG,CAAC,CAAf,IAAoBA,WAAW,GAAGT,OAAO,CAACc,MAA9C,EAAsD;AACpD,WAAO,CAACd,OAAO,CAACS,WAAD,CAAP,CAAqBZ,EAArB,IAA2BY,WAAW,CAACJ,QAAZ,EAA5B,CAAP;AACD;;AAGD,SAAO,EAAP;AACD,CA7BD;;AA+BA,OAAO,IAAMU,SAAS,GAAG/B,UAAU,CACjC,iBAgBEgC,GAhBF,EAiByB;AAAA,MAfrBhB,OAeqB,SAfrBA,OAeqB;AAAA,iCAdrBU,YAcqB;AAAA,MAdrBA,YAcqB,mCAdN,KAcM;AAAA,gCAbrBD,WAaqB;AAAA,MAbrBA,WAaqB,kCAbP,CAAC,CAaM;AAAA,MAZrBQ,QAYqB,SAZrBA,QAYqB;AAAA,MAXrBC,cAWqB,SAXrBA,cAWqB;AAAA,MAVrBC,OAUqB,SAVrBA,OAUqB;AAAA,MATrBC,kBASqB,SATrBA,kBASqB;AAAA,oCARrBC,gBAQqB;AAAA,MARrBA,gBAQqB,sCARF,KAQE;AAAA,MAPrBC,YAOqB,SAPrBA,YAOqB;AAAA,MANrBC,YAMqB,SANrBA,YAMqB;AAAA,mCALrBC,cAKqB;AAAA,MALrBA,cAKqB,qCALJ,KAKI;AAAA,MAJrBC,UAIqB,SAJrBA,UAIqB;AAAA,MAHlBC,UAGkB;;AAAA,oBACctC,UAAU,CAC7CI,kBAD6C,EAE7C,CAACiB,WAAD,EAAcC,YAAd,EAA4BV,OAA5B,CAF6C,EAG7CQ,eAH6C,CADxB;AAAA;AAAA,MAChBmB,gBADgB;AAAA,MACEC,QADF;;AAOvBzC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIsB,WAAW,GAAG,CAAC,CAAf,IAAoB,CAACkB,gBAAgB,CAACE,QAAjB,WAA6BpB,WAA7B,EAAzB,EAAsE;AACpEmB,MAAAA,QAAQ,CAAC;AAAEjC,QAAAA,IAAI,EAAE,MAAR;AAAgBE,QAAAA,EAAE,YAAKY,WAAL,CAAlB;AAAsCb,QAAAA,iBAAiB,EAAE,CAACc;AAA1D,OAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACD,WAAD,CAJM,CAAT;AAMA,MAAMqB,aAAa,GAAG/C,KAAK,CAACgD,MAAN,CAAa/B,OAAO,CAACO,GAAR,CAAY;AAAA,QAAGV,EAAH,SAAGA,EAAH;AAAA,WAAYA,EAAZ;AAAA,GAAZ,CAAb,CAAtB;AAEA,MAAMmC,wBAAwB,GAAGhC,OAAO,CAACD,MAAR,CAC/B,UAAAI,KAAK;AAAA,WAAI,CAAC2B,aAAa,CAACG,OAAd,CAAsBJ,QAAtB,CAA+B1B,KAAK,CAACN,EAArC,CAAL;AAAA,GAD0B,CAAjC;AAIAiC,EAAAA,aAAa,CAACG,OAAd,sBAA4BjC,OAAO,CAACO,GAAR,CAAY;AAAA,QAAGV,EAAH,SAAGA,EAAH;AAAA,WAAYA,EAAZ;AAAA,GAAZ,CAA5B;;AAEA,MAAImC,wBAAwB,CAAClB,MAAzB,GAAkC,CAAtC,EAAyC;AACvCc,IAAAA,QAAQ,CAAC;AAAEjC,MAAAA,IAAI,EAAE,iBAAR;AAA2BK,MAAAA,OAAO,EAAEgC;AAApC,KAAD,CAAR;AACD;;AAvBsB,6BAyBmB3C,mBAAmB,EAzBtC;AAAA,MAyBH6C,iBAzBG,wBAyBfC,UAzBe;;AA0BvB,MAAMC,KAAK,GAAGlD,UAAU,CAACK,YAAD,CAAxB;AACA,MAAM8C,wBAAwB,GAAGnB,cAAc,GAAGkB,KAAK,CAACE,WAAN,CAAkBpB,cAAlB,CAAH,GAAuCqB,SAAtF;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAC3C,EAAD,EAAsB;AACtC,QAAM4C,MAAM,GAAGd,gBAAgB,CAACE,QAAjB,CAA0BhC,EAA1B,CAAf;;AACA,QAAI4C,MAAJ,EAAY;AACVb,MAAAA,QAAQ,CAAC;AACPjC,QAAAA,IAAI,EAAE,OADC;AAEPE,QAAAA,EAAE,EAAFA;AAFO,OAAD,CAAR;AAID,KALD,MAKO;AACL+B,MAAAA,QAAQ,CAAC;AACPjC,QAAAA,IAAI,EAAE,MADC;AAEPE,QAAAA,EAAE,EAAFA,EAFO;AAGPD,QAAAA,iBAAiB,EAAE,CAACc;AAHb,OAAD,CAAR;AAKD;;AAED,QAAIO,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC;AACPb,QAAAA,KAAK,EAAEJ,OAAO,CAAC0C,SAAR,CAAkB,UAAAvC,KAAK;AAAA,iBAAIA,KAAK,CAACN,EAAN,KAAaA,EAAjB;AAAA,SAAvB,KAA+C,CAACA,EADhD;AAEP8C,QAAAA,SAAS,EAAEF,MAAM,GAAG,MAAH,GAAY;AAFtB,OAAD,CAAR;AAID;AACF,GArBD;;AAuBAtD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI+C,iBAAiB,IAAIG,wBAAzB,EAAmD;AACjDT,MAAAA,QAAQ,CAAC;AACPjC,QAAAA,IAAI,EAAE,WADC;AAEPK,QAAAA,OAAO,EAAPA;AAFO,OAAD,CAAR;AAID;AACF,GAPQ,EAON,EAPM,CAAT;AASAf,EAAAA,mBAAmB,CAAC+B,GAAD,EAAM;AAAA,WAAO;AAC9B4B,MAAAA,aAAa,EAAE,uBAAC/C,EAAD,EAAgB;AAC7B,YAAM4C,MAAM,GAAGd,gBAAgB,CAACE,QAAjB,CAA0BhC,EAA1B,CAAf;;AACA,YAAI,CAAC4C,MAAL,EAAa;AACXD,UAAAA,SAAS,CAAC3C,EAAD,CAAT;AACD;AACF;AAN6B,KAAP;AAAA,GAAN,CAAnB;AASA,SAAOG,OAAO,GACZ,+BAAa0B,UAAb,EACG1B,OAAO,CAACO,GAAR,CAAY,UAACJ,KAAD,EAA8BC,KAA9B,EAAgD;AAC3D,QAAMP,EAAE,GAAGM,KAAK,CAACN,EAAN,IAAYO,KAAK,CAACC,QAAN,EAAvB;AACA,QAAMoC,MAAM,GAAGd,gBAAgB,CAACE,QAAjB,CAA0BhC,EAA1B,CAAf;AAEA,WACE,oBAAC,cAAD;AACE,MAAA,OAAO,EAAEsB,OADX;AAEE,MAAA,YAAY,EAAEI,YAFhB;AAGE,MAAA,OAAO,EAAEpB,KAAK,CAAC0C,OAHjB;AAIE,MAAA,EAAE,EAAEhD,EAJN;AAKE,MAAA,MAAM,EAAE4C,MALV;AAME,MAAA,GAAG,EAAE5C,EANP;AAOE,MAAA,gCAAgC,EAC9BwC,wBARJ;AAUE,MAAA,QAAQ,EAAEG,SAVZ;AAWE,MAAA,YAAY,EAAElB,YAXhB;AAYE,MAAA,KAAK,EAAEnB,KAAK,CAAC2C,KAZf;AAaE,MAAA,kBAAkB,EAAE1B,kBAbtB;AAcE,MAAA,WAAW,EAAEjB,KAAK,CAAC4C,WAdrB;AAeE,MAAA,gBAAgB,EAAE1B,gBAfpB;AAgBE,MAAA,cAAc,EAAEG,cAhBlB;AAiBE,MAAA,UAAU,EAAEC;AAjBd,MADF;AAqBD,GAzBA,CADH,CADY,GA6BV,IA7BJ;AA8BD,CAtHgC,CAA5B","sourcesContent":["import React, { forwardRef, useImperativeHandle } from 'react'\nimport { useContext, useEffect, useReducer } from 'react'\nimport { FoldableAcceptedBreakpoints } from '@/components/Atoms/Foldable/Foldable.interface'\nimport { useWindowDimensions } from '@/components/Helper/useWindowDimensions'\nimport { AccordionEntry } from '@/components/Molecules/Accordion/AccordionEntry'\nimport { ThemeContext } from '@/styles/styled'\nimport {\n  AccordionEntryObject,\n  AccordionProps,\n  AccordionRefObject,\n  ActionType,\n} from './Accordion.interface'\n\nconst openEntriesReducer = (state: string[], action: ActionType): string[] => {\n  switch (action.type) {\n    case 'open':\n      return action.shouldCloseOthers ? [action.id] : state.concat(action.id)\n    case 'close':\n      return state.filter(id => id !== action.id)\n    case 'openBatch':\n      return action.entries.reduce<string[]>(\n        (acc, entry, index) => acc.concat(entry.id || index.toString()),\n        []\n      )\n    case 'checkNewEntries':\n      return state.concat(\n        action.entries\n          .filter(entry => typeof entry.id === 'string' && entry.isOpenInitially)\n          .map(({ id }) => id as string)\n      )\n    default:\n      return state\n  }\n}\n\nconst getInitialState = ([openedIndex, isUnfoldable, entries]: [\n  number,\n  boolean,\n  AccordionEntryObject[]\n]): string[] => {\n  // We can have more than one entry open\n  if (isUnfoldable) {\n    return entries.reduce<string[]>(\n      (acc, entry, index) =>\n        entry.isOpenInitially || openedIndex === index\n          ? acc.concat(entry.id || index.toString())\n          : acc,\n      []\n    )\n  }\n\n  // We can only have one entry open\n  // If there are more than one entries with isOpenInitially, use the first one.\n  const openEntry = entries.find(entry => !!entry.isOpenInitially)\n  if (openEntry) {\n    return [openEntry.id || entries.indexOf(openEntry).toString()]\n  }\n  // Initially open entry can also be set by list index.\n  if (openedIndex > -1 && openedIndex < entries.length) {\n    return [entries[openedIndex].id || openedIndex.toString()]\n  }\n\n  // Otherwise all entries are closed.\n  return []\n}\n\nexport const Accordion = forwardRef<AccordionRefObject, AccordionProps>(\n  (\n    {\n      entries,\n      isUnfoldable = false,\n      openedIndex = -1,\n      onChange,\n      isExpandedFrom,\n      isLarge,\n      customLabelHeading,\n      withIconsOnRight = false,\n      labelPadding,\n      entryPadding,\n      withCustomIcon = false,\n      customIcon,\n      ...otherProps\n    },\n    ref\n  ): JSX.Element | null => {\n    const [idsOfOpenEntries, dispatch] = useReducer(\n      openEntriesReducer,\n      [openedIndex, isUnfoldable, entries],\n      getInitialState\n    )\n\n    useEffect(() => {\n      if (openedIndex > -1 && !idsOfOpenEntries.includes(`${openedIndex}`)) {\n        dispatch({ type: 'open', id: `${openedIndex}`, shouldCloseOthers: !isUnfoldable })\n      }\n    }, [openedIndex])\n\n    const knownEntryIds = React.useRef(entries.map(({ id }) => id))\n\n    const entriesNotYetInitialized = entries.filter(\n      entry => !knownEntryIds.current.includes(entry.id)\n    )\n\n    knownEntryIds.current = [...entries.map(({ id }) => id)]\n\n    if (entriesNotYetInitialized.length > 0) {\n      dispatch({ type: 'checkNewEntries', entries: entriesNotYetInitialized })\n    }\n\n    const { breakpoint: currentBreakpoint } = useWindowDimensions()\n    const theme = useContext(ThemeContext)\n    const isExpandedFromBreakpoint = isExpandedFrom ? theme.breakpoints[isExpandedFrom] : undefined\n\n    const _onChange = (id: string): void => {\n      const isOpen = idsOfOpenEntries.includes(id)\n      if (isOpen) {\n        dispatch({\n          type: 'close',\n          id,\n        })\n      } else {\n        dispatch({\n          type: 'open',\n          id,\n          shouldCloseOthers: !isUnfoldable,\n        })\n      }\n\n      if (onChange) {\n        onChange({\n          index: entries.findIndex(entry => entry.id === id) || +id,\n          eventType: isOpen ? 'HIDE' : 'SHOW',\n        })\n      }\n    }\n\n    useEffect(() => {\n      if (currentBreakpoint >= isExpandedFromBreakpoint) {\n        dispatch({\n          type: 'openBatch',\n          entries,\n        })\n      }\n    }, [])\n\n    useImperativeHandle(ref, () => ({\n      openEntryById: (id: string) => {\n        const isOpen = idsOfOpenEntries.includes(id)\n        if (!isOpen) {\n          _onChange(id)\n        }\n      },\n    }))\n\n    return entries ? (\n      <section {...otherProps}>\n        {entries.map((entry: AccordionEntryObject, index: number) => {\n          const id = entry.id || index.toString()\n          const isOpen = idsOfOpenEntries.includes(id)\n\n          return (\n            <AccordionEntry\n              isLarge={isLarge}\n              entryPadding={entryPadding}\n              details={entry.details}\n              id={id}\n              isOpen={isOpen}\n              key={id}\n              looksOpenInitiallyFromBreakpoint={\n                isExpandedFromBreakpoint as FoldableAcceptedBreakpoints\n              }\n              onChange={_onChange}\n              labelPadding={labelPadding}\n              title={entry.title}\n              customLabelHeading={customLabelHeading}\n              noBorderTop={entry.noBorderTop}\n              withIconsOnRight={withIconsOnRight}\n              withCustomIcon={withCustomIcon}\n              customIcon={customIcon}\n            />\n          )\n        })}\n      </section>\n    ) : null\n  }\n)\n"],"file":"Accordion.js"}