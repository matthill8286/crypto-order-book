{"version":3,"sources":["../../../../src/components/Molecules/Dropdown/NativeDropdown.test.tsx"],"names":["React","mountWithTheme","renderWithTheme","NativeDropdown","options","label","describe","it","wrapper","map","option","expect","toMatchSnapshot","onChange","jest","fn","find","simulate","target","value","toBeCalled"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,eAAzB;AACA,SAASC,cAAT;AAEA,IAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAD,EAAmB;AAAEA,EAAAA,KAAK,EAAE;AAAT,CAAnB,CAAhB;AAEAC,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BC,EAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAM;AAChC,QAAMC,OAAO,GAAGN,eAAe,CAC7B,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAC,KAAtB;AAA4B,MAAA,QAAQ,EAAE,oBAAM,CAAE;AAA9C,OACGE,OAAO,CAACK,GAAR,CAAY,UAAAC,MAAM;AAAA,aACjB;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACL,KAApB;AAA2B,QAAA,KAAK,EAAEK,MAAM,CAACL;AAAzC,SACGK,MAAM,CAACL,KADV,CADiB;AAAA,KAAlB,CADH,CAD6B,CAA/B;AASAM,IAAAA,MAAM,CAACH,OAAD,CAAN,CAAgBI,eAAhB;AACD,GAXC,CAAF;AAaAL,EAAAA,EAAE,CAAC,sBAAD,EAAyB,YAAM;AAC/B,QAAMM,QAAQ,GAAGC,IAAI,CAACC,EAAL,EAAjB;AACA,QAAMP,OAAO,GAAGP,cAAc,CAC5B,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAC,KAAtB;AAA4B,MAAA,QAAQ,EAAEY;AAAtC,OACGT,OAAO,CAACK,GAAR,CAAY,UAAAC,MAAM;AAAA,aACjB;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACL,KAApB;AAA2B,QAAA,KAAK,EAAEK,MAAM,CAACL;AAAzC,SACGK,MAAM,CAACL,KADV,CADiB;AAAA,KAAlB,CADH,CAD4B,CAA9B;AASAG,IAAAA,OAAO,CAACQ,IAAR,CAAa,QAAb,EAAuBC,QAAvB,CAAgC,QAAhC,EAA0C;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAAV,KAA1C;AACAR,IAAAA,MAAM,CAACE,QAAD,CAAN,CAAiBO,UAAjB;AACD,GAbC,CAAF;AAcD,CA5BO,CAAR","sourcesContent":["import React from 'react'\nimport { mountWithTheme, renderWithTheme } from '@/testRenderer'\nimport { NativeDropdown } from './NativeDropdown'\n\nconst options = [{ label: 'one' }, { label: ' two' }]\n\ndescribe('NativeDropdown', () => {\n  it('should match snapshot', () => {\n    const wrapper = renderWithTheme(\n      <NativeDropdown value=\"two\" onChange={() => {}}>\n        {options.map(option => (\n          <option key={option.label} value={option.label}>\n            {option.label}\n          </option>\n        ))}\n      </NativeDropdown>\n    )\n    expect(wrapper).toMatchSnapshot()\n  })\n\n  it('should call onChange', () => {\n    const onChange = jest.fn()\n    const wrapper = mountWithTheme(\n      <NativeDropdown value=\"two\" onChange={onChange}>\n        {options.map(option => (\n          <option key={option.label} value={option.label}>\n            {option.label}\n          </option>\n        ))}\n      </NativeDropdown>\n    )\n    wrapper.find('select').simulate('change', { target: { value: 'one' } })\n    expect(onChange).toBeCalled()\n  })\n})\n"],"file":"NativeDropdown.test.js"}