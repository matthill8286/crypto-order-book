{"version":3,"sources":["../../../../src/components/Molecules/Dropdown/SearchableDropdown.test.tsx"],"names":["React","mountWithTheme","renderWithTheme","StyledList","DropdownOption","SearchableDropdown","describe","props","index","inputValue","undefined","label","onSelectChange","jest","fn","onInputChange","it","wrapper","expect","toMatchSnapshot","button","find","first","simulate","findWhere","item","active","length","toEqual","text","children"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { mountWithTheme, renderWithTheme } from '@/testRenderer'\nimport { StyledList } from './Dropdown.styled'\nimport { DropdownOption } from './DropdownOption'\nimport { SearchableDropdown } from './SearchableDropdown'\n\ndescribe('SearchableDropdown', () => {\n  const props = {\n    index: -1,\n    inputValue: undefined,\n    label: 'oh my label',\n    onSelectChange: jest.fn(),\n    onInputChange: jest.fn(),\n  }\n  it('renders', () => {\n    const wrapper = renderWithTheme(\n      <SearchableDropdown {...props} options={[{ label: 'one' }, { label: 'two' }]} />\n    )\n    expect(wrapper).toMatchSnapshot()\n  })\n  it('toggles the dropdown on click', () => {\n    const wrapper = mountWithTheme(\n      <SearchableDropdown {...props} options={[{ label: 'one' }, { label: 'two' }]} />\n    )\n    const button = wrapper.find('div').first()\n    button.simulate('click')\n    expect(wrapper.find(StyledList).findWhere(item => item.props().active))\n  })\n  it('accepts an optional label prop', () => {\n    const wrapper = mountWithTheme(\n      <SearchableDropdown\n        {...props}\n        label=\"Label text\"\n        options={[{ label: 'one' }, { label: 'two' }]}\n      />\n    )\n    const label = wrapper.find('label')\n    expect(label.length).toEqual(1)\n    expect(label.text()).toEqual('Label text')\n  })\n  it('should select the option with given index prop', () => {\n    const wrapper = mountWithTheme(\n      <SearchableDropdown {...props} index={1} options={[{ label: 'one' }, { label: 'two' }]} />\n    )\n    expect(\n      wrapper.find(DropdownOption).findWhere(item => {\n        const props = item.props()\n        return props.active && props.children === 'two'\n      })\n    )\n  })\n})\n"],"file":"SearchableDropdown.test.js"}