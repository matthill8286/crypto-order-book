{"version":3,"sources":["../../../../src/components/Molecules/Dropdown/Dropdown.test.tsx"],"names":["React","mountWithTheme","renderWithTheme","Dropdown","StyledDropdownOption","StyledList","describe","it","wrapper","label","expect","toMatchSnapshot","find","simulate","dropDownWithOptions","findWhere","item","props","showDropdown","toBeDefined","button","first","active","length","toEqual","text","children"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { mountWithTheme, renderWithTheme } from '@/testRenderer'\nimport { Dropdown } from './Dropdown'\nimport { StyledDropdownOption, StyledList } from './Dropdown.styled'\n\ndescribe('Dropdown', () => {\n  it('renders', () => {\n    const wrapper = renderWithTheme(<Dropdown options={[{ label: 'one' }, { label: 'two' }]} />)\n    expect(wrapper).toMatchSnapshot()\n  })\n  it('renders and show options list', () => {\n    const wrapper = mountWithTheme(<Dropdown options={[{ label: 'one' }, { label: 'two' }]} />)\n    wrapper.find('DropdownWithoutState').simulate('click')\n    const dropDownWithOptions = wrapper.findWhere(item => item.props().showDropdown === true)\n    expect(dropDownWithOptions).toBeDefined()\n  })\n  it('toggles the dropdown on click', () => {\n    const wrapper = mountWithTheme(<Dropdown options={[{ label: 'one' }, { label: 'two' }]} />)\n    const button = wrapper.find('div').first()\n    button.simulate('click')\n    expect(wrapper.find(StyledList).findWhere(item => item.props().active))\n  })\n  it('accepts an optional label prop', () => {\n    const wrapper = mountWithTheme(\n      <Dropdown label=\"Label text\" options={[{ label: 'one' }, { label: 'two' }]} />\n    )\n    const label = wrapper.find('label')\n    expect(label.length).toEqual(1)\n    expect(label.text()).toEqual('Label text')\n  })\n  it('should select the option with given initialIndex prop', () => {\n    const wrapper = mountWithTheme(\n      <Dropdown\n        initialIndex={1}\n        label=\"Label text\"\n        options={[{ label: 'one' }, { label: 'two' }]}\n      />\n    )\n    expect(\n      wrapper.find(StyledDropdownOption).findWhere(item => {\n        const props = item.props()\n        return props.active && props.children === 'two'\n      })\n    )\n  })\n})\n"],"file":"Dropdown.test.js"}