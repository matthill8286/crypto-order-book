{"version":3,"sources":["../../../../src/components/Molecules/Dropdown/SearchableDropdown.tsx"],"names":["React","Input","IconShare","StyledList","StyledSearchableDropdownWrapper","DropdownOption","SearchableDropdown","props","className","index","inputValue","initializeOpen","label","errorMessage","options","onSelectChange","onInputChange","ref","useRef","useState","isOpen","setOpen","saiyanOptions","setsaiyanOptions","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","onFocus","onClickHandler","item","onInputChangeHandler","value","filter","option","toLowerCase","includes","map","i","displayName"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Input } from '@/components/Atoms/Input'\nimport { IconShare } from '@matthill8286/atomic-icon-library'\nimport { SearchableDropdownProps } from './Dropdown.interface'\nimport { StyledList, StyledSearchableDropdownWrapper } from './Dropdown.styled'\nimport { DropdownOption } from './DropdownOption'\n\nexport const SearchableDropdown: React.FC<SearchableDropdownProps> = props => {\n  const {\n    className,\n    index,\n    inputValue,\n    initializeOpen = false,\n    label,\n    errorMessage,\n    options = [],\n    onSelectChange,\n    onInputChange,\n  } = props\n\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  const [isOpen, setOpen] = React.useState(initializeOpen)\n  const [saiyanOptions, setsaiyanOptions] = React.useState(options)\n\n  const handleClickOutside = (event: Event): void => {\n    if (!ref.current?.contains(event.target as Node)) {\n      setOpen(false)\n    }\n  }\n\n  React.useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true)\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true)\n    }\n  })\n\n  const onFocus = () => {\n    setOpen(true)\n  }\n\n  const onClickHandler = (item, index) => {\n    setOpen(false)\n    onSelectChange(item, index)\n  }\n\n  const onInputChangeHandler = event => {\n    const { value } = event.target\n    setsaiyanOptions(\n      value\n        ? options.filter(option => option.label.toLowerCase().includes(value.toLowerCase()))\n        : options\n    )\n\n    onInputChange(event)\n  }\n\n  return (\n    <StyledSearchableDropdownWrapper className={className} ref={ref}>\n      <Input\n        state={errorMessage ? 'error' : 'idle'}\n        errorMessage={errorMessage}\n        label={label}\n        value={inputValue}\n        onFocus={onFocus}\n        onChange={onInputChangeHandler}\n        inputIcon={<IconShare />}\n        inputType=\"text\"\n      />\n      <StyledList active={isOpen} isSearchable={true}>\n        {saiyanOptions.map((item, i) => (\n          <DropdownOption\n            key={i}\n            active={i === index}\n            label={item.label}\n            onClick={() => onClickHandler(item, i)}\n          />\n        ))}\n      </StyledList>\n    </StyledSearchableDropdownWrapper>\n  )\n}\n\nSearchableDropdown.displayName = 'SearchableDropdown'\n"],"file":"SearchableDropdown.js"}