{"version":3,"sources":["../../../../src/components/Molecules/Dropdown/Dropdown.tsx"],"names":["React","useState","CopyText","withDropdownState","IconArrow","StyleguideArrow","StyledContainer","StyledDropdown","StyledDropdownSelect","StyledFieldWrapper","StyledIcon","StyledList","StyledTypo","DropdownOption","DropdownWithoutState","props","autoComplete","initialIndex","label","listType","onChange","placeholder","options","showDropdown","toggleDropdown","withBackground","noBorder","setupCurrentIndex","lastIndexOfOptions","length","currentIndex","setCurrentIndex","isFilled","setFill","handleItemClick","index","handleSelectChange","ev","findIndex","id","target","value","selectedItem","find","o","i","map","item","Dropdown","displayName"],"mappings":"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","sourcesContent":["import React, { FC, useState } from 'react'\nimport { InputDivider as Divider } from '@/components/Atoms/Input/InputDivider'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { withDropdownState } from '@/components/Helper/withDropdownState'\nimport { IconArrow, StyleguideArrow } from '@matthill8286/atomic-icon-library'\nimport { DropdownPropsEnhanced } from './Dropdown.interface'\nimport {\n  StyledContainer,\n  StyledDropdown,\n  StyledDropdownSelect,\n  StyledFieldWrapper,\n  StyledIcon,\n  StyledList,\n  StyledTypo,\n} from './Dropdown.styled'\nimport { DropdownOption } from './DropdownOption'\n\nconst DropdownWithoutState: FC<DropdownPropsEnhanced> = props => {\n  const {\n    autoComplete,\n    initialIndex,\n    label,\n    listType = 'custom',\n    onChange,\n    placeholder,\n    options = [],\n    showDropdown,\n    toggleDropdown,\n    withBackground,\n    noBorder,\n  } = props\n\n  let setupCurrentIndex = -1\n  const lastIndexOfOptions = options.length - 1\n\n  if (initialIndex === 0 || !!initialIndex) {\n    if (initialIndex >= 0 && initialIndex <= lastIndexOfOptions) {\n      setupCurrentIndex = initialIndex\n    }\n  }\n\n  const [currentIndex, setCurrentIndex] = useState<number>(setupCurrentIndex)\n  const [isFilled, setFill] = useState<boolean>(() => currentIndex !== -1)\n\n  const handleItemClick = (index: number) => () => {\n    setCurrentIndex(index)\n    setFill(true)\n    if (onChange) onChange(index)\n  }\n\n  const handleSelectChange = (ev: React.ChangeEvent<HTMLSelectElement>): void => {\n    const index = options.findIndex(({ id }) => id === ev.target.value)\n    if (index !== -1) {\n      handleItemClick(index)()\n    }\n  }\n\n  const selectedItem = options.find((o, i) => i === currentIndex)\n\n  return (\n    <StyledContainer onClick={toggleDropdown}>\n      {label && (\n        <CopyText tag=\"label\" color={isFilled ? 'grey5' : 'grey4'} data-label-filled={isFilled}>\n          {label}\n        </CopyText>\n      )}\n      {listType === 'custom' ? (\n        <StyledDropdown hasLabel={!!label} withBackground={withBackground}>\n          <StyledTypo fontSize=\"sm\" limitLines={1} lineHeight=\"sm\" tag=\"span\">\n            {currentIndex !== -1 ? options[currentIndex].label : placeholder}\n          </StyledTypo>\n          <StyledIcon rotate={showDropdown ? -90 : 90}>\n            <StyleguideArrow width={'md'} height={'md'} />\n          </StyledIcon>\n\n          <StyledList active={!!showDropdown} isSearchable={false}>\n            {options.map((item, index) => (\n              <DropdownOption\n                key={index}\n                active={index === currentIndex}\n                label={item.label}\n                onClick={handleItemClick(index)}\n              />\n            ))}\n          </StyledList>\n        </StyledDropdown>\n      ) : (\n        <StyledFieldWrapper noBorder={noBorder} hasLabel={!!label}>\n          <StyledDropdownSelect\n            listType={listType}\n            onChange={handleSelectChange}\n            {...(selectedItem?.id ? { value: selectedItem.id } : {})}\n            {...(autoComplete ? { autoComplete } : {})}>\n            {options.map((item, i) => {\n              return (\n                <option key={item.id || `dropdown-${i}`} value={item.id}>\n                  {item.label}\n                </option>\n              )\n            })}\n          </StyledDropdownSelect>\n          <StyledIcon width={16} height={16} rotate={90}>\n            <IconArrow />\n          </StyledIcon>\n        </StyledFieldWrapper>\n      )}\n    </StyledContainer>\n  )\n}\n\nexport const Dropdown = withDropdownState(DropdownWithoutState, { displayName: 'Dropdown' })\n"],"file":"Dropdown.js"}