{"version":3,"sources":["../../../../src/components/Molecules/SimpleCarousel/SimpleCarousel.tsx"],"names":["React","useCallback","useState","Slider","Icon","StyledCarousel","StyledCarouselHandler","StyledNavArrow","StyleguideArrow","SimpleCarousel","arrowsSurfaceColor","sliderSettings","items","renderSlide","whiteDots","brightArrows","boxShadow","hasOverflow","hasPadding","fixedWidth","tileWidth","className","carouselRef","firstClientX","sliderRef","useRef","minValue","rightDirection","direction","Math","abs","leftDirection","touchStart","e","preventDefault","stopPropagation","touches","clientX","touchEnd","round","changedTouches","current","slickNext","slickPrev","renderArrows","rotation","customPaging","sliderConfig","focusOnSelect","nextArrow","prevArrow","responsive","breakpoint","settings","swipe","swipeToSlide","draggable","touchMove","ref","dragging","setDragging","handleBeforeChange","handleAfterChange","handleOnItemClick","beforeChange","currentSlide","nextSlide","afterChange","map","entry","index","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,IAAT;AAEA,SAASC,cAAT,EAAyBC,qBAAzB,EAAgDC,cAAhD;AACA,SAASC,eAAT,QAAgC,mCAAhC;AAEA,OAAO,IAAMC,cAAuC,GAAG,SAA1CA,cAA0C,OAc7B;AAAA,MAbxBC,kBAawB,QAbxBA,kBAawB;AAAA,MAZxBC,cAYwB,QAZxBA,cAYwB;AAAA,MAXxBC,KAWwB,QAXxBA,KAWwB;AAAA,MAVxBC,WAUwB,QAVxBA,WAUwB;AAAA,MATxBC,SASwB,QATxBA,SASwB;AAAA,MARxBC,YAQwB,QARxBA,YAQwB;AAAA,MAPxBC,SAOwB,QAPxBA,SAOwB;AAAA,MANxBC,WAMwB,QANxBA,WAMwB;AAAA,MALxBC,UAKwB,QALxBA,UAKwB;AAAA,MAJxBC,UAIwB,QAJxBA,UAIwB;AAAA,MAHxBC,SAGwB,QAHxBA,SAGwB;AAAA,MAFxBC,SAEwB,QAFxBA,SAEwB;AAAA,MADxBC,WACwB,QADxBA,WACwB;AACxB,MAAIC,YAAJ;AAEA,MAAMC,SAAS,GAAGxB,KAAK,CAACyB,MAAN,CAA4B,IAA5B,CAAlB;AACA,MAAMC,QAAQ,GAAG,EAAjB;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD;AAAA,WAAuBA,SAAS,GAAG,CAACC,IAAI,CAACC,GAAL,CAASJ,QAAT,CAApC;AAAA,GAAvB;;AACA,MAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAACH,SAAD;AAAA,WAAuBA,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASJ,QAAT,CAAnC;AAAA,GAAtB;;AAEA,MAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAA+B;AAChDA,IAAAA,CAAC,CAACC,cAAF;AACAD,IAAAA,CAAC,CAACE,eAAF;AACAZ,IAAAA,YAAY,GAAGU,CAAC,CAACG,OAAF,CAAU,CAAV,EAAaC,OAA5B;AACD,GAJD;;AAMA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACL,CAAD,EAA+B;AAC9C,QAAMI,OAAO,GAAGR,IAAI,CAACU,KAAL,CAAWN,CAAC,CAACO,cAAF,CAAiB,CAAjB,EAAoBH,OAApB,GAA8Bd,YAAzC,CAAhB;;AAEA,QAAII,cAAc,CAACU,OAAD,CAAlB,EAA6B;AAAA;;AAC3B,4BAAAb,SAAS,CAACiB,OAAV,0EAAmBC,SAAnB;AACD,KAFD,MAEO,IAAIX,aAAa,CAACM,OAAD,CAAjB,EAA4B;AAAA;;AACjC,6BAAAb,SAAS,CAACiB,OAAV,4EAAmBE,SAAnB;AACD;AACF,GARD;;AAUA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAkD;AACrE,WACE,oBAAC,cAAD,QACE,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAEA,QAAd;AAAwB,MAAA,KAAK,EAAC,OAA9B;AAAsC,MAAA,OAAO,EAAC;AAA9C,OACE,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAE,EAAxB;AAA4B,MAAA,MAAM,EAAE;AAApC,MADF,CADF,CADF;AAOD,GARD;;AAUA,MAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,WAAM,gCAAN;AAAA,GAArB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB;AACEC,MAAAA,aAAa,EAAE,KADjB;AAEEC,MAAAA,SAAS,EAAEL,YAAY,CAAC,CAAD,CAFzB;AAGEM,MAAAA,SAAS,EAAEN,YAAY,CAAC,GAAD,CAHzB;AAIEE,MAAAA,YAAY,EAAZA,YAJF;AAKEK,MAAAA,UAAU,EAAE,CACV;AACEC,QAAAA,UAAU,EAAE,IADd;AAEEC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,KAAK,EAAE,KADC;AAERC,UAAAA,YAAY,EAAE,KAFN;AAGRC,UAAAA,SAAS,EAAE,KAHH;AAIRC,UAAAA,SAAS,EAAE;AAJH;AAFZ,OADU,EAUV;AACEL,QAAAA,UAAU,EAAE,IADd;AAEEC,QAAAA,QAAQ,EAAE;AACRE,UAAAA,YAAY,EAAE;AADN;AAFZ,OAVU;AALd,OAsBK5C,cAtBL;AAuBE+C,MAAAA,GAAG,EAAE,aAAAzB,CAAC,EAAI;AACRT,QAAAA,SAAS,CAACiB,OAAV,GAAoBR,CAApB;;AACA,YAAIX,WAAJ,EAAiB;AACfA,UAAAA,WAAW,CAACW,CAAD,CAAX;AACD;AACF;AA5BH;AA8BD,GA/BD;;AArCwB,kBAsEQ/B,QAAQ,CAAC,KAAD,CAtEhB;AAAA;AAAA,MAsEjByD,QAtEiB;AAAA,MAsEPC,WAtEO;;AAwExB,MAAMC,kBAAkB,GAAG5D,WAAW,CAAC,YAAM;AAC3C2D,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFqC,EAEnC,CAACA,WAAD,CAFmC,CAAtC;AAIA,MAAME,iBAAiB,GAAG7D,WAAW,CAAC,YAAM;AAC1C2D,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAFoC,EAElC,CAACA,WAAD,CAFkC,CAArC;AAIA,MAAMG,iBAAiB,GAAG9D,WAAW,CACnC,UAAAgC,CAAC,EAAI;AACH,QAAI0B,QAAJ,EAAc;AACZ1B,MAAAA,CAAC,CAACE,eAAF;AACD;AACF,GALkC,EAMnC,CAACwB,QAAD,CANmC,CAArC;;AASA,MAAMK,YAAY,GAAG,SAAfA,YAAe,CAACC,YAAD,EAAeC,SAAf,EAA6B;AAChD,QAAIvD,cAAc,CAACqD,YAAnB,EAAiCrD,cAAc,CAACqD,YAAf,CAA4BC,YAA5B,EAA0CC,SAA1C;AACjCL,IAAAA,kBAAkB;AACnB,GAHD;;AAKA,MAAMM,WAAW,GAAG,SAAdA,WAAc,CAAAF,YAAY,EAAI;AAClC,QAAItD,cAAc,CAACwD,WAAnB,EAAgCxD,cAAc,CAACwD,WAAf,CAA2BF,YAA3B;AAChCH,IAAAA,iBAAiB;AAClB,GAHD;;AAKA,SACE,oBAAC,cAAD;AACE,IAAA,kBAAkB,EAAEpD,kBADtB;AAEE,IAAA,SAAS,EAAEI,SAFb;AAGE,IAAA,UAAU,EAAEK,UAHd;AAIE,IAAA,SAAS,EAAEC,SAJb;AAKE,IAAA,YAAY,EAAEL,YALhB;AAME,IAAA,KAAK,EAAEH,KANT;AAOE,IAAA,cAAc,EAAED,cAPlB;AAQE,IAAA,WAAW,EAAEE,WARf;AASE,IAAA,SAAS,EAAEG,SATb;AAUE,IAAA,WAAW,EAAEC,WAVf;AAWE,IAAA,UAAU,EAAEC,UAXd;AAYE,IAAA,SAAS,EAAEG,SAZb;AAaE,IAAA,YAAY,EAAEW,UAbhB;AAcE,IAAA,UAAU,EAAEM;AAdd,KAeE,oBAAC,MAAD,eAAYS,YAAY,EAAxB;AAA4B,IAAA,YAAY,EAAEiB,YAA1C;AAAwD,IAAA,WAAW,EAAEG;AAArE,MACGvD,KAAK,CAACwD,GAAN,CAAU,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC3B,WACE,oBAAC,qBAAD;AACE,MAAA,cAAc,EAAEP,iBADlB;AAEE,MAAA,GAAG,EAAEO,KAFP;AAGE,MAAA,SAAS,EAAC;AAHZ,OAIGzD,WAAW,CAACwD,KAAD,EAAQC,KAAR,CAJd,CADF;AAQD,GATA,CADH,CAfF,CADF;AA8BD,CA/IM;AAiJP7D,cAAc,CAAC8D,WAAf,GAA6B,gBAA7B","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport Slider from 'react-slick'\nimport { Icon, RotationValues } from '@/components/Atoms/Icon'\nimport { CarouselProps } from './SimpleCarousel.interface'\nimport { StyledCarousel, StyledCarouselHandler, StyledNavArrow } from './SimpleCarousel.styled'\nimport { StyleguideArrow } from '@matthill8286/atomic-icon-library'\n\nexport const SimpleCarousel: React.FC<CarouselProps> = ({\n  arrowsSurfaceColor,\n  sliderSettings,\n  items,\n  renderSlide,\n  whiteDots,\n  brightArrows,\n  boxShadow,\n  hasOverflow,\n  hasPadding,\n  fixedWidth,\n  tileWidth,\n  className,\n  carouselRef,\n}): React.ReactElement => {\n  let firstClientX: number | 0\n\n  const sliderRef = React.useRef<Slider | null>(null)\n  const minValue = 20 // threshold\n\n  const rightDirection = (direction: number) => direction < -Math.abs(minValue)\n  const leftDirection = (direction: number) => direction > Math.abs(minValue)\n\n  const touchStart = (e: React.TouchEvent): void => {\n    e.preventDefault()\n    e.stopPropagation()\n    firstClientX = e.touches[0].clientX\n  }\n\n  const touchEnd = (e: React.TouchEvent): void => {\n    const clientX = Math.round(e.changedTouches[0].clientX - firstClientX)\n\n    if (rightDirection(clientX)) {\n      sliderRef.current?.slickNext()\n    } else if (leftDirection(clientX)) {\n      sliderRef.current?.slickPrev()\n    }\n  }\n\n  const renderArrows = (rotation: RotationValues): React.ReactElement => {\n    return (\n      <StyledNavArrow>\n        <Icon rotate={rotation} color=\"white\" padding=\"sm\">\n          <StyleguideArrow width={30} height={30} />\n        </Icon>\n      </StyledNavArrow>\n    )\n  }\n\n  const customPaging = () => <div />\n\n  const sliderConfig = () => {\n    return {\n      focusOnSelect: false,\n      nextArrow: renderArrows(0),\n      prevArrow: renderArrows(180),\n      customPaging,\n      responsive: [\n        {\n          breakpoint: 1007,\n          settings: {\n            swipe: false,\n            swipeToSlide: false,\n            draggable: false,\n            touchMove: false,\n          },\n        },\n        {\n          breakpoint: 1008,\n          settings: {\n            swipeToSlide: true,\n          },\n        },\n      ],\n      ...sliderSettings,\n      ref: e => {\n        sliderRef.current = e\n        if (carouselRef) {\n          carouselRef(e)\n        }\n      },\n    }\n  }\n\n  const [dragging, setDragging] = useState(false)\n\n  const handleBeforeChange = useCallback(() => {\n    setDragging(true)\n  }, [setDragging])\n\n  const handleAfterChange = useCallback(() => {\n    setDragging(false)\n  }, [setDragging])\n\n  const handleOnItemClick = useCallback(\n    e => {\n      if (dragging) {\n        e.stopPropagation()\n      }\n    },\n    [dragging]\n  )\n\n  const beforeChange = (currentSlide, nextSlide) => {\n    if (sliderSettings.beforeChange) sliderSettings.beforeChange(currentSlide, nextSlide)\n    handleBeforeChange()\n  }\n\n  const afterChange = currentSlide => {\n    if (sliderSettings.afterChange) sliderSettings.afterChange(currentSlide)\n    handleAfterChange()\n  }\n\n  return (\n    <StyledCarousel\n      arrowsSurfaceColor={arrowsSurfaceColor}\n      whiteDots={whiteDots}\n      fixedWidth={fixedWidth}\n      tileWidth={tileWidth}\n      brightArrows={brightArrows}\n      items={items}\n      sliderSettings={sliderSettings}\n      renderSlide={renderSlide}\n      boxShadow={boxShadow}\n      hasOverflow={hasOverflow}\n      hasPadding={hasPadding}\n      className={className}\n      onTouchStart={touchStart}\n      onTouchEnd={touchEnd}>\n      <Slider {...sliderConfig()} beforeChange={beforeChange} afterChange={afterChange}>\n        {items.map((entry, index) => {\n          return (\n            <StyledCarouselHandler\n              onClickCapture={handleOnItemClick}\n              key={index}\n              className=\"ewb-slider--element\">\n              {renderSlide(entry, index)}\n            </StyledCarouselHandler>\n          )\n        })}\n      </Slider>\n    </StyledCarousel>\n  )\n}\n\nSimpleCarousel.displayName = 'SimpleCarousel'\n"],"file":"SimpleCarousel.js"}