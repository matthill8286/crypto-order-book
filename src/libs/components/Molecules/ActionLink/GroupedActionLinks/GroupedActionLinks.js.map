{"version":3,"sources":["../../../../../src/components/Molecules/ActionLink/GroupedActionLinks/GroupedActionLinks.tsx"],"names":["React","useEffect","useRef","breakpoints","css","styled","useDropdownState","useWindowDimensions","StyledDropdown","ActionLink","getActionLinkType","StyledWrapper","div","theme","flexed","spacing","base","sm","color","grey2","StyleDropdownWrapper","StyledReference","GroupedActionLinks","links","fontSize","padding","testIdSuffix","dropdownFlexed","element","toggleDropdown","showDropdown","currentBreakpoint","breakpoint","isMobile","md","ref","onToggleDropdown","handleMenuItemClick","item","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ActionMenuContent","navActionList","map","quickAction","index","linkProp","id","branded","length","onClick","actionLabel"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { breakpoints, css, styled } from '@/styles'\nimport { useDropdownState, useWindowDimensions } from '@/components/Helper'\nimport { StyledDropdown } from '@/components/Molecules/DropdownButton'\nimport { PaddingMap, ThemeColors, ThemeFontSizes, VerticalPaddingMap } from '@/types'\nimport { ActionLink } from '../ActionLink'\nimport { QuickAction } from '../ActionLink.interface'\nimport { getActionLinkType } from '../helper'\n\nexport type GroupedActionLinksProps = {\n  links: QuickAction[]\n  fontSize: ThemeFontSizes\n  color: ThemeColors\n  flexed?: boolean\n  padding?: PaddingMap\n  dropdownFlexed?: boolean\n}\n\nconst StyledWrapper = styled.div<{\n  flexed: boolean\n  padding?: string | VerticalPaddingMap | undefined\n}>(\n  ({ theme, flexed }) => css`\n    list-style: none;\n    display: ${flexed ? `flex` : `inline-flex`};\n    margin-top: 0;\n    margin-right: ${!flexed ? theme.spacing.base.sm : 0};\n\n    :hover {\n      cursor: pointer;\n      ${flexed && `background: ${theme.color.grey2};`};\n    }\n  `\n)\n\nconst StyleDropdownWrapper = styled.div`\n  display: flex;\n`\n\nconst StyledReference = styled.div`\n  position: relative;\n  display: flex;\n  flex-grow: 1;\n\n  > a {\n    flex-grow: 1;\n  }\n`\n\nexport const GroupedActionLinks: ({\n  links,\n  fontSize,\n  color,\n  padding,\n  flexed,\n  dropdownFlexed,\n  testIdSuffix,\n}: {\n  links: QuickAction[]\n  fontSize: ThemeFontSizes\n  color: ThemeColors\n  padding?: PaddingMap\n  flexed?: boolean\n  dropdownFlexed?: boolean\n  testIdSuffix?: string\n}) => JSX.Element = ({\n  links,\n  fontSize,\n  color,\n  padding,\n  flexed = false,\n  testIdSuffix,\n  dropdownFlexed,\n}) => {\n  const { element, toggleDropdown, showDropdown } = useDropdownState<HTMLDivElement>()\n  const { breakpoint: currentBreakpoint } = useWindowDimensions()\n  const isMobile = currentBreakpoint < breakpoints.md\n  const ref = useRef<HTMLElement>(null)\n\n  const onToggleDropdown = () => {\n    toggleDropdown()\n  }\n\n  const handleMenuItemClick = item => {\n    if (showDropdown) {\n      toggleDropdown()\n    }\n  }\n\n  const handleClickOutside = (event: Event): void => {\n    if (!ref.current?.contains(event.target as Node) && showDropdown) {\n      toggleDropdown()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside)\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  })\n\n  const ActionMenuContent = ({ navActionList }) => (\n    <GroupedActionLinks\n      flexed={dropdownFlexed}\n      links={navActionList}\n      fontSize=\"sm\"\n      color=\"grey5\"\n      key=\"GroupedActionLinks\"\n      padding={padding}\n    />\n  )\n\n  return (\n    <>\n      {links.map((quickAction: QuickAction, index) => {\n        const linkProp = getActionLinkType(quickAction)\n        return (\n          <StyledWrapper\n            key={`Link-${index++}|${quickAction.id}`}\n            padding={padding}\n            flexed={flexed}>\n            <StyledReference ref={element} data-test={`grouped-action-links-${testIdSuffix}`}>\n              <ActionLink\n                key={quickAction.id}\n                inline={!flexed}\n                color={color}\n                fontSize={fontSize}\n                branded={quickAction.branded}\n                target={quickAction.target}\n                onClick={quickAction?.links?.length ? onToggleDropdown : quickAction.onClick}\n                {...(!quickAction?.links?.length ? linkProp : {})}>\n                {quickAction.actionLabel}\n              </ActionLink>\n              {quickAction?.links?.length > 0 && (\n                <StyleDropdownWrapper key={`InnerLink-${index++}|${quickAction.id}`}>\n                  <StyledDropdown isMobile={isMobile} surface=\"white\" showDropdown={showDropdown}>\n                    <ActionMenuContent navActionList={quickAction.links} />\n                  </StyledDropdown>\n                </StyleDropdownWrapper>\n              )}\n            </StyledReference>\n          </StyledWrapper>\n        )\n      })}\n    </>\n  )\n}\n"],"file":"GroupedActionLinks.js"}