{"version":3,"sources":["../../../../src/components/Molecules/FilterList/FilterList.tsx"],"names":["React","Selectable","StyledEntry","StyledEntryText","StyledSkeleton","FilterEntry","onChange","freeLabel","item","filterDisabled","onDisabledFiltersClick","id","filterType","selected","inputId","isCheck","value","name","Filters","props","items","loading","length","map","index"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT;AAEA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,cAAvC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAMwB;AAAA,MAL1CC,QAK0C,QAL1CA,QAK0C;AAAA,MAJ1CC,SAI0C,QAJ1CA,SAI0C;AAAA,MAH1CC,IAG0C,QAH1CA,IAG0C;AAAA,MAF1CC,cAE0C,QAF1CA,cAE0C;AAAA,MAD1CC,sBAC0C,QAD1CA,sBAC0C;AAAA,MAClCC,EADkC,GACLH,IADK,CAClCG,EADkC;AAAA,MAC9BC,UAD8B,GACLJ,IADK,CAC9BI,UAD8B;AAAA,MAClBC,QADkB,GACLL,IADK,CAClBK,QADkB;AAE1C,MAAMC,OAAO,aAAMF,UAAN,cAAoBD,EAApB,CAAb;AACA,SACE,oBAAC,WAAD;AACE,iBAAW,mBADb;AAEE,IAAA,OAAO,EAAED,sBAFX;AAGE,IAAA,UAAU,EAAE,CAAC,CAACD;AAHhB,KAIE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,YAAY,EAAEK,OAFhB;AAGE,IAAA,IAAI,EAAEA,OAHR;AAIE,IAAA,KAAK,EAAC,EAJR;AAKE,IAAA,KAAK,EAAEH,EALT;AAME,IAAA,SAAS,EAAE,CAAC,CAACE,QANf;AAOE,IAAA,KAAK,EAAEJ,cAAc,GAAG,UAAH,GAAgB,MAPvC;AAQE,IAAA,aAAa,EAAE,uBAACM,OAAD,EAAUC,KAAV;AAAA,aAAoBV,QAAQ,CAACS,OAAD,EAAUC,KAAV,CAA5B;AAAA;AARjB,KASE,oBAAC,eAAD,QAAkBR,IAAI,CAACS,IAAvB,CATF,CAJF,CADF;AAkBD,CA3BD;;AA6BA,IAAMC,OAA+B,GAAG,SAAlCA,OAAkC,CAACC,KAAD,EAAoD;AAAA,MAClFC,KADkF,GAC/DD,KAD+D,CAClFC,KADkF;AAAA,MAC3EC,OAD2E,GAC/DF,KAD+D,CAC3EE,OAD2E;AAG1F,SAAOA,OAAO,GACZ,oBAAC,cAAD,OADY,GAGZ,0CACGD,KAAK,IACJA,KAAK,CAACE,MAAN,GAAe,CADhB,IAECF,KAAK,CAACG,GAAN,CAAU,UAACf,IAAD,EAAmBgB,KAAnB;AAAA,WACR,oBAAC,WAAD,+CAAsBL,KAAtB,GAAgC;AAAEK,MAAAA,KAAK,EAAEA;AAAT,KAAhC;AAAoD,MAAA,IAAI,EAAEhB,IAA1D;AAAgE,MAAA,GAAG,EAAEgB;AAArE,OADQ;AAAA,GAAV,CAHJ,CAHF;AAWD,CAdD;;AAgBA,SAASN,OAAT,EAAkBd,cAAlB,EAAkCC,WAAlC","sourcesContent":["import * as React from 'react'\nimport { Selectable } from '@/components/Atoms/Selectable'\nimport { FilterEntryProps, FiltersProps, FilterType } from './FilterList.interface'\nimport { StyledEntry, StyledEntryText, StyledSkeleton } from './FilterList.styled'\n\nconst FilterEntry = ({\n  onChange,\n  freeLabel,\n  item,\n  filterDisabled,\n  onDisabledFiltersClick,\n}: FilterEntryProps): React.ReactElement => {\n  const { id, filterType, selected } = item\n  const inputId = `${filterType}-${id}`\n  return (\n    <StyledEntry\n      data-test={'ewb-filters-entry'}\n      onClick={onDisabledFiltersClick}\n      isDisabled={!!filterDisabled}>\n      <Selectable\n        type=\"checkbox\"\n        selectableId={inputId}\n        name={inputId}\n        label=\"\"\n        value={id}\n        isChecked={!!selected}\n        state={filterDisabled ? 'disabled' : 'idle'}\n        onChangeValue={(isCheck, value) => onChange(isCheck, value)}>\n        <StyledEntryText>{item.name}</StyledEntryText>\n      </Selectable>\n    </StyledEntry>\n  )\n}\n\nconst Filters: React.FC<FiltersProps> = (props: FiltersProps): React.ReactElement | null => {\n  const { items, loading } = props\n\n  return loading ? (\n    <StyledSkeleton />\n  ) : (\n    <>\n      {items &&\n        items.length > 0 &&\n        items.map((item: FilterType, index: number): React.ReactElement | null => (\n          <FilterEntry {...{ ...props, ...{ index: index } }} item={item} key={index} />\n        ))}\n    </>\n  )\n}\n\nexport { Filters, StyledSkeleton, FilterEntry }\n"],"file":"FilterList.js"}