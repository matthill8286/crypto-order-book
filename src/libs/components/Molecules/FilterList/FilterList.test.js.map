{"version":3,"sources":["../../../../src/components/Molecules/FilterList/FilterList.test.tsx"],"names":["React","mountWithTheme","props","servicesProps","FilterEntry","Filters","StyledSkeleton","addMockMethods","onChange","jest","fn","onIconModalOpen","describe","beforeEach","afterEach","resetAllMocks","test","wrapper","expect","toHaveLength","find","isEmptyRender","toBe","items","length","entryProps"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { mountWithTheme } from '@/testRenderer'\nimport { props as servicesProps } from './FilterList.mocks'\nimport { FilterEntry, Filters, StyledSkeleton } from '@/components/Molecules/FilterList/FilterList'\nimport { FiltersProps, FilterType } from '@/components/Molecules/FilterList/FilterList.interface'\n\nconst addMockMethods = (props: FiltersProps): FiltersProps => {\n  return {\n    ...props,\n    onChange: jest.fn(),\n    onIconModalOpen: jest.fn(),\n  }\n}\n\ndescribe('<Filters />', () => {\n  let props: FiltersProps\n\n  beforeEach(() => {\n    props = addMockMethods(servicesProps)\n  })\n\n  afterEach(() => {\n    jest.resetAllMocks()\n  })\n\n  test('Renders without crashing', () => {\n    const wrapper = mountWithTheme(<Filters {...props} />)\n    expect(wrapper).toHaveLength(1)\n  })\n\n  test('Renders a Skeleton if loading', () => {\n    const wrapper = mountWithTheme(<Filters {...props} loading />)\n\n    expect(wrapper.find(StyledSkeleton)).toHaveLength(1)\n    expect(wrapper.find(FilterEntry)).toHaveLength(0)\n    expect(wrapper.isEmptyRender()).toBe(false)\n  })\n\n  test('Renders null if no items', () => {\n    const wrapper = mountWithTheme(<Filters {...props} items={[]} />)\n    expect(wrapper.isEmptyRender()).toBe(true)\n  })\n\n  test('Renders the correct number of items', () => {\n    const wrapper = mountWithTheme(<Filters {...props} />)\n\n    expect(wrapper.find('StyledSkeleton')).toHaveLength(0)\n    expect(wrapper.isEmptyRender()).toBe(false)\n    expect(wrapper.find('FilterEntry')).toHaveLength(props.items.length)\n  })\n\n  describe('<StyledSkeleton />', () => {\n    test('Renders without crashing', () => {\n      const wrapper = mountWithTheme(<StyledSkeleton />)\n      expect(wrapper).toHaveLength(1)\n    })\n  })\n\n  describe('<FilterEntry />', () => {\n    let entryProps: FilterType\n\n    beforeEach(() => {\n      entryProps = {\n        ...props.items[1],\n      }\n    })\n\n    test('Renders without crashing', () => {\n      const wrapper = mountWithTheme(<FilterEntry {...props} item={entryProps} />)\n      expect(wrapper).toHaveLength(1)\n    })\n\n    test('Adds a data-test attribute', () => {\n      const wrapper = mountWithTheme(<FilterEntry {...props} item={entryProps} />)\n      expect(wrapper.find('[data-test=\"ewb-filters-entry\"]')).toHaveLength(2)\n    })\n  })\n})\n"],"file":"FilterList.test.js"}