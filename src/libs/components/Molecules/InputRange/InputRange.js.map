{"version":3,"sources":["../../../../src/components/Molecules/InputRange/InputRange.tsx"],"names":["React","useState","StyledInputRange","StyledInputRangeBubble","StyledInputRangeBubbleContainer","StyledInputRangeBubblePosition","StyledInputRangeBubbleTypo","StyledInputRangeContainer","StyledInputRangeMarkLine","StyledInputRangeMarks","StyledInputRangeMarkTypo","StyledInputRangeThumb","InputRange","props","name","step","markAmount","min","max","value","allowMoreThanMax","withBubble","showMarks","onChange","isSliding","setIsSliding","percentage","onChangeHandler","ev","calcIntervalLabel","interval","Math","round","left","parseFloat","Array","from","length","_"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,gBADF,EAEEC,sBAFF,EAGEC,+BAHF,EAIEC,8BAJF,EAKEC,0BALF,EAMEC,yBANF,EAOEC,wBAPF,EAQEC,qBARF,EASEC,wBATF,EAUEC,qBAVF;AAwBA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,CAAAC,KAAK,EAAI;AAAA,oBAYxDA,KAZwD,CAE1DC,IAF0D;AAAA,MAE1DA,IAF0D,4BAEnD,aAFmD;AAAA,oBAYxDD,KAZwD,CAG1DE,IAH0D;AAAA,MAG1DA,IAH0D,4BAGnD,KAHmD;AAAA,0BAYxDF,KAZwD,CAI1DG,UAJ0D;AAAA,MAI1DA,UAJ0D,kCAI7C,CAJ6C;AAAA,mBAYxDH,KAZwD,CAK1DI,GAL0D;AAAA,MAK1DA,GAL0D,2BAKpD,GALoD;AAAA,mBAYxDJ,KAZwD,CAM1DK,GAN0D;AAAA,MAM1DA,GAN0D,2BAMpD,GANoD;AAAA,qBAYxDL,KAZwD,CAO1DM,KAP0D;AAAA,MAO1DA,KAP0D,6BAOlD,GAPkD;AAAA,8BAYxDN,KAZwD,CAQ1DO,gBAR0D;AAAA,MAQ1DA,gBAR0D,sCAQvC,KARuC;AAAA,0BAYxDP,KAZwD,CAS1DQ,UAT0D;AAAA,MAS1DA,UAT0D,kCAS7C,IAT6C;AAAA,yBAYxDR,KAZwD,CAU1DS,SAV0D;AAAA,MAU1DA,SAV0D,iCAU9C,KAV8C;AAAA,MAW1DC,QAX0D,GAYxDV,KAZwD,CAW1DU,QAX0D;;AAAA,kBAc1BtB,QAAQ,CAAC,KAAD,CAdkB;AAAA;AAAA,MAcrDuB,SAdqD;AAAA,MAc1CC,YAd0C;;AAe5D,MAAMC,UAAU,GAAI,CAAC,CAACP,KAAD,GAAS,CAACF,GAAX,IAAkB,GAAnB,IAA2B,CAACC,GAAD,GAAO,CAACD,GAAnC,CAAnB;;AAEA,MAAMU,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD,EAA6C;AACnE,QAAIL,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACK,EAAD,CAAR;AACD;AACF,GAJD;;AAMA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD;AAAA,WACxBC,IAAI,CAACC,KAAL,CAAWF,QAAQ,IAAI,CAAC,CAACZ,GAAD,GAAO,CAACD,GAAT,IAAgBD,UAApB,CAAR,GAA0C,CAACC,GAAtD,CADwB;AAAA,GAA1B;;AAGA,SACE,oBAAC,yBAAD,QACGI,UAAU,IACT,oBAAC,+BAAD,QACE,oBAAC,8BAAD;AAAgC,IAAA,KAAK,EAAE;AAAEY,MAAAA,IAAI,YAAKP,UAAL;AAAN;AAAvC,KACE,oBAAC,sBAAD;AAAwB,IAAA,SAAS,EAAEF;AAAnC,KACE,oBAAC,0BAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,UAAU,EAAC,SAFb;AAGE,IAAA,UAAU,EAAE,CAHd;AAIE,IAAA,GAAG,EAAC,MAJN;AAKE,IAAA,MAAM,EAAC;AALT,KAMGO,IAAI,CAACC,KAAL,CAAWE,UAAU,CAACf,KAAD,CAAV,GAA8B,EAAzC,CANH,CADF,CADF,CADF,CAFJ,EAiBE,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAE;AAAEc,MAAAA,IAAI,YAAKP,UAAL;AAAN;AAA9B,IAjBF,EAkBE,oBAAC,gBAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAEZ,IAFR;AAGE,IAAA,IAAI,EAAEA,IAHR;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,GAAG,EAAEE,GALP;AAME,IAAA,GAAG,EAAEC,GANP;AAOE,IAAA,KAAK,EAAEC,KAPT;AAQE,IAAA,WAAW,EAAE;AAAA,aAAMM,YAAY,CAAC,IAAD,CAAlB;AAAA,KARf;AASE,IAAA,YAAY,EAAE;AAAA,aAAMA,YAAY,CAAC,IAAD,CAAlB;AAAA,KAThB;AAUE,IAAA,SAAS,EAAE;AAAA,aAAMA,YAAY,CAAC,KAAD,CAAlB;AAAA,KAVb;AAWE,IAAA,UAAU,EAAE;AAAA,aAAMA,YAAY,CAAC,KAAD,CAAlB;AAAA,KAXd;AAYE,IAAA,QAAQ,EAAEE;AAZZ,IAlBF,EAgCGL,SAAS,IAAIN,UAAU,GAAG,CAA1B,IACC,oBAAC,qBAAD,QACGmB,KAAK,CAACC,IAAN,CAAW;AAAEC,IAAAA,MAAM,EAAErB,UAAU,GAAG;AAAvB,GAAX,EAAuC,UAACsB,CAAD,EAAIR,QAAJ;AAAA,WACtC,oBAAC,wBAAD;AACE,MAAA,GAAG,EAAEA,QADP;AAEE,MAAA,KAAK,EAAEA,QAFT;AAGE,MAAA,UAAU,EAAEd,UAHd;AAIE,MAAA,IAAI,EAAG,CAACa,iBAAiB,CAACC,QAAD,CAAjB,GAA8B,CAACb,GAAhC,IAAuC,GAAxC,IAAgD,CAACC,GAAD,GAAO,CAACD,GAAxD;AAJR,OAKE,oBAAC,wBAAD;AAA0B,MAAA,MAAM,EAAC,UAAjC;AAA4C,MAAA,QAAQ,EAAC,IAArD;AAA0D,MAAA,UAAU,EAAE;AAAtE,OACGY,iBAAiB,CAACC,QAAD,CADpB,OACiCV,gBAAgB,IAAIU,QAAQ,KAAKd,UAAjC,IAA+C,GADhF,CALF,CADsC;AAAA,GAAvC,CADH,CAjCJ,CADF;AAkDD,CA5EM","sourcesContent":["import React, { useState } from 'react'\nimport {\n  StyledInputRange,\n  StyledInputRangeBubble,\n  StyledInputRangeBubbleContainer,\n  StyledInputRangeBubblePosition,\n  StyledInputRangeBubbleTypo,\n  StyledInputRangeContainer,\n  StyledInputRangeMarkLine,\n  StyledInputRangeMarks,\n  StyledInputRangeMarkTypo,\n  StyledInputRangeThumb,\n} from './InputRange.styled'\n\nexport type InputRangeProps = Pick<\n  JSX.IntrinsicElements['input'],\n  'name' | 'step' | 'min' | 'max' | 'value'\n> & {\n  markAmount?: number\n  allowMoreThanMax?: boolean\n  withBubble?: boolean\n  showMarks?: boolean\n  onChange?: React.ChangeEventHandler<HTMLInputElement>\n}\n\nexport const InputRange: React.FC<InputRangeProps> = props => {\n  const {\n    name = 'input-range',\n    step = '0.1',\n    markAmount = 0,\n    min = '0',\n    max = '1',\n    value = '1',\n    allowMoreThanMax = false,\n    withBubble = true,\n    showMarks = false,\n    onChange,\n  } = props\n\n  const [isSliding, setIsSliding] = useState(false)\n  const percentage = ((+value - +min) * 100) / (+max - +min)\n\n  const onChangeHandler = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(ev)\n    }\n  }\n\n  const calcIntervalLabel = (interval: number): number =>\n    Math.round(interval * ((+max - +min) / markAmount) + +min)\n\n  return (\n    <StyledInputRangeContainer>\n      {withBubble && (\n        <StyledInputRangeBubbleContainer>\n          <StyledInputRangeBubblePosition style={{ left: `${percentage}%` }}>\n            <StyledInputRangeBubble isSliding={isSliding}>\n              <StyledInputRangeBubbleTypo\n                color=\"primary\"\n                fontFamily=\"default\"\n                limitLines={1}\n                tag=\"span\"\n                weight=\"regular\">\n                {Math.round(parseFloat(value as string) * 10)}\n              </StyledInputRangeBubbleTypo>\n            </StyledInputRangeBubble>\n          </StyledInputRangeBubblePosition>\n        </StyledInputRangeBubbleContainer>\n      )}\n      <StyledInputRangeThumb style={{ left: `${percentage}%` }} />\n      <StyledInputRange\n        type=\"range\"\n        name={name}\n        list={name}\n        step={step}\n        min={min}\n        max={max}\n        value={value}\n        onMouseDown={() => setIsSliding(true)}\n        onTouchStart={() => setIsSliding(true)}\n        onMouseUp={() => setIsSliding(false)}\n        onTouchEnd={() => setIsSliding(false)}\n        onChange={onChangeHandler}\n      />\n      {showMarks && markAmount > 0 && (\n        <StyledInputRangeMarks>\n          {Array.from({ length: markAmount + 1 }, (_, interval) => (\n            <StyledInputRangeMarkLine\n              key={interval}\n              index={interval}\n              markAmount={markAmount}\n              left={((calcIntervalLabel(interval) - +min) * 100) / (+max - +min)}>\n              <StyledInputRangeMarkTypo weight=\"semibold\" fontSize=\"lg\" limitLines={1}>\n                {calcIntervalLabel(interval)} {allowMoreThanMax && interval === markAmount && '+'}\n              </StyledInputRangeMarkTypo>\n            </StyledInputRangeMarkLine>\n          ))}\n        </StyledInputRangeMarks>\n      )}\n    </StyledInputRangeContainer>\n  )\n}\n"],"file":"InputRange.js"}