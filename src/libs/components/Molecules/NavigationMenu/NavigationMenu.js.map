{"version":3,"sources":["../../../../src/components/Molecules/NavigationMenu/NavigationMenu.tsx"],"names":["React","useEffect","useRef","useDropdownState","StyledContainer","StyledDropdown","NavigationButton","NavigationMenuList","CopyText","breakpoints","styled","useWindowDimensions","StyledCopy","theme","NavigationMenu","className","navActionList","button","testIdSuffix","extendedNavigationHandler","iconAsMainUi","initialLink","copyColor","pictureSrc","element","toggleDropdown","showDropdown","currentBreakpoint","breakpoint","isMobile","md","ref","onToggleDropdown","handleMenuItemClick","item","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","myNavigationContent"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useRef } from 'react'\nimport { useDropdownState } from '@/components/Helper/useDropdownState'\nimport {\n  StyledContainer,\n  StyledDropdown,\n} from '@/components/Molecules/DropdownButton/DropdownButton'\nimport { NavigationButton } from './NavigationButton'\nimport {\n  NavigationButtonType,\n  NavigationMenuList,\n  NavigationMenuListProps,\n} from './NavigationMenuList'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { breakpoints, styled } from '@/styles'\nimport { ThemeColors } from '@/types'\nimport { useWindowDimensions } from '@/components/Helper'\n\nexport interface NavigationMenuProps {\n  className?: string\n  index?: number\n  button?: NavigationButtonType | undefined\n  testIdSuffix?: string\n  iconAsMainUi?: boolean\n  initialLink?: string\n  pictureSrc?: string\n  copyColor?: ThemeColors\n  navActionList: NavigationMenuListProps['navActionList']\n  extendedNavigationHandler?: (item?: NavigationMenuListProps) => void\n}\n\nexport const StyledCopy = styled(CopyText)`\n  ${({ theme }) => `\n    display: flex;\n    width: 100%;\n\n    :hover {\n        cursor: pointer;\n    }\n  `}\n`\n\nexport const NavigationMenu: FC<NavigationMenuProps> = ({\n  className,\n  navActionList = [],\n  button,\n  testIdSuffix,\n  extendedNavigationHandler,\n  iconAsMainUi = true,\n  initialLink,\n  copyColor,\n  pictureSrc,\n}) => {\n  const { element, toggleDropdown, showDropdown } = useDropdownState<HTMLDivElement>()\n  const { breakpoint: currentBreakpoint } = useWindowDimensions()\n  const isMobile = currentBreakpoint < breakpoints.md\n\n  const ref = useRef<HTMLElement>(null)\n\n  const onToggleDropdown = () => {\n    toggleDropdown()\n  }\n\n  const handleMenuItemClick = item => {\n    if (showDropdown) {\n      toggleDropdown()\n    }\n\n    if (extendedNavigationHandler) {\n      extendedNavigationHandler(item)\n    }\n  }\n\n  const handleClickOutside = (event: Event): void => {\n    if (!ref.current?.contains(event.target as Node) && showDropdown) {\n      toggleDropdown()\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside)\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n    }\n  })\n\n  const myNavigationContent = (\n    <NavigationMenuList\n      navActionList={navActionList}\n      actionButton={button}\n      flexed\n      padding=\"sm\"\n      onClick={handleMenuItemClick}\n    />\n  )\n\n  return (\n    <StyledContainer\n      className={className}\n      ref={element}\n      data-test={`navigation-dropdown-${testIdSuffix}`}>\n      {iconAsMainUi ? (\n        <NavigationButton\n          height={40}\n          width={40}\n          data-test=\"ewb-app-header-navigation-button\"\n          onClick={onToggleDropdown}\n          isOpen={showDropdown}\n          pictureSrc={pictureSrc}\n        />\n      ) : (\n        <StyledCopy\n          color={copyColor}\n          fontSize=\"sm\"\n          margin=\"auto\"\n          data-test=\"ewb-header-navigation-link\"\n          onClick={onToggleDropdown}>\n          {initialLink}\n        </StyledCopy>\n      )}\n      <StyledDropdown isMobile={isMobile} surface=\"white\" showDropdown={showDropdown}>\n        {myNavigationContent}\n      </StyledDropdown>\n    </StyledContainer>\n  )\n}\n"],"file":"NavigationMenu.js"}