{"version":3,"sources":["../../../../src/components/Helper/useDropdownState/useDropdownState.ts"],"names":["useEffect","useRef","useState","useDropdownState","initial","showDropdown","setShowDropdown","toggleDropdown","element","handleClick","event","current","target","Node","contains","document","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAYA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAA4C;AAAA,MAApBC,OAAoB,uEAAV,KAAU;;AAAA,kBAClCF,QAAQ,CAACE,OAAD,CAD0B;AAAA;AAAA,MACnEC,YADmE;AAAA,MACrDC,eADqD;;AAE1E,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,WAAMD,eAAe,CAAC,CAACD,YAAF,CAArB;AAAA,GAAvB;;AAEA,MAAMG,OAAO,GAAGP,MAAM,CAAI,IAAJ,CAAtB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMS,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAuB;AACzC,UAAI,CAACL,YAAL,EAAmB;AACjB;AACD;;AAED,UACEG,OAAO,CAACG,OAAR,IACAD,KAAK,CAACE,MAAN,YAAwBC,IADxB,IAEAL,OAAO,CAACG,OAAR,CAAgBG,QAAhB,CAAyBJ,KAAK,CAACE,MAA/B,CAHF,EAIE;AACA;AACD;;AAEDN,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAdD;;AAkBAS,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCP,WAAnC,EAAgD,IAAhD;AACA,WAAO;AAAA,aAAMM,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCR,WAAtC,CAAN;AAAA,KAAP;AACD,GArBQ,EAqBN,CAACD,OAAO,CAACG,OAAT,EAAkBN,YAAlB,EAAgCC,eAAhC,CArBM,CAAT;AAuBA,SAAO;AACLD,IAAAA,YAAY,EAAZA,YADK;AAELE,IAAAA,cAAc,EAAdA,cAFK;AAGLC,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD,CAlCM","sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\n/**\n * Provides the current state of a dropdown, a function to toggle it and a\n * reference container.\n *\n * Usage: call the hook in your FunctionComponent and provide an element type\n * as generic argument. E.g: useDropdownState<HTMLDivElement>()\n * Then attach the ref container to the DOM element of your dropdown-component.\n * E.g.: <div ref={element}>...\n */\n\nexport const useDropdownState = <T extends HTMLElement>(initial = false) => {\n  const [showDropdown, setShowDropdown] = useState(initial)\n  const toggleDropdown = () => setShowDropdown(!showDropdown)\n\n  const element = useRef<T>(null)\n\n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      if (!showDropdown) {\n        return\n      }\n      // If click is inside the ref element, do nothing\n      if (\n        element.current &&\n        event.target instanceof Node &&\n        element.current.contains(event.target)\n      ) {\n        return\n      }\n      // Else, close dropdown\n      setShowDropdown(false)\n    }\n    // Use capture phase. Reason: There can be cases (e.g. Header search box) where\n    // the click target (clear button) gets removed from the DOM before this handler\n    // here is called which would wrongly close the dropdown.\n    document.addEventListener('click', handleClick, true)\n    return () => document.removeEventListener('click', handleClick)\n  }, [element.current, showDropdown, setShowDropdown])\n\n  return {\n    showDropdown,\n    toggleDropdown,\n    element,\n  }\n}\n"],"file":"useDropdownState.js"}