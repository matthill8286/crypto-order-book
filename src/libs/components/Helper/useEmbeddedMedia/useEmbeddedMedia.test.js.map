{"version":3,"sources":["../../../../src/components/Helper/useEmbeddedMedia/useEmbeddedMedia.test.ts"],"names":["renderHook","newAssetMocks","useEmbeddedMedia","describe","asset","beforeEach","test","embedVideoURL","result","expect","current","toBe","image"],"mappings":"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","sourcesContent":["import { renderHook } from '@testing-library/react-hooks'\nimport { newAssetMocks } from '../../Organisms/AssetTile'\nimport { useEmbeddedMedia } from './useEmbeddedMedia'\nimport { act } from '@testing-library/react'\n\ndescribe('useEmbeddedMedia hook', () => {\n  let asset\n  beforeEach(() => {\n    asset = {\n      ...newAssetMocks[0],\n    }\n  })\n\n  describe('with embedding turned on', () => {\n    test('will return valid Youtube links', () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({\n          ...asset,\n          embedVideoURL: 'https://www.youtube.com/watch?v=5fI3zz2cp3k',\n        })\n      )\n      expect(result.current).toBe('https://www.youtube.com/embed/5fI3zz2cp3k?showinfo=0')\n    })\n\n    test('will also parse Youtu.be links', () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({ ...asset, embedVideoURL: 'https://youtu.be/5fI3zz2cp3k' })\n      )\n      expect(result.current).toBe('https://www.youtube.com/embed/5fI3zz2cp3k?showinfo=0')\n    })\n\n    test('will return valid Vimeo links', () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({ ...asset, embedVideoURL: 'https://vimeo.com/242805528' })\n      )\n      expect(result.current).toBe(\n        'https://player.vimeo.com/video/242805528?title=false&texttrack=false&quality=240p&byline=false'\n      )\n    })\n\n    test('will not mangle well-formed Vimeo links', () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({ ...asset, embedVideoURL: 'https://player.vimeo.com/video/518498094' })\n      )\n      expect(result.current).toBe(\n        'https://player.vimeo.com/video/518498094?title=false&texttrack=false&quality=240p&byline=false'\n      )\n    })\n\n    test('will return valid Vimeo event links', () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({\n          ...asset,\n          embedVideoURL: 'https://vimeo.com/event/428541',\n        })\n      )\n      expect(result.current).toBe('https://vimeo.com/event/428541')\n    })\n\n    test('will return valid Ted Talk links', () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({\n          ...asset,\n          embedVideoURL:\n            'https://www.ted.com/talks/adam_grant_the_surprising_habits_of_original_thinkers',\n        })\n      )\n      expect(result.current).toBe(\n        'https://embed.ted.com/talks/adam_grant_the_surprising_habits_of_original_thinkers'\n      )\n    })\n\n    test('will return only https:// links', () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({ ...asset, embedVideoURL: 'http://vimeo.com/event/428541/embed' })\n      )\n      expect(result.current).toBe('https://vimeo.com/event/428541/embed')\n    })\n\n    test('will add https:// if missing', () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({ ...asset, embedVideoURL: 'vimeo.com/event/428541/embed' })\n      )\n      expect(result.current).toBe('https://vimeo.com/event/428541/embed')\n    })\n\n    test(\"will return image url when embedVideoURL isn't valid\", () => {\n      const { result } = renderHook(() =>\n        useEmbeddedMedia({\n          ...asset,\n          embedVideoURL: '',\n        })\n      )\n      expect(result.current).toBe(asset.image)\n    })\n  })\n})\n"],"file":"useEmbeddedMedia.test.js"}