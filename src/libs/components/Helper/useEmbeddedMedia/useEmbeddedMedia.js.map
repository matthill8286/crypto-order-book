{"version":3,"sources":["../../../../src/components/Helper/useEmbeddedMedia/useEmbeddedMedia.ts"],"names":["withTernary","asset","conditionA","embedVideoURL","image","addHttps","url","test","split","join","concat","addEmbeddedMedia","canBeEmbedded","sanitisedUrl","useEmbeddedMedia"],"mappings":"AAEA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAiBC,KAAjB;AAAA,MAAGC,UAAH,QAAGA,UAAH;AAAA,SACzBA,UAAU,GAAGD,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEE,aAAV,GAA0BF,KAA1B,aAA0BA,KAA1B,uBAA0BA,KAAK,CAAEG,KADlB;AAAA,CAApB;;AAGP,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAgC;AAC/C,MAAI,aAAaC,IAAb,CAAkBD,GAAlB,CAAJ,EAA4B;AAC1B,WAAOA,GAAG,CAACE,KAAJ,CAAU,YAAV,EAAwBC,IAAxB,CAA6B,UAA7B,CAAP;AACD;;AACD,MAAI,CAAC,QAAQF,IAAR,CAAaD,GAAb,CAAL,EAAwB;AACtB,WAAO,WAAWI,MAAX,CAAkBJ,GAAlB,CAAP;AACD;;AACD,SAAO,IAAP;AACD,CARD;;AAUA,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACV,KAAD,EAAgCW,aAAhC,EAAmE;AAAA;;AAC1F,MAAMN,GAAW,GAAGN,WAAW,CAC7B;AACEE,IAAAA,UAAU,EAAEU;AADd,GAD6B,EAI7BX,KAJ6B,CAA/B;AAOA,MAAMY,YAAY,gBAAGR,QAAQ,CAACC,GAAD,CAAX,iDAAoBA,GAAtC;;AAGA,MAAI,gBAAgBC,IAAhB,CAAqBM,YAArB,CAAJ,EAAwC;AACtC,WAAOA,YAAY,CAACL,KAAb,CAAmB,YAAnB,EAAiCC,IAAjC,CAAsC,QAAtC,IAAkD,aAAzD;AACD;;AAED,MAAI,aAAaF,IAAb,CAAkBM,YAAlB,CAAJ,EAAqC;AACnC,mDAAwCA,YAAY,CAACL,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAxC;AACD;;AAGD,MAAI,+BAA+BD,IAA/B,CAAoCM,YAApC,CAAJ,EAAuD;AACrD,qBAAUA,YAAV;AACD;;AAGD,MAAI,yBAAyBN,IAAzB,CAA8BM,YAA9B,CAAJ,EAAiD;AAC/C,oDACEA,YAAY,CAACL,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CADF;AAGD;;AAED,MAAI,qBAAqBD,IAArB,CAA0BM,YAA1B,CAAJ,EAA6C;AAC3C,WAAOA,YAAP;AACD;;AAED,MAAI,YAAYN,IAAZ,CAAiBM,YAAjB,CAAJ,EAAoC;AAClC,WAAOA,YAAY,CAACL,KAAb,CAAmB,MAAnB,EAA2BC,IAA3B,CAAgC,OAAhC,CAAP;AACD;;AAED,SAAOI,YAAP;AACD,CAxCD;;AA0CA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACb,KAAD;AAAA,SAC9BU,gBAAgB,CAACV,KAAD,EAAQ,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,aAAP,MAAyB,EAAjC,CADc;AAAA,CAAzB","sourcesContent":["import { Asset } from '@/types'\n\nexport const withTernary = ({ conditionA }, asset) =>\n  conditionA ? asset?.embedVideoURL : asset?.image\n\nconst addHttps = (url: string): string | null => {\n  if (/http:\\/\\//i.test(url)) {\n    return url.split(/http:\\/\\//i).join('https://')\n  }\n  if (!/http/i.test(url)) {\n    return 'https://'.concat(url)\n  }\n  return null\n}\n\nconst addEmbeddedMedia = (asset: Asset | Partial<Asset>, canBeEmbedded: boolean): string => {\n  const url: string = withTernary(\n    {\n      conditionA: canBeEmbedded,\n    },\n    asset as Asset\n  )\n\n  const sanitisedUrl = addHttps(url) ?? url\n\n  // Youtube come as youtube.com/watch?v= and need to be youtube.com/embed/\n  if (/youtube\\.com/i.test(sanitisedUrl)) {\n    return sanitisedUrl.split(/watch\\?v=/i).join('embed/') + '?showinfo=0'\n  }\n  // Youtube come as youtu.be/ and need to be youtube.com/embed/\n  if (/youtu\\.be/i.test(sanitisedUrl)) {\n    return `https://www.youtube.com/embed/${sanitisedUrl.split('/')[3]}?showinfo=0`\n  }\n\n  // don't mangle well-formed Vimeo URLs\n  if (/player\\.vimeo\\.com\\/video\\//i.test(sanitisedUrl)) {\n    return `${sanitisedUrl}?title=false&texttrack=false&quality=240p&byline=false`\n  }\n\n  // Vimeo links need to be player.vimeo.com/video/\n  if (/vimeo\\.com\\/(?!event)/i.test(sanitisedUrl)) {\n    return `https://player.vimeo.com/video/${\n      sanitisedUrl.split('/')[3]\n    }?title=false&texttrack=false&quality=240p&byline=false`\n  }\n  // but avoid changing 'event' links as these are streams\n  if (/vimeo\\.com\\/event/i.test(sanitisedUrl)) {\n    return sanitisedUrl\n  }\n  // Ted links come as www.ted.com and need to be embed.ted.com\n  if (/ted\\.com/i.test(sanitisedUrl)) {\n    return sanitisedUrl.split(/www/i).join('embed')\n  }\n\n  return sanitisedUrl\n}\n\nexport const useEmbeddedMedia = (asset: Asset | Partial<Asset>): string | null =>\n  addEmbeddedMedia(asset, asset?.embedVideoURL !== '')\n"],"file":"useEmbeddedMedia.js"}