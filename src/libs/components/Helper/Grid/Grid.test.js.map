{"version":3,"sources":["../../../../src/components/Helper/Grid/Grid.test.tsx"],"names":["React","renderWithTheme","Cell","Offset","Grid","Row","describe","components","it","tree","expect","toMatchSnapshot","Object","keys","forEach","key","Component","tagName"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT;AACA,SAASC,IAAT,EAAeC,MAAf;AACA,SAASC,IAAT;AACA,SAASC,GAAT;AAEAC,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAG7B,MAAMC,UAAU,GAAG;AAAEH,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,GAAG,EAAHA,GAAR;AAAaH,IAAAA,IAAI,EAAJA,IAAb;AAAmBC,IAAAA,MAAM,EAANA;AAAnB,GAAnB;AAEAG,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BE,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpC,UAAMC,IAAI,GAAGR,eAAe,CAAC,oBAAC,IAAD,OAAD,CAA5B;AACAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KAHC,CAAF;AAKAH,IAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAM;AACjD,UAAMC,IAAI,GAAGR,eAAe,CAC1B,oBAAC,IAAD,QACE,oBAAC,GAAD,QACE,oBAAC,IAAD,OADF,EAEE,oBAAC,IAAD,OAFF,EAGE,oBAAC,IAAD,OAHF,EAIE,oBAAC,IAAD,OAJF,CADF,EAOE,oBAAC,GAAD,QACE,oBAAC,IAAD,OADF,EAEE,oBAAC,IAAD,OAFF,EAGE,oBAAC,IAAD,OAHF,EAIE,oBAAC,IAAD,OAJF,CAPF,CAD0B,CAA5B;AAiBAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KAnBC,CAAF;AAoBD,GA1BO,CAAR;AA4BAL,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BE,IAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACrE,UAAMC,IAAI,GAAGR,eAAe,CAC1B,oBAAC,IAAD;AAAM,QAAA,MAAM,EAAE,CAAd;AAAiB,QAAA,MAAM,EAAE,CAAzB;AAA4B,QAAA,MAAM,EAAE,CAApC;AAAuC,QAAA,MAAM,EAAE,EAA/C;AAAmD,QAAA,MAAM,EAAE;AAA3D,QAD0B,CAA5B;AAIAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KANC,CAAF;AAQAH,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpC,UAAMC,IAAI,GAAGR,eAAe,CAAC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAb,QAAD,CAA5B;AACAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KAHC,CAAF;AAKAH,IAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/D,UAAMC,IAAI,GAAGR,eAAe,CAAC,oBAAC,IAAD;AAAM,QAAA,MAAM,EAAE,CAAd;AAAiB,QAAA,MAAM,EAAE,CAAzB;AAA4B,QAAA,MAAM,EAAE,CAApC;AAAuC,QAAA,MAAM,EAAE,CAA/C;AAAkD,QAAA,MAAM,EAAE;AAA1D,QAAD,CAA5B;AAEAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KAJC,CAAF;AAKD,GAnBO,CAAR;AAqBAL,EAAAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCE,IAAAA,EAAE,CAAC,4DAAD,EAA+D,YAAM;AACrE,UAAMC,IAAI,GAAGR,eAAe,CAC1B,oBAAC,IAAD;AAAM,QAAA,MAAM,EAAE,CAAd;AAAiB,QAAA,MAAM,EAAE,CAAzB;AAA4B,QAAA,MAAM,EAAE,CAApC;AAAuC,QAAA,MAAM,EAAE,EAA/C;AAAmD,QAAA,MAAM,EAAE;AAA3D,QAD0B,CAA5B;AAIAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KANC,CAAF;AAQAH,IAAAA,EAAE,CAAC,2BAAD,EAA8B,YAAM;AACpC,UAAMC,IAAI,GAAGR,eAAe,CAAC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAb,QAAD,CAA5B;AACAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KAHC,CAAF;AAKAH,IAAAA,EAAE,CAAC,sDAAD,EAAyD,YAAM;AAC/D,UAAMC,IAAI,GAAGR,eAAe,CAAC,oBAAC,IAAD;AAAM,QAAA,MAAM,EAAE,CAAd;AAAiB,QAAA,MAAM,EAAE,CAAzB;AAA4B,QAAA,MAAM,EAAE,CAApC;AAAuC,QAAA,MAAM,EAAE,CAA/C;AAAkD,QAAA,MAAM,EAAE;AAA1D,QAAD,CAA5B;AAEAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KAJC,CAAF;AAMAH,IAAAA,EAAE,CAAC,yDAAD,EAA4D,YAAM;AAClE,UAAMC,IAAI,GAAGR,eAAe,CAAC,oBAAC,MAAD,OAAD,CAA5B;AAEAS,MAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,KAJC,CAAF;AAKD,GAzBO,CAAR;AA2BAL,EAAAA,QAAQ,CAAC,2BAAD,EAA8B,YAAM;AAC1CA,IAAAA,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AACjCM,MAAAA,MAAM,CAACC,IAAP,CAAYN,UAAZ,EAAwBO,OAAxB,CAAgC,UAAAC,GAAG,EAAI;AACrCP,QAAAA,EAAE,mBAAYO,GAAZ,4BAAwC,YAAM;AAC9C,cAAMC,SAAS,GAAGT,UAAU,CAACQ,GAAD,CAA5B;AACA,cAAME,OAAO,GAAG,SAAhB;AAEA,cAAMR,IAAI,GAAGR,eAAe,CAAC,oBAAC,SAAD;AAAW,YAAA,GAAG,EAAEgB;AAAhB,YAAD,CAA5B;AACAP,UAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,SANC,CAAF;AAOD,OARD;AASD,KAVO,CAAR;AAWD,GAZO,CAAR;AAaD,CA9FO,CAAR","sourcesContent":["import * as React from 'react'\nimport { renderWithTheme } from '@/testRenderer'\nimport { Cell, Offset } from './Cell'\nimport { Grid } from './Grid'\nimport { Row } from './Row'\n\ndescribe('MaterialGrid', () => {\n  // list of grid components,\n  // useful for iterating over common properties in test for each component\n  const components = { Grid, Row, Cell, Offset }\n\n  describe('Grid component', () => {\n    it('renders a div per default', () => {\n      const tree = renderWithTheme(<Grid />)\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('renders with Rows and Cells (children)', () => {\n      const tree = renderWithTheme(\n        <Grid>\n          <Row>\n            <Cell />\n            <Cell />\n            <Cell />\n            <Cell />\n          </Row>\n          <Row>\n            <Cell />\n            <Cell />\n            <Cell />\n            <Cell />\n          </Row>\n        </Grid>\n      )\n\n      expect(tree).toMatchSnapshot()\n    })\n  })\n\n  describe('Cell component', () => {\n    it('renders with custom responsive column count for view ports', () => {\n      const tree = renderWithTheme(\n        <Cell colsXs={4} colsSm={8} colsMd={8} colsLg={12} colsXl={12} />\n      )\n\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('renders with column order', () => {\n      const tree = renderWithTheme(<Cell order={2} />)\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('renders hidden with view port columns count set to 0', () => {\n      const tree = renderWithTheme(<Cell colsXs={0} colsSm={0} colsMd={0} colsLg={0} colsXl={0} />)\n\n      expect(tree).toMatchSnapshot()\n    })\n  })\n\n  describe('Offset component', () => {\n    it('renders with custom responsive column count for view ports', () => {\n      const tree = renderWithTheme(\n        <Cell colsXs={4} colsSm={8} colsMd={8} colsLg={12} colsXl={12} />\n      )\n\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('renders with column order', () => {\n      const tree = renderWithTheme(<Cell order={2} />)\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('renders hidden with view port columns count set to 0', () => {\n      const tree = renderWithTheme(<Cell colsXs={0} colsSm={0} colsMd={0} colsLg={0} colsXl={0} />)\n\n      expect(tree).toMatchSnapshot()\n    })\n\n    it('renders hidden with no values, because of default props', () => {\n      const tree = renderWithTheme(<Offset />)\n\n      expect(tree).toMatchSnapshot()\n    })\n  })\n\n  describe('additional customizations', () => {\n    describe('with custom tags', () => {\n      Object.keys(components).forEach(key => {\n        it(`renders ${key} with custom tag name`, () => {\n          const Component = components[key]\n          const tagName = 'section'\n\n          const tree = renderWithTheme(<Component tag={tagName} />)\n          expect(tree).toMatchSnapshot()\n        })\n      })\n    })\n  })\n})\n"],"file":"Grid.test.js"}