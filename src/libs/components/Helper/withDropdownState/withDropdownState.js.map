{"version":3,"sources":["../../../../src/components/Helper/withDropdownState/withDropdownState.tsx"],"names":["React","useEffect","useRef","useState","withDropdownState","WrappedComponent","displayName","WrapperComponent","props","wrapperRef","showDropdown","setShowDropdown","toggleDropdown","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAQA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,gBAAD,QAAyD;AAAA,8BAApCC,WAAoC;AAAA,MAApCA,WAAoC,iCAAtB,eAAsB;;AACxF,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAA0B;AACjD,QAAMC,UAAU,GAAGP,MAAM,CAAiB,IAAjB,CAAzB;;AADiD,oBAETC,QAAQ,CAAU,KAAV,CAFC;AAAA;AAAA,QAE1CO,YAF0C;AAAA,QAE5BC,eAF4B;;AAIjD,QAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAY;AACjCD,MAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,KAFD;;AAIA,QAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAwB;AAAA;;AACjD,UAAI,yBAACL,UAAU,CAACM,OAAZ,gDAAC,oBAAoBC,QAApB,CAA6BF,KAAK,CAACG,MAAnC,CAAD,CAAJ,EAAyD;AACvDN,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KAJD;;AAMAV,IAAAA,SAAS,CAAC,YAAM;AACdiB,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,kBAAnC,EAAuD,IAAvD;AAEA,aAAO,YAAM;AACXK,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCP,kBAAtC,EAA0D,IAA1D;AACD,OAFD;AAGD,KANQ,CAAT;AAQA,WACE;AAAK,MAAA,GAAG,EAAEJ;AAAV,OACE,oBAAC,gBAAD;AAAkB,MAAA,YAAY,EAAEC,YAAhC;AAA8C,MAAA,cAAc,EAAEE;AAA9D,OAAkFJ,KAAlF,EADF,CADF;AAKD,GA3BD;;AA6BAD,EAAAA,gBAAgB,CAACD,WAAjB,GAA+BA,WAA/B;AAEA,SAAOC,gBAAP;AACD,CAjCM","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { DropdownProps } from '@/components/Molecules/Dropdown/Dropdown.interface'\n\nexport interface DropDownEnhancementProps {\n  showDropdown: boolean\n  toggleDropdown: () => void\n}\n\nexport const withDropdownState = (WrappedComponent, { displayName = 'ComponentName' }) => {\n  const WrapperComponent = (props: DropdownProps) => {\n    const wrapperRef = useRef<HTMLDivElement>(null)\n    const [showDropdown, setShowDropdown] = useState<boolean>(false)\n\n    const toggleDropdown = (): void => {\n      setShowDropdown(!showDropdown)\n    }\n\n    const handleClickOutside = (event: Event): void => {\n      if (!wrapperRef.current?.contains(event.target as Node)) {\n        setShowDropdown(false)\n      }\n    }\n\n    useEffect(() => {\n      document.addEventListener('click', handleClickOutside, true)\n\n      return () => {\n        document.removeEventListener('click', handleClickOutside, true)\n      }\n    })\n\n    return (\n      <div ref={wrapperRef}>\n        <WrappedComponent showDropdown={showDropdown} toggleDropdown={toggleDropdown} {...props} />\n      </div>\n    )\n  }\n\n  WrapperComponent.displayName = displayName\n\n  return WrapperComponent\n}\n"],"file":"withDropdownState.js"}