{"version":3,"sources":["../../../../src/components/Atoms/Input/InputIcon.tsx"],"names":["React","Icon","defaultSpacing","styled","IconClose","IconEdit","IconButton","StyledIconWrapper","div","theme","spacing","base","sm","color","black","mapStateToIcon","default","valid","error","mapStateToIconColor","InputIcon","props","icon","iconSize","height","width","iconState","onClick","iconLabel","iconComp"],"mappings":";;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAASC,IAAT;AACA,SAASC,cAAT;AACA,SAASC,MAAT;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,mCAApC;AAGA,SAASC,UAAT;AAKA,IAAMC,iBAAiB,GAAGJ,MAAM,CAACK,GAAV;AAAA;AAAA;AAAA,oKAEd;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmBC,EAAlC;AAAA,CAFc,EAGZ;AAAA,MAAGH,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,OAAN,CAAcC,IAAd,CAAmBC,EAAlC;AAAA,CAHY,EAWZ,MAAMV,cAXM,EAkBP;AAAA,MAAGO,KAAH,SAAGA,KAAH;AAAA,SAAeA,KAAK,CAACI,KAAN,CAAYC,KAA3B;AAAA,CAlBO,CAAvB;AA4BA,IAAMC,cAA8B,GAAG;AACrCC,EAAAA,OAAO,EAAE,gCAD4B;AAErCC,EAAAA,KAAK,EAAE,oBAAC,SAAD,OAF8B;AAGrCC,EAAAA,KAAK,EAAE,oBAAC,QAAD;AAH8B,CAAvC;AAUA,IAAMC,mBAAwC,GAAG;AAC/CH,EAAAA,OAAO,EAAE,OADsC;AAE/CC,EAAAA,KAAK,EAAE,SAFwC;AAG/CC,EAAAA,KAAK,EAAE;AAHwC,CAAjD;AAcA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAA2B;AAAA,MAC1CC,IAD0C,GACoCD,KADpC,CAC1CC,IAD0C;AAAA,wBACoCD,KADpC,CACpCE,QADoC;AAAA,MACpCA,QADoC,gCACzB;AAAEC,IAAAA,MAAM,EAAE,EAAV;AAAcC,IAAAA,KAAK,EAAE;AAArB,GADyB;AAAA,MACEC,SADF,GACoCL,KADpC,CACEK,SADF;AAAA,MACaC,OADb,GACoCN,KADpC,CACaM,OADb;AAAA,MACsBC,SADtB,GACoCP,KADpC,CACsBO,SADtB;AAElD,MAAMf,KAAK,GAAGM,mBAAmB,CAACO,SAAD,CAAjC;AACA,MAAMG,QAAQ,GACZ,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,MAAT;AAAgB,IAAA,KAAK,EAAEhB;AAAvB,KAAkCU,QAAlC,GACGD,IAAI,GAAGA,IAAH,GAAUP,cAAc,CAACW,SAAD,CAD/B,CADF;AAMA,SACE,oBAAC,iBAAD,QACGC,OAAO,GACN,oBAAC,UAAD;AACE,kBAAYC,SADd;AAEE,IAAA,MAAM,EAAEL,QAAQ,CAACC,MAFnB;AAGE,IAAA,WAAW,MAHb;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,KAAK,EAAEJ,QAAQ,CAACE;AALlB,KAMGI,QANH,CADM,GAUNA,QAXJ,CADF;AAgBD,CAzBM","sourcesContent":["import React, { ReactNode } from 'react'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { defaultSpacing } from '@/styles'\nimport { styled } from '@/styles/styled'\nimport { IconClose, IconEdit } from '@matthill8286/atomic-icon-library'\nimport { ThemeColors } from '@/types'\nimport { TranslatedText } from '@/types/global'\nimport { IconButton } from '../Button/IconButton'\nimport { IconSize } from './Input.interface'\n\nexport type InputIconState = 'default' | 'valid' | 'error'\n\nconst StyledIconWrapper = styled.div`\n  position: absolute;\n  top: ${({ theme }) => theme.spacing.base.sm};\n  right: ${({ theme }) => theme.spacing.base.sm};\n  height: 100%;\n\n  > button {\n    background: none;\n    border: none;\n    margin: 0;\n    padding: 0;\n    top: ${3.5 * defaultSpacing}px;\n\n    /* TODO - a11y: Remove the following once there are focus styles from UX */\n    outline: none;\n\n    &:focus {\n      svg {\n        fill: ${({ theme }) => theme.color.black};\n      }\n    }\n  }\n`\n\ntype MapStateToIcon = {\n  [key in InputIconState]: JSX.Element\n}\n\nconst mapStateToIcon: MapStateToIcon = {\n  default: <div />,\n  valid: <IconClose />,\n  error: <IconEdit />,\n}\n\ntype MapStateToIconColor = {\n  [key in InputIconState]: ThemeColors\n}\n\nconst mapStateToIconColor: MapStateToIconColor = {\n  default: 'grey3',\n  valid: 'success',\n  error: 'error',\n}\n\nexport interface InputIconProps {\n  icon?: ReactNode\n  iconLabel?: TranslatedText // TODO - a11y: make required once teams have been informed that we need a label\n  iconSize?: IconSize\n  iconState: InputIconState\n  onClick?: React.MouseEventHandler<HTMLDivElement> | React.MouseEventHandler<HTMLElement>\n}\n\nexport const InputIcon = (props: InputIconProps) => {\n  const { icon, iconSize = { height: 20, width: 20 }, iconState, onClick, iconLabel } = props\n  const color = mapStateToIconColor[iconState]\n  const iconComp = (\n    <Icon as=\"span\" color={color} {...iconSize}>\n      {icon ? icon : mapStateToIcon[iconState]}\n    </Icon>\n  )\n\n  return (\n    <StyledIconWrapper>\n      {onClick ? (\n        <IconButton\n          aria-label={iconLabel}\n          height={iconSize.height}\n          isInputIcon\n          onClick={onClick as React.MouseEventHandler<HTMLElement>}\n          width={iconSize.width}>\n          {iconComp}\n        </IconButton>\n      ) : (\n        iconComp\n      )}\n    </StyledIconWrapper>\n  )\n}\n"],"file":"InputIcon.js"}