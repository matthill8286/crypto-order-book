{"version":3,"sources":["../../../../src/components/Atoms/Selectable/Selectable.tsx"],"names":["React","StyleguideCheckmarkSquare","Icon","CopyText","StyledButtonLabel","StyledButtonText","StyledCopyText","StyledFocusedIndicator","StyledIcon","StyledLabel","StyledNativeSelectable","StyledRadioMark","StyledSelectableButton","StyledSelectableButtonContentWrapper","StyledSelectableContent","StyledSelectableContentWrapper","Selectable","children","displayType","errorMessage","icon","isChecked","label","selectableId","state","onChangeValue","selectableSize","type","value","name","otherProps","onInputChange","event","target","checked","isCheckedValue","showError","SelectableRadio","e","SelectableButton","top","right","bottom","left"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { StyleguideCheckmarkSquare } from '@matthill8286/atomic-icon-library'\nimport { Icon } from '../Icon'\nimport { CopyText } from '../Typography'\nimport { SelectableProps } from './Selectable.interface'\nimport {\n  StyledButtonLabel,\n  StyledButtonText,\n  StyledCopyText,\n  StyledFocusedIndicator,\n  StyledIcon,\n  StyledLabel,\n  StyledNativeSelectable,\n  StyledRadioMark,\n  StyledSelectableButton,\n  StyledSelectableButtonContentWrapper,\n  StyledSelectableContent,\n  StyledSelectableContentWrapper,\n} from './Selectable.styled'\n\nexport const Selectable: React.FC<SelectableProps> = ({\n  children,\n  displayType,\n  errorMessage,\n  icon,\n  isChecked,\n  label,\n  selectableId,\n  state = 'idle',\n  onChangeValue,\n  selectableSize = 'large',\n  type,\n  value = '',\n  name,\n  ...otherProps\n}) => {\n  const onInputChange = event => {\n    onChangeValue(event.target.checked, event.target.value)\n  }\n\n  const isCheckedValue = isChecked && { checked: isChecked }\n  const showError = state === 'error' && errorMessage\n\n  const SelectableRadio = (\n    <StyledLabel\n      key={selectableId + isChecked}\n      selectableSize={selectableSize}\n      state={state}\n      type={type}\n      htmlFor={selectableId}\n      {...otherProps}>\n      <StyledNativeSelectable\n        id={selectableId}\n        {...isCheckedValue}\n        type={type}\n        name={name}\n        value={value}\n        state={state}\n        selectableSize={selectableSize}\n        onChange={e => onInputChange(e)}\n      />\n      {type === 'checkbox' && (\n        <StyledIcon selectableSize={selectableSize} state={state}>\n          <StyleguideCheckmarkSquare fill={'primary'} />\n        </StyledIcon>\n      )}\n      {type === 'radio' && <StyledRadioMark selectableSize={selectableSize} state={state} />}\n      <StyledSelectableContentWrapper>\n        <StyledCopyText\n          padding=\"0 0 0 xs\"\n          fontSize={selectableSize === 'large' ? 'sm' : 'xs'}\n          lineHeight={selectableSize === 'large' ? 'sm' : 'xs'}>\n          {children || label}\n        </StyledCopyText>\n        {showError && (\n          <CopyText tag=\"div\" color=\"error\" fontSize=\"xxs\" margin=\"xs 0 0 0\" padding=\"0 0 0 xs\">\n            {errorMessage}\n          </CopyText>\n        )}\n      </StyledSelectableContentWrapper>\n      <StyledFocusedIndicator />\n    </StyledLabel>\n  )\n\n  const SelectableButton = (\n    <StyledButtonLabel key={selectableId + isChecked} htmlFor={selectableId}>\n      <StyledSelectableButton\n        id={selectableId}\n        {...isCheckedValue}\n        type={type}\n        name={name}\n        value={value}\n        onChange={e => onInputChange(e)}\n      />\n      <StyledSelectableButtonContentWrapper\n        elevation={isChecked ? 1 : 0}\n        shape=\"rounded-small\"\n        surface={isChecked ? 'selected' : 'white'}\n        padding={{ top: 'xs', right: 'sm', bottom: 'xs', left: 'sm' }}>\n        <StyledSelectableContent>\n          <Icon\n            height={selectableSize === 'large' ? 14 : 12}\n            width={selectableSize === 'large' ? 14 : 12}>\n            {icon}\n          </Icon>\n          <StyledButtonText\n            bold={isChecked}\n            color={isChecked ? 'black' : 'grey4'}\n            fontSize={selectableSize === 'large' ? 'sm' : 'xs'}\n            lineHeight={selectableSize === 'large' ? 'sm' : 'xs'}>\n            {children || label}\n          </StyledButtonText>\n        </StyledSelectableContent>\n      </StyledSelectableButtonContentWrapper>\n      <StyledFocusedIndicator />\n    </StyledButtonLabel>\n  )\n\n  return displayType === 'button' ? SelectableButton : SelectableRadio\n}\n"],"file":"Selectable.js"}