{"version":3,"sources":["../../../../src/components/Atoms/Card/Card.test.tsx"],"names":["React","media","renderWithTheme","Card","handlePadding","describe","cardContent","it","tree","expect","toMatchSnapshot","bottomLeft","bottomRight","topLeft","topRight","top","bottom","left","right","id","name","themeSpacingBase","xxs","xs","sm","md","lg","xl","xxl","xxxl","xxxxl","result","toBe","padding","mobile","tablet","desktop"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { media } from '@/styles'\nimport { renderWithTheme } from '@/testRenderer'\nimport { Padding, VerticalPaddingMap } from '@/types/theme'\nimport { Card } from './CardV2'\nimport { handlePadding } from './Card.styled'\n\ndescribe('Card', () => {\n  const cardContent = 'Card '\n\n  it('Should render a Card', () => {\n    const tree = renderWithTheme(<Card elevation={0}>{cardContent}</Card>)\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with shape', () => {\n    const tree = renderWithTheme(\n      <Card elevation={0} shape=\"sharp\">\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with hover', () => {\n    const tree = renderWithTheme(\n      <Card elevation={0} elevationHover={3}>\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with no border on right', () => {\n    const tree = renderWithTheme(\n      <Card elevation={0} noBorder=\"right\">\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with custom shape', () => {\n    const tree = renderWithTheme(\n      <Card\n        elevation={0}\n        shape={{\n          bottomLeft: 'sharp',\n          bottomRight: 'sharp',\n          topLeft: 'rounded-small',\n          topRight: 'rounded-small',\n        }}>\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with padding, noBorder, shape, surface', () => {\n    const tree = renderWithTheme(\n      <Card\n        padding={{ top: 'lg', bottom: 'lg', left: 'md', right: 'md' }}\n        elevation={0}\n        elevationHover={0}\n        noBorder={[]}\n        shape={{\n          bottomLeft: 'sharp',\n          bottomRight: 'sharp',\n          topLeft: 'rounded-small',\n          topRight: 'rounded-small',\n        }}\n        surface={'white'}>\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with elevation', () => {\n    const tree = renderWithTheme(<Card elevation={1}>{cardContent}</Card>)\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with surface', () => {\n    const tree = renderWithTheme(\n      <Card elevation={0} surface=\"white\">\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with padding', () => {\n    const tree = renderWithTheme(\n      <Card elevation={0} padding=\"xxs\">\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with custom padding', () => {\n    const tree = renderWithTheme(\n      <Card elevation={0} padding={{ top: 'md', bottom: 'md', left: 'md', right: 'md' }}>\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with badges', () => {\n    const tree = renderWithTheme(\n      <Card\n        elevation={0}\n        badges={[\n          { id: 0, name: 'New' },\n          { id: 1, name: '100% Free' },\n        ]}\n        badgeActionType=\"prominent\">\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a Card with badges and hover effect', () => {\n    const tree = renderWithTheme(\n      <Card\n        elevation={0}\n        elevationHover={4}\n        shape=\"rounded-small\"\n        display=\"flex\"\n        badges={[\n          { id: 0, name: 'New' },\n          { id: 1, name: '100% Free' },\n        ]}\n        badgeActionType=\"prominent\">\n        {cardContent}\n      </Card>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n})\n\nconst themeSpacingBase = {\n  xxs: '4px',\n  xs: '8px',\n  sm: '16px',\n  md: '24px',\n  lg: '32px',\n  xl: '40px',\n  xxl: '48px',\n  xxxl: '56px',\n  xxxxl: '64px',\n}\n\ndescribe('handlePadding(...)', () => {\n  it('should return the padding for all sides (sm)', () => {\n    const result = handlePadding(themeSpacingBase, 'sm')\n\n    expect(result).toBe('padding: 16px;')\n  })\n\n  it('should return the padding only for top (sm)', () => {\n    const padding = { top: 'sm' } as Padding\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe('padding-top: 16px;')\n  })\n\n  it('should return the padding only for right (lg)', () => {\n    const padding = { right: 'lg' } as Padding\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe('padding-right: 32px;')\n  })\n\n  it('should return the padding only for bottom (xxs)', () => {\n    const padding = { bottom: 'xxs' } as Padding\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe('padding-bottom: 4px;')\n  })\n\n  it('should return the padding only for left (xl)', () => {\n    const padding = { left: 'xl' } as Padding\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe('padding-left: 40px;')\n  })\n\n  it('should return the padding only for left and top (xs, xxl)', () => {\n    const padding = { left: 'xs', top: 'xxl' } as Padding\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe('padding-top: 48px;padding-left: 8px;')\n  })\n\n  it('should return separate paddings for all sides (top: md, right: sm, bottom: xs, left: md)', () => {\n    const padding: Padding = {\n      left: 'md',\n      right: 'sm',\n      top: 'md',\n      bottom: 'xs',\n    }\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(\n      'padding-top: 24px;padding-right: 16px;padding-bottom: 8px;padding-left: 24px;'\n    )\n  })\n\n  it('should return a padding media-query for all sides (mobile|sm)', () => {\n    const padding: VerticalPaddingMap = { mobile: 'sm' }\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(media.mobile + ' {padding: 16px; };')\n  })\n\n  it('should return a padding media-query for all sides (tablet|md)', () => {\n    const padding: VerticalPaddingMap = { tablet: 'md' }\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(media.tablet + ' {padding: 24px; };')\n  })\n\n  it('should return a padding media-query for all sides (desktop|lg)', () => {\n    const padding: VerticalPaddingMap = { desktop: 'lg' }\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(media.desktop + ' {padding: 32px; };')\n  })\n\n  it('should return a padding media-query for all sides (mobile|xs & desktop|xl)', () => {\n    const padding: VerticalPaddingMap = { mobile: 'xs', desktop: 'xl' }\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(media.mobile + ' {padding: 8px; };' + media.desktop + ' {padding: 40px; };')\n  })\n\n  it('should return a padding media-query for all sides (mobile|tablet|desktop)', () => {\n    const padding: VerticalPaddingMap = {\n      mobile: 'xxs',\n      tablet: 'xl',\n      desktop: 'xxl',\n    }\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(\n      media.mobile +\n        ' {padding: 4px; };' +\n        media.tablet +\n        ' {padding: 40px; };' +\n        media.desktop +\n        ' {padding: 48px; };'\n    )\n  })\n\n  it('should return a padding media-query for all sides but override top', () => {\n    const padding = {\n      mobile: 'xxs',\n      tablet: 'xl',\n      desktop: 'xxl',\n      top: 'sm',\n    } as VerticalPaddingMap\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(\n      media.mobile +\n        ' {padding: 4px; padding-top: 16px;};' +\n        media.tablet +\n        ' {padding: 40px; padding-top: 16px;};' +\n        media.desktop +\n        ' {padding: 48px; padding-top: 16px;};'\n    )\n  })\n\n  it('should return a padding media-query for all sides but override left', () => {\n    const padding = {\n      mobile: 'xxs',\n      tablet: 'xl',\n      desktop: 'xxl',\n      left: 'md',\n    } as VerticalPaddingMap\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(\n      media.mobile +\n        ' {padding: 4px; padding-left: 24px;};' +\n        media.tablet +\n        ' {padding: 40px; padding-left: 24px;};' +\n        media.desktop +\n        ' {padding: 48px; padding-left: 24px;};'\n    )\n  })\n\n  it('should return a padding media-query for all sides but override right and bottom', () => {\n    const padding = {\n      mobile: 'xxs',\n      tablet: 'xl',\n      desktop: 'xxl',\n      right: 'sm',\n      bottom: 'md',\n    } as VerticalPaddingMap\n    const result = handlePadding(themeSpacingBase, padding)\n\n    expect(result).toBe(\n      media.mobile +\n        ' {padding: 4px; padding-right: 16px;padding-bottom: 24px;};' +\n        media.tablet +\n        ' {padding: 40px; padding-right: 16px;padding-bottom: 24px;};' +\n        media.desktop +\n        ' {padding: 48px; padding-right: 16px;padding-bottom: 24px;};'\n    )\n  })\n})\n"],"file":"Card.test.js"}