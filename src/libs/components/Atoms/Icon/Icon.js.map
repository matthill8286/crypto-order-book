{"version":3,"sources":["../../../../src/components/Atoms/Icon/Icon.tsx"],"names":["padding","css","styled","DefaultSize","Icon","div","theme","color","width","height","rotate","animate","display","alignSelf","withBorder","grey2","spacing","base","xs","getSizeInPx","size","themeSizes"],"mappings":"AACA,SAASA,OAAT;AACA,SAASC,GAAT,EAAcC,MAAd;AAkBA,IAAMC,WAAW,GAAG,MAApB;AAEA,OAAO,IAAMC,IAAI,GAAGF,MAAM,CAACG,GAAV;AAAA;AAAA;AAAA,GACf;AAAA,MACEC,KADF,QACEA,KADF;AAAA,MAEEC,KAFF,QAEEA,KAFF;AAAA,MAGEC,KAHF,QAGEA,KAHF;AAAA,MAIEC,MAJF,QAIEA,MAJF;AAAA,yBAKEC,MALF;AAAA,MAKEA,MALF,4BAKW,CALX;AAAA,0BAMEC,OANF;AAAA,MAMEA,OANF,6BAMY,KANZ;AAAA,0BAOEC,OAPF;AAAA,MAOEA,OAPF,6BAOY,MAPZ;AAAA,MAQEC,SARF,QAQEA,SARF;AAAA,MASEC,UATF,QASEA,UATF;AAAA,SAUMb,GAVN,uHAWIW,OAAO,uBAAgBA,OAAhB,MAXX,EAYIZ,OAZJ,EAaIa,SAAS,0BAAmBA,SAAnB,MAbb,EAcIC,UAAU,gCACWR,KAAK,CAACC,KAAN,CAAYQ,KADvB,8DAGGT,KAAK,CAACU,OAAN,CAAcC,IAAd,CAAmBC,EAHtB,MAdd,EAmBaV,KAAK,GAAGW,WAAW,CAACX,KAAD,EAAQF,KAAK,CAACU,OAAN,CAAcC,IAAtB,CAAd,GAA4Cd,WAnB9D,EAoBcM,MAAM,GAAGU,WAAW,CAACV,MAAD,EAASH,KAAK,CAACU,OAAN,CAAcC,IAAvB,CAAd,GAA6Cd,WApBjE,EAqBwBO,MArBxB,EAsBYH,KAAK,GAAGD,KAAK,CAACC,KAAN,CAAYA,KAAZ,CAAH,GAAwB,cAtBzC,EAuBMI,OAAO,IACPV,GADO,4CAvBb,EA8BYM,KAAK,GAAGD,KAAK,CAACC,KAAN,CAAYA,KAAZ,CAAH,GAAwB,cA9BzC;AAAA,CADe,CAAV;;AAoCP,IAAMY,WAAW,GAAG,SAAdA,WAAc,CAClBC,IADkB,EAElBC,UAFkB,EAGP;AACX,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B,qBAAUA,IAAV;AACD,GAFD,MAEO;AACL,WAAOC,UAAU,CAACD,IAAD,CAAV,cAAuBjB,WAAvB,OAAP;AACD;AACF,CATD","sourcesContent":["import { FlexAlignItemsOptions } from '@/components/Helper/FlexBox'\nimport { padding } from '@/styles/sc-shared-functions'\nimport { css, styled } from '@/styles/styled'\nimport { PaddingProps, Size, ThemeColors } from '@/types'\n\nexport type RotationValues = 0 | 45 | 90 | 180 | 270 | -45 | -90 | -180 | -270\n\nexport interface IconProps {\n  rotate?: RotationValues\n  color?: ThemeColors\n  withBorder?: boolean\n  padding?: PaddingProps['padding']\n\n  width?: number | keyof Omit<Size, 'xxxs'>\n  height?: number | keyof Omit<Size, 'xxxs'>\n  animate?: boolean\n  display?: string\n  alignSelf?: FlexAlignItemsOptions\n}\n\nconst DefaultSize = '25px'\n\nexport const Icon = styled.div<IconProps>(\n  ({\n    theme,\n    color,\n    width,\n    height,\n    rotate = 0,\n    animate = false,\n    display = 'flex',\n    alignSelf,\n    withBorder,\n  }) => css`\n    ${display && `display: ${display};`};\n    ${padding};\n    ${alignSelf && `align-self: ${alignSelf};`};\n    ${withBorder &&\n      `border: 2px solid ${theme.color.grey2};\n        border-radius: 50%;\n        padding: ${theme.spacing.base.xs};`}\n    svg {\n      width: ${width ? getSizeInPx(width, theme.spacing.base) : DefaultSize};\n      height: ${height ? getSizeInPx(height, theme.spacing.base) : DefaultSize};\n      transform: rotate(${rotate}deg);\n      fill: ${color ? theme.color[color] : 'currentColor'};\n      ${animate &&\n        css`\n          transition: transform 0.3s ease-in-out;\n        `};\n    }\n    svg g,\n    svg p {\n      fill: ${color ? theme.color[color] : 'currentColor'};\n    }\n  `\n)\n\nconst getSizeInPx = (\n  size: number | keyof Omit<Size, 'xxxs'>,\n  themeSizes: Omit<Size, 'xxxs'>\n): string => {\n  if (typeof size === 'number') {\n    return `${size}px`\n  } else {\n    return themeSizes[size] || `${DefaultSize}px`\n  }\n}\n"],"file":"Icon.js"}