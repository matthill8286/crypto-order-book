{"version":3,"sources":["../../../../src/components/Atoms/Link/Link.tsx"],"names":["React","smoothScrollWithEvent","StyledIconWrapper","StyledLinkAnchor","StyledLinkButton","StyledLinkRouter","Text","Link","bold","branded","children","className","cursor","color","decorationColor","disabled","fontSize","href","iconLeft","iconRight","inline","lineHeight","onClick","onMouseDown","scale","scrollOffset","smooth","target","title","to","underline","isGrouped","ariaLabel","otherProps","isSmall","isButton","isRouterLink","styleProps","hasIconLeft","hasIconRight","isBold","isDisabled","isInline","isLarge","isUnderlined","onClickWrapper","event","e","getChildren","linkType","rel"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { smoothScrollWithEvent } from '@/utils'\nimport { LinkProps, StyledLinkProps } from './Link.interface'\nimport {\n  StyledIconWrapper,\n  StyledLinkAnchor,\n  StyledLinkButton,\n  StyledLinkRouter,\n  Text,\n} from './Link.styled'\n\nexport const Link: React.FC<LinkProps> = ({\n  bold = false,\n  branded = false,\n  children,\n  className,\n  cursor,\n  color = 'grey4',\n  decorationColor,\n  disabled = false,\n  fontSize,\n  href,\n  iconLeft,\n  iconRight,\n  inline = false,\n  lineHeight,\n  onClick,\n  onMouseDown,\n  scale = 'small',\n  scrollOffset = 0,\n  smooth = false,\n  target = '_self',\n  title,\n  to,\n  underline = true,\n  isGrouped = false,\n  ariaLabel,\n  ...otherProps\n}): JSX.Element => {\n  const isSmall = scale === 'small'\n  const isButton = onClick && !href && !to\n  const isRouterLink = to\n\n  const styleProps: StyledLinkProps = {\n    color: decorationColor || color,\n    cursor,\n    hasIconLeft: !!iconLeft,\n    hasIconRight: !!iconRight,\n    isBold: bold,\n    isDisabled: disabled,\n    isInline: inline,\n    isLarge: scale === 'large',\n    isSmall,\n    isUnderlined: underline,\n    isGrouped,\n  }\n  let onClickWrapper\n\n  if (smooth) {\n    onClickWrapper = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n      try {\n        smoothScrollWithEvent(event, scrollOffset)\n      } catch (e) {\n        //failsafe\n      }\n      if ('function' == typeof onClick) {\n        return onClick(event)\n      }\n    }\n  } else {\n    onClickWrapper = onClick\n  }\n\n  const getChildren = (): JSX.Element => (\n    <>\n      {iconLeft && <StyledIconWrapper {...styleProps}>{iconLeft}</StyledIconWrapper>}\n      {typeof children === 'string' ? (\n        <Text\n          tag=\"span\"\n          fontSize={fontSize || (isSmall ? 'xs' : 'sm')}\n          lineHeight={lineHeight}\n          bold={bold}\n          color={color}\n          isBranded={branded}\n          isInline={inline}\n          aria-label={ariaLabel}>\n          {children}\n        </Text>\n      ) : (\n        children\n      )}\n      {iconRight && <StyledIconWrapper {...styleProps}>{iconRight}</StyledIconWrapper>}\n    </>\n  )\n\n  const linkType = (): JSX.Element => {\n    if (isButton) {\n      return (\n        <StyledLinkButton\n          className={className}\n          {...(disabled ? {} : { onClick: onClickWrapper })}\n          {...styleProps}\n          {...otherProps}>\n          {getChildren()}\n        </StyledLinkButton>\n      )\n    }\n\n    if (isRouterLink) {\n      return (\n        <StyledLinkRouter\n          onClick={onClickWrapper}\n          to={to}\n          className={className}\n          {...styleProps}\n          data-test=\"ewb-router-link\">\n          {getChildren()}\n        </StyledLinkRouter>\n      )\n    }\n\n    return (\n      <StyledLinkAnchor\n        className={className}\n        target={target}\n        rel={target === '_blank' ? 'noopener noreferrer' : otherProps.rel}\n        {...(disabled ? {} : { href, onClick: onClickWrapper })}\n        {...styleProps}\n        {...otherProps}>\n        {getChildren()}\n      </StyledLinkAnchor>\n    )\n  }\n\n  return linkType()\n}\n"],"file":"Link.js"}