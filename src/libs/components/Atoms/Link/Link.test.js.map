{"version":3,"sources":["../../../../src/components/Atoms/Link/Link.test.tsx"],"names":["React","Icon","StyleguideArrow","mountWithTheme","mountWithThemeAndRouter","renderWithTheme","renderWithThemeAndRouter","Link","describe","onClick","jest","fn","linkContent","linkHref","it","button","tree","expect","find","toHaveLength","toMatchSnapshot","anchor","routerLink"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Icon } from '@/components/Atoms/Icon'\nimport { StyleguideArrow } from '@matthill8286/atomic-icon-library'\nimport {\n  mountWithTheme,\n  mountWithThemeAndRouter,\n  renderWithTheme,\n  renderWithThemeAndRouter,\n} from '@/testRenderer'\nimport { Link } from './Link'\n\ndescribe('<Link /> component', () => {\n  const onClick = jest.fn()\n  const linkContent = 'Button'\n  const linkHref = 'https://google.com/?how-to-write-tests'\n\n  it('should render a button tag against the \"onClick\" attribute', () => {\n    const button = renderWithTheme(<Link onClick={onClick}>{linkContent}</Link>)\n    const tree = mountWithTheme(<Link onClick={onClick}>{linkContent}</Link>)\n    expect(tree.find('button')).toHaveLength(1)\n    expect(button).toMatchSnapshot()\n  })\n\n  it('should not render a button tag against the \"href\" attribute', () => {\n    const tree = mountWithTheme(<Link href={linkHref}>{linkContent}</Link>)\n    expect(tree.find('button')).toHaveLength(0)\n  })\n\n  it('should not render a button tag against the \"to\" attribute', () => {\n    const tree = mountWithThemeAndRouter(<Link to=\"/\">{linkContent}</Link>)\n    expect(tree.find('button')).toHaveLength(0)\n  })\n\n  it('should render an anchor tag against the \"href\" attribute', () => {\n    const anchor = renderWithTheme(<Link href={linkHref}>{linkContent}</Link>)\n    const tree = mountWithTheme(<Link href={linkHref}>{linkContent}</Link>)\n    expect(tree.find('a')).toHaveLength(1)\n    expect(anchor).toMatchSnapshot()\n  })\n\n  it('should not render an anchor tag against the \"onClick\" attribute', () => {\n    const tree = mountWithTheme(<Link onClick={onClick}>{linkContent}</Link>)\n    expect(tree.find('a')).toHaveLength(0)\n  })\n\n  it('should render an anchor tag from a router link against the \"to\" attribute', () => {\n    const routerLink = renderWithThemeAndRouter(<Link to=\"/\">{linkContent}</Link>)\n    const tree = mountWithThemeAndRouter(<Link to=\"/\">{linkContent}</Link>)\n    expect(tree.find('RouterLinkWrapper[data-test=\"ewb-router-link\"]')).toHaveLength(1)\n    expect(routerLink).toMatchSnapshot()\n  })\n\n  it('should not render an anchor tag from a router link against the \"onClick\" attribute', () => {\n    const tree = mountWithTheme(<Link onClick={onClick}>{linkContent}</Link>)\n    expect(tree.find('RouterLinkWrapper[data-test=\"ewb-router-link\"]')).toHaveLength(0)\n  })\n\n  it('should not render an anchor tag from a router link against the \"href\" attribute', () => {\n    const tree = mountWithTheme(<Link href={linkHref}>{linkContent}</Link>)\n    expect(tree.find('RouterLinkWrapper[data-test=\"ewb-router-link\"]')).toHaveLength(0)\n  })\n\n  it('should render an anchor tag with a left icon', () => {\n    const tree = renderWithTheme(\n      <Link\n        scale=\"large\"\n        iconLeft={\n          <Icon>\n            <StyleguideArrow />\n          </Icon>\n        }>\n        {linkContent}\n      </Link>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('should render an anchor tag with a right icon', () => {\n    const tree = renderWithTheme(\n      <Link\n        scale=\"small\"\n        iconRight={\n          <Icon>\n            <StyleguideArrow />\n          </Icon>\n        }>\n        {linkContent}\n      </Link>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n})\n"],"file":"Link.test.js"}