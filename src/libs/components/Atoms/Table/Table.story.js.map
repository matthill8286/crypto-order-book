{"version":3,"sources":["../../../../src/components/Atoms/Table/Table.story.tsx"],"names":["boolean","select","storiesOf","React","Table","TableBody","TableCell","TableHead","TableRow","cryptoCurrenciesMock","customTableElements","Readme","StyledColoredData","StyledGhostRow","StyledGhostSprite","CopyText","styled","StyledTableWrapper","div","module","add","tableKnobs","layout","withBorderRadius","ariaLabel","tableCellKnobs","borderDirection","noBorder","Object","keys","asks","map","crypto","values","colorSpriteWidth","total","maxPriceSize","ticker","price","size","info","row","index","asset","assetNumber"],"mappings":"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","sourcesContent":["import { boolean, select } from '@storybook/addon-knobs'\nimport { storiesOf } from '@storybook/react'\nimport React from 'react'\nimport { Table, TableBody, TableCell, TableHead, TableRow } from './index'\nimport { cryptoCurrenciesMock, customTableElements } from './Table.mock'\nimport Readme from './Table.readme.md'\nimport {\n  StyledColoredData,\n  StyledGhostRow,\n  StyledGhostSprite,\n} from '@/components/Atoms/Table/TableRow'\nimport { CopyText } from '@/components/Atoms/Typography'\nimport { styled } from '@/styles'\n\ninterface TableRowType {\n  type: string\n  value: string\n}\n\ninterface RichTextRow {\n  asset: string | React.ReactNode\n  assetNumber?: string\n  noBorder: boolean\n}\n\nconst StyledTableWrapper = styled.div`\n  max-width: 600px;\n`\n\nstoriesOf('Design System/Atoms/Table', module)\n  .add(\n    'default',\n    () => {\n      const tableKnobs = {\n        layout: select('table-layout', ['auto', 'fixed', 'initial'], 'auto', 'Table'),\n        withBorderRadius: boolean('withBorderRadius', true, 'Table'),\n        ariaLabel: 'this is a table',\n      }\n\n      const tableCellKnobs = {\n        borderDirection: select('border-direction', ['right', 'bottom'], 'bottom', 'Cell'),\n        noBorder: boolean('noBorder', false, 'Cell'),\n      }\n\n      return (\n        <StyledTableWrapper>\n          <Table {...tableKnobs} withBackground>\n            <TableHead backgroundColor=\"secondary\" borderColor=\"grey2\" isOutlineRequired>\n              <TableRow isReversed disableHover backgroundColor=\"secondary\">\n                <TableCell cellType=\"th\" {...tableCellKnobs}>\n                  <CopyText padding=\"0\" margin=\"0\" color=\"grey4\" toUpperCase>\n                    Price\n                  </CopyText>\n                </TableCell>\n                <TableCell cellType=\"th\" {...tableCellKnobs}>\n                  <CopyText padding=\"0\" margin=\"0\" color=\"grey4\" toUpperCase>\n                    Size\n                  </CopyText>\n                </TableCell>\n                <TableCell cellType=\"th\" {...tableCellKnobs}>\n                  <CopyText padding=\"0\" margin=\"0\" color=\"grey4\" toUpperCase>\n                    Total\n                  </CopyText>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody backgroundColor=\"secondary\">\n              {Object.keys(cryptoCurrenciesMock.asks).map(crypto => {\n                const values = cryptoCurrenciesMock.asks[crypto]\n                const colorSpriteWidth =\n                  (cryptoCurrenciesMock.asks[crypto].total / cryptoCurrenciesMock.maxPriceSize) *\n                  100\n                return (\n                  <>\n                    <StyledGhostRow>\n                      <StyledGhostSprite isReversed>\n                        {cryptoCurrenciesMock.ticker === 'PI_XBTUSD' ? (\n                          <StyledColoredData color=\"error\" showPercentage={colorSpriteWidth} />\n                        ) : null}\n                      </StyledGhostSprite>\n                    </StyledGhostRow>\n                    <TableRow key={values.price} isReversed disableHover backgroundColor=\"white\">\n                      <TableCell {...tableCellKnobs} mobileHeadline cellColor=\"white\">\n                        <CopyText bold padding=\"0\" margin=\"0\" color=\"error\">\n                          {values.price}\n                        </CopyText>\n                      </TableCell>\n                      <TableCell cellColor=\"white\" {...tableCellKnobs}>\n                        <CopyText bold padding=\"0\" margin=\"0\" color=\"white\">\n                          {values.size}\n                        </CopyText>\n                      </TableCell>\n                      <TableCell cellColor=\"white\" {...tableCellKnobs}>\n                        <CopyText bold padding=\"0\" margin=\"0\" color=\"white\">\n                          {values.total}\n                        </CopyText>\n                      </TableCell>\n                    </TableRow>\n                  </>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </StyledTableWrapper>\n      )\n    },\n    {\n      info: Readme,\n    }\n  )\n  .add(\n    'customTableElements | desktop',\n    () => {\n      const tableKnobs = {\n        layout: select('table-layout', ['auto', 'fixed', 'initial'], 'auto', 'Table'),\n        withBorderRadius: boolean('withBorderRadius', true, 'Table'),\n        ariaLabel: 'this is a table',\n      }\n\n      const tableCellKnobs = {\n        borderDirection: select('border-direction', ['right', 'bottom'], 'bottom', 'Cell'),\n        noBorder: boolean('noBorder', false, 'Cell'),\n      }\n      return (\n        <Table {...tableKnobs}>\n          <TableHead>\n            <TableRow>\n              <TableCell cellType=\"th\" collapsible {...tableCellKnobs}>\n                <div>Allow</div>\n              </TableCell>\n              <TableCell cellType=\"th\" collapsible={false} {...tableCellKnobs}>\n                <div>Category</div>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {customTableElements.map((row: RichTextRow, index) => (\n              <TableRow key={index}>\n                <TableCell\n                  {...tableCellKnobs}\n                  cellWidth={10}\n                  collapsible={false}\n                  noBorder={row.noBorder}>\n                  {row.asset}\n                </TableCell>\n                <TableCell\n                  {...tableCellKnobs}\n                  cellWidth={10}\n                  collapsible={false}\n                  noBorder={row.noBorder}>\n                  {row.assetNumber}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      )\n    },\n    {\n      info: Readme,\n    }\n  )\n"],"file":"Table.story.js"}