{"version":3,"sources":["../../../../../src/components/Atoms/Table/mock/CustomTableMockElements.tsx"],"names":["React","CopyText","Heading","FlexBox","FlexItem","Spacer","styled","InfoText","InfoLine","headingProps","scale","tag","color","lineHeight","fontFamily","StyledTableDescription","StyledTableDataWrapper","TableTitle","assetName","provider","replace","TableWithDescription","assetWithTitle","description","TableData","asset","subTexts","map","subText","index","CustomText","text","textWeight","fontSize","additionalInfo","additionalInfoTextAlign"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { CopyText, Heading } from '@/components/Atoms/Typography'\nimport { HeadingProps } from '@/components/Atoms/Typography/Heading/Heading.interface'\nimport { FlexBox, FlexItem, Spacer } from '@/index'\nimport { styled } from '@/styles/styled'\nimport { ThemeFontSizes, ThemeFontWeights } from '@/types/theme'\nimport { InfoText as InfoLine } from '../../Typography/InfoText'\n\ninterface TableTitleProps {\n  assetName: string\n  provider: string\n}\n\ninterface TableWithDescriptionProps {\n  assetWithTitle: TableTitleProps\n  description?: string\n}\n\ninterface TableDataProps {\n  asset: TableWithDescriptionProps\n  subTexts: string[]\n}\n\nconst headingProps: HeadingProps = {\n  scale: 'level-5',\n  tag: 'p',\n  color: 'black',\n  lineHeight: 'sm',\n  fontFamily: 'default',\n}\n\nexport const StyledTableDescription = styled(CopyText)`\n  margin-left: 12px;\n`\n\nexport const StyledTableDataWrapper = styled(FlexItem)`\n  margin-left: 12px;\n`\n\nexport const TableTitle: React.FC<TableTitleProps> = ({ assetName, provider }) => {\n  return (\n    <>\n      <Heading {...headingProps} margin=\"0\" limitLines={2} data-test=\"asset-title\">\n        <CopyText fontSize=\"sm\" tag=\"span\" bold data-test=\"asset-provider\">\n          {provider}\n        </CopyText>\n        {assetName.replace(provider || '', '')}\n      </Heading>\n    </>\n  )\n}\n\nexport const TableWithDescription: React.FC<TableWithDescriptionProps> = ({\n  assetWithTitle,\n  description,\n}) => {\n  return (\n    <>\n      <TableTitle {...assetWithTitle} />\n      {description && (\n        <FlexBox flexDirection=\"row\">\n          <StyledTableDescription fontSize=\"sm\" tag=\"span\" data-test=\"asset-description\">\n            {description}\n          </StyledTableDescription>\n        </FlexBox>\n      )}\n    </>\n  )\n}\n\nexport const TableData: React.FC<TableDataProps> = ({ asset, subTexts }) => {\n  return (\n    <>\n      <TableWithDescription {...asset} />\n      <Spacer size=\"xs\" />\n      {asset.description ? (\n        <FlexBox flexDirection=\"row\">\n          <StyledTableDataWrapper>\n            {subTexts.map((subText, index) => (\n              <CopyText key={index} fontSize=\"xxs\" limitLines={0} margin=\"\" tag=\"p\">\n                {subText}\n              </CopyText>\n            ))}\n          </StyledTableDataWrapper>\n        </FlexBox>\n      ) : (\n        subTexts.map((subText, index) => (\n          <CopyText key={index} fontSize=\"xxs\" limitLines={0} margin=\"\" tag=\"p\">\n            {subText}\n          </CopyText>\n        ))\n      )}\n    </>\n  )\n}\n\ninterface CustomTextProps {\n  text: string\n  textWeight?: ThemeFontWeights\n  fontSize?: ThemeFontSizes\n  additionalInfo?: string\n  additionalInfoTextAlign?: 'left' | 'right'\n}\n\nexport const CustomText: React.FC<CustomTextProps> = ({\n  text,\n  textWeight = 'semibold',\n  fontSize = 'xs',\n  additionalInfo,\n  additionalInfoTextAlign = 'right',\n}) => {\n  return (\n    <>\n      <Heading tag=\"h1\" scale=\"level-2\" weight={textWeight} fontSize={fontSize}>\n        {text}\n      </Heading>\n      {additionalInfo && (\n        <InfoLine fontSize={'xs'} textAlign={additionalInfoTextAlign}>\n          {additionalInfo}\n        </InfoLine>\n      )}\n    </>\n  )\n}\n"],"file":"CustomTableMockElements.js"}