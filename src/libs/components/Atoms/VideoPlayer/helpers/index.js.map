{"version":3,"sources":["../../../../../src/components/Atoms/VideoPlayer/helpers/index.ts"],"names":["MATCH_YOUTUBE","MATCH_SOUNDCLOUD","MATCH_VIMEO","MATCH_VIMEO_LIVESTREAM","MATCH_TED","MATCH_FACEBOOK","MATCH_FACEBOOK_WATCH","MATCH_STREAMABLE","MATCH_MIX_CLOUD","AUDIO_EXTENSIONS","VIDEO_EXTENSIONS","HLS_EXTENSIONS","DASH_EXTENSIONS","FLV_EXTENSIONS","canPlayFile","url","Array","item","src","test","canPlay","youtube","every","soundcloud","vimeo","livestream","ted","facebook","streamable","mixcloud","file","format","seconds","date","Date","hh","getUTCHours","mm","getUTCMinutes","ss","pad","getUTCSeconds","string","slice","duration","elapsed","played","remaining"],"mappings":";;;;;;AAAA,OAAO,IAAMA,aAAa,GAAG,2JAAtB;AACP,OAAO,IAAMC,gBAAgB,GAAG,qCAAzB;AACP,OAAO,IAAMC,WAAW,GAAG,gBAApB;AACP,OAAO,IAAMC,sBAAsB,GAAG,uBAA/B;AACP,OAAO,IAAMC,SAAS,GAAG,qBAAlB;AACP,OAAO,IAAMC,cAAc,GAAG,4EAAvB;AACP,OAAO,IAAMC,oBAAoB,GAAG,4BAA7B;AACP,OAAO,IAAMC,gBAAgB,GAAG,+BAAzB;AACP,OAAO,IAAMC,eAAe,GAAG,+BAAxB;AAEP,OAAO,IAAMC,gBAAgB,GAAG,oEAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,oCAAzB;AACP,OAAO,IAAMC,cAAc,GAAG,iBAAvB;AACP,OAAO,IAAMC,eAAe,GAAG,gBAAxB;AACP,OAAO,IAAMC,cAAc,GAAG,eAAvB;;AAEP,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,GAAG,EAAI;AACzB,MAAIA,GAAG,YAAYC,KAAnB,EAA0B;AAAA,+CACLD,GADK;AAAA;;AAAA;AACxB,0DAAwB;AAAA,YAAbE,IAAa;;AACtB,YAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BH,WAAW,CAACG,IAAD,CAA3C,EAAmD;AACjD,iBAAO,IAAP;AACD;;AACD,YAAIH,WAAW,CAACG,IAAI,CAACC,GAAN,CAAf,EAA2B;AACzB,iBAAO,IAAP;AACD;AACF;AARuB;AAAA;AAAA;AAAA;AAAA;;AASxB,WAAO,KAAP;AACD;;AAED,SACET,gBAAgB,CAACU,IAAjB,CAAsBJ,GAAtB,KACAL,gBAAgB,CAACS,IAAjB,CAAsBJ,GAAtB,CADA,IAEAJ,cAAc,CAACQ,IAAf,CAAoBJ,GAApB,CAFA,IAGAH,eAAe,CAACO,IAAhB,CAAqBJ,GAArB,CAHA,IAIAF,cAAc,CAACM,IAAf,CAAoBJ,GAApB,CALF;AAOD,CApBD;;AAsBA,OAAO,IAAMK,OAAO,GAAG;AACrBC,EAAAA,OAAO,EAAE,iBAAAN,GAAG,EAAI;AACd,QAAIA,GAAG,YAAYC,KAAnB,EAA0B;AACxB,aAAOD,GAAG,CAACO,KAAJ,CAAU,UAAAL,IAAI;AAAA,eAAIjB,aAAa,CAACmB,IAAd,CAAmBF,IAAnB,CAAJ;AAAA,OAAd,CAAP;AACD;;AACD,WAAOjB,aAAa,CAACmB,IAAd,CAAmBJ,GAAnB,CAAP;AACD,GANoB;AAOrBQ,EAAAA,UAAU,EAAE,oBAAAR,GAAG;AAAA,WAAId,gBAAgB,CAACkB,IAAjB,CAAsBJ,GAAtB,KAA8B,CAACN,gBAAgB,CAACU,IAAjB,CAAsBJ,GAAtB,CAAnC;AAAA,GAPM;AAQrBS,EAAAA,KAAK,EAAE,eAAAT,GAAG;AAAA,WACRb,WAAW,CAACiB,IAAZ,CAAiBJ,GAAjB,KACA,CAACZ,sBAAsB,CAACgB,IAAvB,CAA4BJ,GAA5B,CADD,IAEA,CAACL,gBAAgB,CAACS,IAAjB,CAAsBJ,GAAtB,CAFD,IAGA,CAACJ,cAAc,CAACQ,IAAf,CAAoBJ,GAApB,CAJO;AAAA,GARW;AAarBU,EAAAA,UAAU,EAAE,oBAAAV,GAAG;AAAA,WACbZ,sBAAsB,CAACgB,IAAvB,CAA4BJ,GAA5B,KAAoC,CAACL,gBAAgB,CAACS,IAAjB,CAAsBJ,GAAtB,CAArC,IAAmE,CAACJ,cAAc,CAACQ,IAAf,CAAoBJ,GAApB,CADvD;AAAA,GAbM;AAerBW,EAAAA,GAAG,EAAE,aAAAX,GAAG;AAAA,WAAIX,SAAS,CAACe,IAAV,CAAeJ,GAAf,KAAuB,CAACL,gBAAgB,CAACS,IAAjB,CAAsBJ,GAAtB,CAAxB,IAAsD,CAACJ,cAAc,CAACQ,IAAf,CAAoBJ,GAApB,CAA3D;AAAA,GAfa;AAgBrBY,EAAAA,QAAQ,EAAE,kBAAAZ,GAAG;AAAA,WAAIV,cAAc,CAACc,IAAf,CAAoBJ,GAApB,KAA4BT,oBAAoB,CAACa,IAArB,CAA0BJ,GAA1B,CAAhC;AAAA,GAhBQ;AAiBrBa,EAAAA,UAAU,EAAE,oBAAAb,GAAG;AAAA,WAAIR,gBAAgB,CAACY,IAAjB,CAAsBJ,GAAtB,CAAJ;AAAA,GAjBM;AAkBrBc,EAAAA,QAAQ,EAAE,kBAAAd,GAAG;AAAA,WAAIP,eAAe,CAACW,IAAhB,CAAqBJ,GAArB,CAAJ;AAAA,GAlBQ;AAmBrBe,EAAAA,IAAI,EAAEhB;AAnBe,CAAhB;AAsBP,OAAO,IAAMiB,MAAM,GAAG,SAATA,MAAS,CAAAC,OAAO,EAAI;AAC/B,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,OAAO,GAAG,IAAnB,CAAb;AACA,MAAMG,EAAE,GAAGF,IAAI,CAACG,WAAL,EAAX;AACA,MAAMC,EAAE,GAAGJ,IAAI,CAACK,aAAL,EAAX;AACA,MAAMC,EAAE,GAAGC,GAAG,CAACP,IAAI,CAACQ,aAAL,EAAD,CAAd;;AACA,MAAIN,EAAJ,EAAQ;AACN,qBAAUA,EAAV,cAAgBK,GAAG,CAACH,EAAD,CAAnB,cAA2BE,EAA3B;AACD;;AACD,mBAAUF,EAAV,cAAgBE,EAAhB;AACD,CATM;;AAWP,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAAE,MAAM,EAAI;AACpB,SAAO,CAAC,MAAMA,MAAP,EAAeC,KAAf,CAAqB,CAAC,CAAtB,CAAP;AACD,CAFD;;AAIA,OAAO,IAAMC,QAAQ,GAAG,kBAAAA,SAAQ;AAAA,SAAIb,MAAM,CAACa,SAAD,CAAV;AAAA,CAAzB;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACD,QAAD,EAAWE,MAAX;AAAA,SAAsBf,MAAM,CAACa,QAAQ,GAAGE,MAAZ,CAA5B;AAAA,CAAhB;AAEP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACH,QAAD,EAAWE,MAAX;AAAA,SAAsBf,MAAM,CAACa,QAAQ,IAAI,IAAIE,MAAR,CAAT,CAA5B;AAAA,CAAlB","sourcesContent":["export const MATCH_YOUTUBE = /(?:youtu\\.be\\/|youtube(?:-nocookie)?\\.com\\/(?:embed\\/|v\\/|watch\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})|youtube\\.com\\/playlist\\?list=|youtube\\.com\\/user\\//\nexport const MATCH_SOUNDCLOUD = /(?:soundcloud\\.com|snd\\.sc)\\/[^.]+$/\nexport const MATCH_VIMEO = /vimeo\\.com\\/.+/\nexport const MATCH_VIMEO_LIVESTREAM = /vimeo\\.com\\/event\\/.+/\nexport const MATCH_TED = /embed\\.ted\\.com\\/.+/\nexport const MATCH_FACEBOOK = /^https?:\\/\\/(www\\.)?facebook\\.com.*\\/(video(s)?|watch|story)(\\.php?|\\/).+$/\nexport const MATCH_FACEBOOK_WATCH = /^https?:\\/\\/fb\\.watch\\/.+$/\nexport const MATCH_STREAMABLE = /streamable\\.com\\/([a-z0-9]+)$/\nexport const MATCH_MIX_CLOUD = /mixcloud\\.com\\/([^/]+\\/[^/]+)/\n\nexport const AUDIO_EXTENSIONS = /\\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i\nexport const VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)($|\\?)/i\nexport const HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i\nexport const DASH_EXTENSIONS = /\\.(mpd)($|\\?)/i\nexport const FLV_EXTENSIONS = /\\.(flv)($|\\?)/\n\nconst canPlayFile = url => {\n  if (url instanceof Array) {\n    for (const item of url) {\n      if (typeof item === 'string' && canPlayFile(item)) {\n        return true\n      }\n      if (canPlayFile(item.src)) {\n        return true\n      }\n    }\n    return false\n  }\n\n  return (\n    AUDIO_EXTENSIONS.test(url) ||\n    VIDEO_EXTENSIONS.test(url) ||\n    HLS_EXTENSIONS.test(url) ||\n    DASH_EXTENSIONS.test(url) ||\n    FLV_EXTENSIONS.test(url)\n  )\n}\n\nexport const canPlay = {\n  youtube: url => {\n    if (url instanceof Array) {\n      return url.every(item => MATCH_YOUTUBE.test(item))\n    }\n    return MATCH_YOUTUBE.test(url)\n  },\n  soundcloud: url => MATCH_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url),\n  vimeo: url =>\n    MATCH_VIMEO.test(url) &&\n    !MATCH_VIMEO_LIVESTREAM.test(url) &&\n    !VIDEO_EXTENSIONS.test(url) &&\n    !HLS_EXTENSIONS.test(url),\n  livestream: url =>\n    MATCH_VIMEO_LIVESTREAM.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url),\n  ted: url => MATCH_TED.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url),\n  facebook: url => MATCH_FACEBOOK.test(url) || MATCH_FACEBOOK_WATCH.test(url),\n  streamable: url => MATCH_STREAMABLE.test(url),\n  mixcloud: url => MATCH_MIX_CLOUD.test(url),\n  file: canPlayFile,\n}\n\nexport const format = seconds => {\n  const date = new Date(seconds * 1000)\n  const hh = date.getUTCHours()\n  const mm = date.getUTCMinutes()\n  const ss = pad(date.getUTCSeconds())\n  if (hh) {\n    return `${hh}:${pad(mm)}:${ss}`\n  }\n  return `${mm}:${ss}`\n}\n\nconst pad = string => {\n  return ('0' + string).slice(-2)\n}\n\nexport const duration = duration => format(duration)\n\nexport const elapsed = (duration, played) => format(duration * played)\n\nexport const remaining = (duration, played) => format(duration * (1 - played))\n"],"file":"index.js"}