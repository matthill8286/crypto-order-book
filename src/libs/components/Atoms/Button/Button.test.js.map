{"version":3,"sources":["../../../../src/components/Atoms/Button/Button.test.tsx"],"names":["React","BrowserRouter","Router","mountWithTheme","renderWithTheme","Button","describe","onClick","jest","fn","buttonContent","it","tree","expect","toMatchSnapshot","find","simulate","mock","calls","length","toEqual"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,SAASC,cAAT,EAAyBC,eAAzB;AACA,SAASC,MAAT;AAEAC,QAAQ,CAAC,QAAD,EAAW,YAAM;AACvB,MAAMC,OAAO,GAAGC,IAAI,CAACC,EAAL,EAAhB;AACA,MAAMC,aAAa,GAAG,SAAtB;AAEAC,EAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAM;AACjC,QAAMC,IAAI,GAAGR,eAAe,CAAC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEG;AAAjB,OAA2BG,aAA3B,CAAD,CAA5B;AACAG,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,qBAAD,EAAwB,YAAM;AAC9B,QAAMC,IAAI,GAAGT,cAAc,CAAC,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEI;AAAjB,OAA2BG,aAA3B,CAAD,CAA3B;AACAE,IAAAA,IAAI,CAACG,IAAL,CAAU,QAAV,EAAoBC,QAApB,CAA6B,OAA7B;AACAH,IAAAA,MAAM,CAACN,OAAO,CAACU,IAAR,CAAaC,KAAb,CAAmBC,MAApB,CAAN,CAAkCC,OAAlC,CAA0C,CAA1C;AACD,GAJC,CAAF;AAMAT,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAClC,QAAMC,IAAI,GAAGR,eAAe,CAAC,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC;AAAb,OAAkBM,aAAlB,CAAD,CAA5B;AACAG,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAHC,CAAF;AAKAH,EAAAA,EAAE,CAAC,6BAAD,EAAgC,YAAM;AACtC,QAAMC,IAAI,GAAGR,eAAe,CAC1B,oBAAC,MAAD,QACE,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC;AAAX,OAAgBM,aAAhB,CADF,CAD0B,CAA5B;AAKAG,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAPC,CAAF;AASAH,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACxC,QAAMC,IAAI,GAAGR,eAAe,CAC1B,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEG,OAAjB;AAA0B,MAAA,SAAS;AAAnC,OACGG,aADH,CAD0B,CAA5B;AAKAG,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAPC,CAAF;AASAH,EAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAM;AAC9C,QAAMC,IAAI,GAAGR,eAAe,CAC1B,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEG,OAAjB;AAA0B,MAAA,aAAa;AAAvC,OACGG,aADH,CAD0B,CAA5B;AAKAG,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,eAAb;AACD,GAPC,CAAF;AAQD,CA9CO,CAAR","sourcesContent":["import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { mountWithTheme, renderWithTheme } from '@/testRenderer'\nimport { Button } from './Button'\n\ndescribe('Button', () => {\n  const onClick = jest.fn()\n  const buttonContent = 'Button '\n\n  it('Should render a button', () => {\n    const tree = renderWithTheme(<Button onClick={onClick}>{buttonContent}</Button>)\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should be clickable', () => {\n    const tree = mountWithTheme(<Button onClick={onClick}>{buttonContent}</Button>)\n    tree.find('button').simulate('click')\n    expect(onClick.mock.calls.length).toEqual(1)\n  })\n\n  it('Should render an anchor', () => {\n    const tree = renderWithTheme(<Button href=\"#\">{buttonContent}</Button>)\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a router Link', () => {\n    const tree = renderWithTheme(\n      <Router>\n        <Button to=\"/\">{buttonContent}</Button>\n      </Router>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a loading state', () => {\n    const tree = renderWithTheme(\n      <Button onClick={onClick} isLoading>\n        {buttonContent}\n      </Button>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n\n  it('Should render a completed checkmark', () => {\n    const tree = renderWithTheme(\n      <Button onClick={onClick} showCheckmark>\n        {buttonContent}\n      </Button>\n    )\n    expect(tree).toMatchSnapshot()\n  })\n})\n"],"file":"Button.test.js"}