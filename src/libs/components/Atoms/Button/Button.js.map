{"version":3,"sources":["../../../../src/components/Atoms/Button/Button.tsx"],"names":["React","StyledAnchorButton","StyledButton","StyledLoadingIndicator","StyledRouterButton","ButtonCheckmarkCircle","buttonColours","secondary","inverted","lightBorder","darkBorder","ghost","outlined","primary","prominent","Button","actionType","children","disabled","round","squared","curved","fullWidth","isLoading","isFlat","elevated","showCheckmark","weight","onClick","size","to","href","type","className","id","otherProps","handleOnClick","ev","stopPropagation","renderLoading","color"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { LoadingIndicatorColor } from '../LoadingIndicator'\nimport { ButtonActionType, ButtonProps } from './Button.interface'\nimport {\n  StyledAnchorButton,\n  StyledButton,\n  StyledLoadingIndicator,\n  StyledRouterButton,\n} from './Button.styled'\nimport { ButtonCheckmarkCircle } from './ButtonCheckmarkCircle'\n\nconst buttonColours = {\n  secondary: 'black',\n  inverted: 'black',\n  lightBorder: 'black',\n  darkBorder: 'black',\n  ghost: 'black',\n  outlined: 'primary',\n  primary: 'white',\n  prominent: 'white',\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  actionType = 'prominent',\n  children,\n  disabled = false,\n  round = false,\n  squared = false,\n  curved = false,\n  fullWidth = false,\n  isLoading = false,\n  isFlat = false,\n  elevated = false,\n  showCheckmark = false,\n  weight,\n  onClick,\n  size = 'md',\n  to,\n  href,\n  type = 'button',\n  className,\n  id,\n  ...otherProps\n}) => {\n  const handleOnClick = (ev: React.MouseEvent<HTMLElement>) => {\n    ev.stopPropagation()\n    if (disabled || isLoading) {\n      return\n    }\n    if (onClick) {\n      onClick(ev)\n    }\n  }\n\n  const renderLoading = (actionType: ButtonActionType) => {\n    const color = buttonColours[actionType] as LoadingIndicatorColor\n    return <StyledLoadingIndicator isVisible={true} size={20} color={color} />\n  }\n\n  if (href) {\n    return (\n      <StyledAnchorButton\n        actionType={actionType}\n        size={size}\n        type={type}\n        fullWidth={fullWidth}\n        disabled={disabled}\n        round={round}\n        squared={squared}\n        curved={curved}\n        elevated={elevated}\n        weight={weight}\n        href={href}\n        isLoading={isLoading}\n        className={className}\n        id={id}\n        {...otherProps}>\n        {children}\n        {isLoading && !disabled && renderLoading(actionType)}\n      </StyledAnchorButton>\n    )\n  }\n\n  if (to != null && to !== '') {\n    return (\n      <StyledRouterButton\n        actionType={actionType}\n        size={size}\n        type={type}\n        fullWidth={fullWidth}\n        disabled={disabled}\n        round={round}\n        squared={squared}\n        curved={curved}\n        elevated={elevated}\n        weight={weight}\n        isLoading={isLoading}\n        to={to}\n        className={className}\n        id={id}\n        {...otherProps}>\n        {children}\n        {isLoading && !disabled && renderLoading(actionType)}\n      </StyledRouterButton>\n    )\n  }\n\n  return (\n    <StyledButton\n      actionType={actionType}\n      size={size}\n      type={type}\n      isFlat={isFlat}\n      fullWidth={fullWidth}\n      disabled={disabled}\n      round={round}\n      squared={squared}\n      curved={curved}\n      elevated={elevated}\n      weight={weight}\n      isLoading={isLoading}\n      onClick={handleOnClick}\n      className={className}\n      id={id}\n      {...otherProps}>\n      {children}\n      {showCheckmark && <ButtonCheckmarkCircle />}\n      {isLoading && !disabled && renderLoading(actionType)}\n    </StyledButton>\n  )\n}\n"],"file":"Button.js"}