{"version":3,"sources":["../../src/utils/helper.ts"],"names":["useContext","alternateTheme","saiyanTheme","ThemeContext","isSaiyanTheme","name","isAlternateTheme","getColor","changeColorProps","color","theme","colorProp","defaultColor","useTheme","containsHtmlTags"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,cAAT,EAAyBC,WAAzB;AACA,SAASC,YAAT;AASA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAe;AAAA,oBACzBJ,UAAU,CAACG,YAAD,CADe;AAAA,MAClCE,IADkC,eAClCA,IADkC;;AAE1C,SAAOA,IAAI,KAAKH,WAAW,CAACG,IAA5B;AACD,CAHM;AAKP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAe;AAAA,qBAC5BN,UAAU,CAACG,YAAD,CADkB;AAAA,MACrCE,IADqC,gBACrCA,IADqC;;AAE7C,SAAOA,IAAI,KAAKJ,cAAc,CAACI,IAA/B;AACD,CAHM;AAMP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,gBAAD,EAAqD;AAC3E,MAAMC,KAAK,GAAGD,gBAAgB,CAACC,KAA/B;AACA,MAAMC,KAAK,GAAGF,gBAAgB,CAACE,KAA/B;AACA,MAAIC,SAAJ;;AACA,MAAIF,KAAK,KAAK,SAAd,EAAyB;AACvB,QAAIL,aAAa,EAAjB,EAAqB;AACnBO,MAAAA,SAAS,GAAGF,KAAZ;AACD,KAFD,MAEO;AACLE,MAAAA,SAAS,GAAG,OAAZ;AACD;AACF,GAND,MAMO;AACLA,IAAAA,SAAS,GAAGF,KAAZ;AACD;;AACD,SAAOE,SAAS,GAAID,KAAK,GAAGA,KAAK,CAACD,KAAN,CAAYE,SAAZ,CAAH,GAA4BA,SAArC,GAAkDH,gBAAgB,CAACI,YAAnF;AACD,CAdM;AAgBP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAa;AACnC,SAAOb,UAAU,CAACG,YAAD,CAAjB;AACD,CAFM;AAIP,OAAO,IAAMW,gBAAgB,GAAG,QAAzB","sourcesContent":["import { useContext } from 'react'\nimport { alternateTheme, saiyanTheme } from '@/styles'\nimport { ThemeContext } from '@/styles/styled'\nimport { Theme, ThemeColors } from '@/types'\n\nexport interface ChangeColorProps {\n  theme?: Theme\n  defaultColor: ThemeColors\n  color?: ThemeColors\n}\n\nexport const isSaiyanTheme = (): boolean => {\n  const { name } = useContext(ThemeContext)\n  return name === saiyanTheme.name\n}\n\nexport const isAlternateTheme = (): boolean => {\n  const { name } = useContext(ThemeContext)\n  return name === alternateTheme.name\n}\n\n// returns the input color. if it is the primary color it will change it to grey for alternate\nexport const getColor = (changeColorProps: ChangeColorProps): ThemeColors => {\n  const color = changeColorProps.color\n  const theme = changeColorProps.theme\n  let colorProp: ThemeColors | undefined\n  if (color === 'primary') {\n    if (isSaiyanTheme()) {\n      colorProp = color\n    } else {\n      colorProp = 'grey6'\n    }\n  } else {\n    colorProp = color\n  }\n  return colorProp ? (theme ? theme.color[colorProp] : colorProp) : changeColorProps.defaultColor\n}\n\nexport const useTheme = (): Theme => {\n  return useContext(ThemeContext)\n}\n\nexport const containsHtmlTags = /<.+?>/g\n"],"file":"helper.js"}