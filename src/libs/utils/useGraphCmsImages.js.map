{"version":3,"sources":["../../src/utils/useGraphCmsImages.ts"],"names":["useInView","DocumentOutput","ImageResizeFit","buildTransformations","separator","args","Array","prototype","slice","call","arguments","join","getTransformedImageVersion","handle","useGraphCmsImages","imageHandles","skip","imageArguments","undefined","triggerOnce","threshold","ref","inView","finalImageHandles","map","image"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,6BAA1B;AAEA,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAMZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAOZ,SAASC,oBAAT,CAA8BC,SAA9B,EAAyC;AACvC,MAAMC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAb;AACA,SAAOL,IAAI,CAACM,IAAL,CAAUP,SAAV,CAAP;AACD;;AAED,OAAO,IAAMQ,0BAA0B,GAAG,SAA7BA,0BAA6B,CACxCC,MADwC,EAExCR,IAFwC,EAGrC;AACH,MAAIA,IAAJ,EAAU;AAER,gDAAqCF,oBAAoB,MAApB,UAAqB,GAArB,4BAA6BE,IAA7B,GAArC,cAA2EQ,MAA3E;AACD;;AAED,MAAIA,MAAJ,EAAY;AACV,gDAAqCA,MAArC;AACD;AACF,CAZM;AAcP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/BC,YAD+B,EAI+B;AAAA,MAF9DC,IAE8D,uEAFvD,KAEuD;AAAA,MAD9DC,cAC8D,uEAD7CC,SAC6C;;AAAA,mBACxClB,SAAS,CAAC;AAC9BmB,IAAAA,WAAW,EAAE,IADiB;AAE9BC,IAAAA,SAAS,EAAE;AAFmB,GAAD,CAD+B;AAAA;AAAA,MACvDC,GADuD;AAAA,MAClDC,MADkD;;AAM9D,MAAIC,iBAAiB,GAAGR,YAAxB;;AAEA,MAAI,CAACO,MAAD,IAAW,CAACN,IAAhB,EAAsB;AACpBO,IAAAA,iBAAiB,GAAGR,YAAY,CAACS,GAAb,CAAiB,UAAAC,KAAK;AAAA,aAAIb,0BAA0B,CAACa,KAAD,EAAQR,cAAR,CAA9B;AAAA,KAAtB,CAApB;AACD;;AAED,SAAO,CAACM,iBAAD,EAAoBF,GAApB,CAAP;AACD,CAjBM","sourcesContent":["import { useInView } from 'react-intersection-observer'\n\nexport enum DocumentOutput {\n  svg = 'svg',\n  jpg = 'jpg',\n  png = 'png',\n}\n\nexport enum ImageResizeFit {\n  clip = 'clip',\n  crop = 'crop',\n  scale = 'scale',\n  max = 'max',\n}\n\nfunction buildTransformations(separator) {\n  const args = Array.prototype.slice.call(arguments, 1)\n  return args.join(separator)\n}\n\nexport const getTransformedImageVersion = (\n  handle?: string,\n  args?: typeof DocumentOutput[] | typeof ImageResizeFit[] | string[] | undefined\n) => {\n  if (args) {\n    // @ts-ignore\n    return `https://media.graphcms.com/${buildTransformations('/', ...args)}/${handle}`\n  }\n\n  if (handle) {\n    return `https://media.graphcms.com/${handle}`\n  }\n}\n\nexport const useGraphCmsImages = (\n  imageHandles: (string | undefined)[],\n  skip = false,\n  imageArguments = undefined\n): [(string | undefined)[], (node?: Element | null) => void] => {\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    threshold: 0.2,\n  })\n\n  let finalImageHandles = imageHandles\n\n  if (!inView && !skip) {\n    finalImageHandles = imageHandles.map(image => getTransformedImageVersion(image, imageArguments))\n  }\n\n  return [finalImageHandles, ref]\n}\n"],"file":"useGraphCmsImages.js"}